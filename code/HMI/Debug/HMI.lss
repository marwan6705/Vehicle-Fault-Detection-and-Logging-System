
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00004b40  00004bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080018c  0080018c  00004d00  2**0
                  ALLOC
  3 .stab         00003fcc  00000000  00000000  00004d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001650  00000000  00000000  00008ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a31c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a45c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c215  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000deb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e010  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e29d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ea6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__vector_4>
      14:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__vector_9>
      28:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__vector_10>
      2c:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a6 22 	call	0x454c	; 0x454c <main>
      8a:	0c 94 9e 25 	jmp	0x4b3c	; 0x4b3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 22 25 	jmp	0x4a44	; 0x4a44 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 22 25 	jmp	0x4a44	; 0x4a44 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <Timer_init>:
static volatile void (*g_callBackPtr[3])(void) = {NULL_PTR, NULL_PTR, NULL_PTR};
/******************************************************************************
 *                             INITIALIZATION
 ******************************************************************************/
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <Timer_init+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <Timer_init+0x8>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    switch(Config_Ptr->timer_ID)
    11d2:	e9 81       	ldd	r30, Y+1	; 0x01
    11d4:	fa 81       	ldd	r31, Y+2	; 0x02
    11d6:	84 81       	ldd	r24, Z+4	; 0x04
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	3c 83       	std	Y+4, r19	; 0x04
    11de:	2b 83       	std	Y+3, r18	; 0x03
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 05       	cpc	r25, r1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <Timer_init+0x2a>
    11ea:	6a c0       	rjmp	.+212    	; 0x12c0 <Timer_init+0xfe>
    11ec:	2b 81       	ldd	r18, Y+3	; 0x03
    11ee:	3c 81       	ldd	r19, Y+4	; 0x04
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <Timer_init+0x36>
    11f6:	b9 c0       	rjmp	.+370    	; 0x136a <Timer_init+0x1a8>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	09 f0       	breq	.+2      	; 0x1202 <Timer_init+0x40>
    1200:	11 c1       	rjmp	.+546    	; 0x1424 <Timer_init+0x262>
    {
    case Timer0:
        TCCR0 |= (Config_Ptr->timer_clock & 0x07);
    1202:	a3 e5       	ldi	r26, 0x53	; 83
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e3 e5       	ldi	r30, 0x53	; 83
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	98 2f       	mov	r25, r24
    120e:	e9 81       	ldd	r30, Y+1	; 0x01
    1210:	fa 81       	ldd	r31, Y+2	; 0x02
    1212:	85 81       	ldd	r24, Z+5	; 0x05
    1214:	87 70       	andi	r24, 0x07	; 7
    1216:	89 2b       	or	r24, r25
    1218:	8c 93       	st	X, r24
        TCNT0 = (uint8) Config_Ptr->timer_InitialValue;
    121a:	a2 e5       	ldi	r26, 0x52	; 82
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e9 81       	ldd	r30, Y+1	; 0x01
    1220:	fa 81       	ldd	r31, Y+2	; 0x02
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	8c 93       	st	X, r24
        if(Config_Ptr->timer_mode == Normal_Mode)
    1228:	e9 81       	ldd	r30, Y+1	; 0x01
    122a:	fa 81       	ldd	r31, Y+2	; 0x02
    122c:	86 81       	ldd	r24, Z+6	; 0x06
    122e:	88 23       	and	r24, r24
    1230:	e9 f4       	brne	.+58     	; 0x126c <Timer_init+0xaa>
        {
            SET_BIT(TCCR0, FOC0);
    1232:	a3 e5       	ldi	r26, 0x53	; 83
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e3 e5       	ldi	r30, 0x53	; 83
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 68       	ori	r24, 0x80	; 128
    123e:	8c 93       	st	X, r24
            SET_BIT(TIMSK, TOIE0);
    1240:	a9 e5       	ldi	r26, 0x59	; 89
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e9 e5       	ldi	r30, 0x59	; 89
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	81 60       	ori	r24, 0x01	; 1
    124c:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR0, WGM00);
    124e:	a3 e5       	ldi	r26, 0x53	; 83
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e3 e5       	ldi	r30, 0x53	; 83
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8f 7b       	andi	r24, 0xBF	; 191
    125a:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR0, WGM01);
    125c:	a3 e5       	ldi	r26, 0x53	; 83
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e3 e5       	ldi	r30, 0x53	; 83
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	87 7f       	andi	r24, 0xF7	; 247
    1268:	8c 93       	st	X, r24
    126a:	dc c0       	rjmp	.+440    	; 0x1424 <Timer_init+0x262>
        }
        else if(Config_Ptr->timer_mode == Compare_Mode)
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	86 81       	ldd	r24, Z+6	; 0x06
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	09 f0       	breq	.+2      	; 0x1278 <Timer_init+0xb6>
    1276:	d6 c0       	rjmp	.+428    	; 0x1424 <Timer_init+0x262>
        {
            OCR0 = (uint8) Config_Ptr->timer_compare_MatchValue;
    1278:	ac e5       	ldi	r26, 0x5C	; 92
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e9 81       	ldd	r30, Y+1	; 0x01
    127e:	fa 81       	ldd	r31, Y+2	; 0x02
    1280:	82 81       	ldd	r24, Z+2	; 0x02
    1282:	93 81       	ldd	r25, Z+3	; 0x03
    1284:	8c 93       	st	X, r24
            SET_BIT(TCCR0, FOC0);
    1286:	a3 e5       	ldi	r26, 0x53	; 83
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e3 e5       	ldi	r30, 0x53	; 83
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	80 68       	ori	r24, 0x80	; 128
    1292:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR0, WGM00);
    1294:	a3 e5       	ldi	r26, 0x53	; 83
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e3 e5       	ldi	r30, 0x53	; 83
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8f 7b       	andi	r24, 0xBF	; 191
    12a0:	8c 93       	st	X, r24
            SET_BIT(TCCR0, WGM01);
    12a2:	a3 e5       	ldi	r26, 0x53	; 83
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e3 e5       	ldi	r30, 0x53	; 83
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	88 60       	ori	r24, 0x08	; 8
    12ae:	8c 93       	st	X, r24
            SET_BIT(TIMSK, OCIE0);
    12b0:	a9 e5       	ldi	r26, 0x59	; 89
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e9 e5       	ldi	r30, 0x59	; 89
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	82 60       	ori	r24, 0x02	; 2
    12bc:	8c 93       	st	X, r24
    12be:	b2 c0       	rjmp	.+356    	; 0x1424 <Timer_init+0x262>
        }
        break;
    case Timer1:
        TCNT1 = Config_Ptr->timer_InitialValue;
    12c0:	ac e4       	ldi	r26, 0x4C	; 76
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e9 81       	ldd	r30, Y+1	; 0x01
    12c6:	fa 81       	ldd	r31, Y+2	; 0x02
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	9c 93       	st	X, r25
    12d0:	8e 93       	st	-X, r24
        TCCR1B |= (Config_Ptr->timer_clock & 0x07);
    12d2:	ae e4       	ldi	r26, 0x4E	; 78
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ee e4       	ldi	r30, 0x4E	; 78
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	98 2f       	mov	r25, r24
    12de:	e9 81       	ldd	r30, Y+1	; 0x01
    12e0:	fa 81       	ldd	r31, Y+2	; 0x02
    12e2:	85 81       	ldd	r24, Z+5	; 0x05
    12e4:	87 70       	andi	r24, 0x07	; 7
    12e6:	89 2b       	or	r24, r25
    12e8:	8c 93       	st	X, r24
        if(Config_Ptr->timer_mode == Normal_Mode)
    12ea:	e9 81       	ldd	r30, Y+1	; 0x01
    12ec:	fa 81       	ldd	r31, Y+2	; 0x02
    12ee:	86 81       	ldd	r24, Z+6	; 0x06
    12f0:	88 23       	and	r24, r24
    12f2:	b1 f4       	brne	.+44     	; 0x1320 <Timer_init+0x15e>
        {
            SET_BIT(TIMSK, TOIE1);
    12f4:	a9 e5       	ldi	r26, 0x59	; 89
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e9 e5       	ldi	r30, 0x59	; 89
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	84 60       	ori	r24, 0x04	; 4
    1300:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, FOC1A);
    1302:	af e4       	ldi	r26, 0x4F	; 79
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ef e4       	ldi	r30, 0x4F	; 79
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	88 60       	ori	r24, 0x08	; 8
    130e:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, WGM12);
    1310:	ae e4       	ldi	r26, 0x4E	; 78
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ee e4       	ldi	r30, 0x4E	; 78
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	87 7f       	andi	r24, 0xF7	; 247
    131c:	8c 93       	st	X, r24
    131e:	82 c0       	rjmp	.+260    	; 0x1424 <Timer_init+0x262>
        }
        else if(Config_Ptr->timer_mode == Compare_Mode)
    1320:	e9 81       	ldd	r30, Y+1	; 0x01
    1322:	fa 81       	ldd	r31, Y+2	; 0x02
    1324:	86 81       	ldd	r24, Z+6	; 0x06
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	09 f0       	breq	.+2      	; 0x132c <Timer_init+0x16a>
    132a:	7c c0       	rjmp	.+248    	; 0x1424 <Timer_init+0x262>
        {
            OCR1A = Config_Ptr->timer_compare_MatchValue;
    132c:	aa e4       	ldi	r26, 0x4A	; 74
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e9 81       	ldd	r30, Y+1	; 0x01
    1332:	fa 81       	ldd	r31, Y+2	; 0x02
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	93 81       	ldd	r25, Z+3	; 0x03
    1338:	11 96       	adiw	r26, 0x01	; 1
    133a:	9c 93       	st	X, r25
    133c:	8e 93       	st	-X, r24
            SET_BIT(TCCR1B, WGM12);
    133e:	ae e4       	ldi	r26, 0x4E	; 78
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	ee e4       	ldi	r30, 0x4E	; 78
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	88 60       	ori	r24, 0x08	; 8
    134a:	8c 93       	st	X, r24
            SET_BIT(TIMSK, OCIE1A);
    134c:	a9 e5       	ldi	r26, 0x59	; 89
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e9 e5       	ldi	r30, 0x59	; 89
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	80 61       	ori	r24, 0x10	; 16
    1358:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, FOC1A);
    135a:	af e4       	ldi	r26, 0x4F	; 79
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ef e4       	ldi	r30, 0x4F	; 79
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	88 60       	ori	r24, 0x08	; 8
    1366:	8c 93       	st	X, r24
    1368:	5d c0       	rjmp	.+186    	; 0x1424 <Timer_init+0x262>
        }
        break;
    case Timer2:
        TCNT2 = (uint8) Config_Ptr->timer_InitialValue;
    136a:	a4 e4       	ldi	r26, 0x44	; 68
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e9 81       	ldd	r30, Y+1	; 0x01
    1370:	fa 81       	ldd	r31, Y+2	; 0x02
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	8c 93       	st	X, r24
        TCCR2 |= (Config_Ptr->timer_clock & 0x07);
    1378:	a5 e4       	ldi	r26, 0x45	; 69
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e4       	ldi	r30, 0x45	; 69
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	98 2f       	mov	r25, r24
    1384:	e9 81       	ldd	r30, Y+1	; 0x01
    1386:	fa 81       	ldd	r31, Y+2	; 0x02
    1388:	85 81       	ldd	r24, Z+5	; 0x05
    138a:	87 70       	andi	r24, 0x07	; 7
    138c:	89 2b       	or	r24, r25
    138e:	8c 93       	st	X, r24
        if(Config_Ptr->timer_mode == Normal_Mode)
    1390:	e9 81       	ldd	r30, Y+1	; 0x01
    1392:	fa 81       	ldd	r31, Y+2	; 0x02
    1394:	86 81       	ldd	r24, Z+6	; 0x06
    1396:	88 23       	and	r24, r24
    1398:	e9 f4       	brne	.+58     	; 0x13d4 <Timer_init+0x212>
        {
            CLEAR_BIT(TCCR2, FOC2);
    139a:	a5 e4       	ldi	r26, 0x45	; 69
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e4       	ldi	r30, 0x45	; 69
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	8f 77       	andi	r24, 0x7F	; 127
    13a6:	8c 93       	st	X, r24
            SET_BIT(TIMSK, TOIE2);
    13a8:	a9 e5       	ldi	r26, 0x59	; 89
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e9 e5       	ldi	r30, 0x59	; 89
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 64       	ori	r24, 0x40	; 64
    13b4:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR2, WGM20);
    13b6:	a5 e4       	ldi	r26, 0x45	; 69
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e5 e4       	ldi	r30, 0x45	; 69
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	8f 7b       	andi	r24, 0xBF	; 191
    13c2:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR2, WGM21);
    13c4:	a5 e4       	ldi	r26, 0x45	; 69
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e5 e4       	ldi	r30, 0x45	; 69
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	87 7f       	andi	r24, 0xF7	; 247
    13d0:	8c 93       	st	X, r24
    13d2:	28 c0       	rjmp	.+80     	; 0x1424 <Timer_init+0x262>
        }
        else if(Config_Ptr->timer_mode == Compare_Mode)
    13d4:	e9 81       	ldd	r30, Y+1	; 0x01
    13d6:	fa 81       	ldd	r31, Y+2	; 0x02
    13d8:	86 81       	ldd	r24, Z+6	; 0x06
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	19 f5       	brne	.+70     	; 0x1424 <Timer_init+0x262>
        {
            OCR2 = (uint8) Config_Ptr->timer_compare_MatchValue;
    13de:	a3 e4       	ldi	r26, 0x43	; 67
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	93 81       	ldd	r25, Z+3	; 0x03
    13ea:	8c 93       	st	X, r24
            SET_BIT(TCCR2, WGM21);
    13ec:	a5 e4       	ldi	r26, 0x45	; 69
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e4       	ldi	r30, 0x45	; 69
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 60       	ori	r24, 0x08	; 8
    13f8:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR2, WGM20);
    13fa:	a5 e4       	ldi	r26, 0x45	; 69
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e4       	ldi	r30, 0x45	; 69
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8f 7b       	andi	r24, 0xBF	; 191
    1406:	8c 93       	st	X, r24
            SET_BIT(TCCR2, FOC2);
    1408:	a5 e4       	ldi	r26, 0x45	; 69
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e4       	ldi	r30, 0x45	; 69
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 68       	ori	r24, 0x80	; 128
    1414:	8c 93       	st	X, r24
            SET_BIT(TIMSK, OCIE2);
    1416:	a9 e5       	ldi	r26, 0x59	; 89
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e9 e5       	ldi	r30, 0x59	; 89
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	80 68       	ori	r24, 0x80	; 128
    1422:	8c 93       	st	X, r24
        }
        break;
    }
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <Timer_deInit>:
/******************************************************************************
 *                        DISABLE THE TIMERS
 ******************************************************************************/
void Timer_deInit(Timer_ID_Type timer_type)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <Timer_deInit+0x6>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	89 83       	std	Y+1, r24	; 0x01
    switch(timer_type)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3b 83       	std	Y+3, r19	; 0x03
    1448:	2a 83       	std	Y+2, r18	; 0x02
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	11 f1       	breq	.+68     	; 0x1498 <Timer_deInit+0x66>
    1454:	2a 81       	ldd	r18, Y+2	; 0x02
    1456:	3b 81       	ldd	r19, Y+3	; 0x03
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	d1 f1       	breq	.+116    	; 0x14d2 <Timer_deInit+0xa0>
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	9b 81       	ldd	r25, Y+3	; 0x03
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	09 f0       	breq	.+2      	; 0x1468 <Timer_deInit+0x36>
    1466:	4c c0       	rjmp	.+152    	; 0x1500 <Timer_deInit+0xce>
    {
    case Timer0:
        TCCR0 = 0;
    1468:	e3 e5       	ldi	r30, 0x53	; 83
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	10 82       	st	Z, r1
        TCNT0 = 0;
    146e:	e2 e5       	ldi	r30, 0x52	; 82
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	10 82       	st	Z, r1
        OCR0 = 0;
    1474:	ec e5       	ldi	r30, 0x5C	; 92
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	10 82       	st	Z, r1
        CLEAR_BIT(TIMSK, OCIE0);
    147a:	a9 e5       	ldi	r26, 0x59	; 89
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e9 e5       	ldi	r30, 0x59	; 89
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8d 7f       	andi	r24, 0xFD	; 253
    1486:	8c 93       	st	X, r24
        CLEAR_BIT(TIMSK, TOIE0);
    1488:	a9 e5       	ldi	r26, 0x59	; 89
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e9 e5       	ldi	r30, 0x59	; 89
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8e 7f       	andi	r24, 0xFE	; 254
    1494:	8c 93       	st	X, r24
    1496:	34 c0       	rjmp	.+104    	; 0x1500 <Timer_deInit+0xce>
        break;
    case Timer1:
        TCNT1 = 0;
    1498:	ec e4       	ldi	r30, 0x4C	; 76
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	11 82       	std	Z+1, r1	; 0x01
    149e:	10 82       	st	Z, r1
        TCCR1A = 0;
    14a0:	ef e4       	ldi	r30, 0x4F	; 79
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	10 82       	st	Z, r1
        TCCR1B = 0;
    14a6:	ee e4       	ldi	r30, 0x4E	; 78
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	10 82       	st	Z, r1
        OCR1A = 0;
    14ac:	ea e4       	ldi	r30, 0x4A	; 74
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	11 82       	std	Z+1, r1	; 0x01
    14b2:	10 82       	st	Z, r1
        CLEAR_BIT(TIMSK, OCIE1A);
    14b4:	a9 e5       	ldi	r26, 0x59	; 89
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e9 e5       	ldi	r30, 0x59	; 89
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8f 7e       	andi	r24, 0xEF	; 239
    14c0:	8c 93       	st	X, r24
        CLEAR_BIT(TIMSK, TOIE1);
    14c2:	a9 e5       	ldi	r26, 0x59	; 89
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e9 e5       	ldi	r30, 0x59	; 89
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8b 7f       	andi	r24, 0xFB	; 251
    14ce:	8c 93       	st	X, r24
    14d0:	17 c0       	rjmp	.+46     	; 0x1500 <Timer_deInit+0xce>
        break;
    case Timer2:
        TCCR2 = 0;
    14d2:	e5 e4       	ldi	r30, 0x45	; 69
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	10 82       	st	Z, r1
        TCNT2 = 0;
    14d8:	e4 e4       	ldi	r30, 0x44	; 68
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	10 82       	st	Z, r1
        OCR2 = 0;
    14de:	e3 e4       	ldi	r30, 0x43	; 67
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	10 82       	st	Z, r1
        CLEAR_BIT(TIMSK, OCIE2);
    14e4:	a9 e5       	ldi	r26, 0x59	; 89
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e9 e5       	ldi	r30, 0x59	; 89
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 77       	andi	r24, 0x7F	; 127
    14f0:	8c 93       	st	X, r24
        CLEAR_BIT(TIMSK, TOIE2);
    14f2:	a9 e5       	ldi	r26, 0x59	; 89
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e9 e5       	ldi	r30, 0x59	; 89
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 7b       	andi	r24, 0xBF	; 191
    14fe:	8c 93       	st	X, r24
        break;
    }
    if(timer_type == Timer0 || timer_type == Timer1 || timer_type == Timer2)
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	88 23       	and	r24, r24
    1504:	31 f0       	breq	.+12     	; 0x1512 <Timer_deInit+0xe0>
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	19 f0       	breq	.+6      	; 0x1512 <Timer_deInit+0xe0>
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	51 f4       	brne	.+20     	; 0x1526 <Timer_deInit+0xf4>
    {
        g_callBackPtr[timer_type] = NULL_PTR;
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	fc 01       	movw	r30, r24
    151e:	e4 57       	subi	r30, 0x74	; 116
    1520:	fe 4f       	sbci	r31, 0xFE	; 254
    1522:	11 82       	std	Z+1, r1	; 0x01
    1524:	10 82       	st	Z, r1
    }
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <Timer_setCallBack>:
/******************************************************************************
 *                         CALL BACK FUNCTION
 ******************************************************************************/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	00 d0       	rcall	.+0      	; 0x1538 <Timer_setCallBack+0x6>
    1538:	0f 92       	push	r0
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	9a 83       	std	Y+2, r25	; 0x02
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	6b 83       	std	Y+3, r22	; 0x03
    if(a_timer_ID == Timer0 || a_timer_ID == Timer1 || a_timer_ID == Timer2)
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	88 23       	and	r24, r24
    1548:	31 f0       	breq	.+12     	; 0x1556 <Timer_setCallBack+0x24>
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	19 f0       	breq	.+6      	; 0x1556 <Timer_setCallBack+0x24>
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	61 f4       	brne	.+24     	; 0x156e <Timer_setCallBack+0x3c>
    {
        g_callBackPtr[a_timer_ID] = a_ptr;
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	29 81       	ldd	r18, Y+1	; 0x01
    155e:	3a 81       	ldd	r19, Y+2	; 0x02
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	fc 01       	movw	r30, r24
    1566:	e4 57       	subi	r30, 0x74	; 116
    1568:	fe 4f       	sbci	r31, 0xFE	; 254
    156a:	31 83       	std	Z+1, r19	; 0x01
    156c:	20 83       	st	Z, r18
    }
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <__vector_11>:
/******************************************************************************
 *                               ISR
 ******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    157a:	1f 92       	push	r1
    157c:	0f 92       	push	r0
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	0f 92       	push	r0
    1582:	11 24       	eor	r1, r1
    1584:	2f 93       	push	r18
    1586:	3f 93       	push	r19
    1588:	4f 93       	push	r20
    158a:	5f 93       	push	r21
    158c:	6f 93       	push	r22
    158e:	7f 93       	push	r23
    1590:	8f 93       	push	r24
    1592:	9f 93       	push	r25
    1594:	af 93       	push	r26
    1596:	bf 93       	push	r27
    1598:	ef 93       	push	r30
    159a:	ff 93       	push	r31
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    if(g_callBackPtr[Timer0] != NULL_PTR)
    15a4:	80 91 8c 01 	lds	r24, 0x018C
    15a8:	90 91 8d 01 	lds	r25, 0x018D
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	29 f0       	breq	.+10     	; 0x15ba <__vector_11+0x40>
    {
        (*g_callBackPtr[Timer0])();
    15b0:	e0 91 8c 01 	lds	r30, 0x018C
    15b4:	f0 91 8d 01 	lds	r31, 0x018D
    15b8:	09 95       	icall
    }
}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	ff 91       	pop	r31
    15c0:	ef 91       	pop	r30
    15c2:	bf 91       	pop	r27
    15c4:	af 91       	pop	r26
    15c6:	9f 91       	pop	r25
    15c8:	8f 91       	pop	r24
    15ca:	7f 91       	pop	r23
    15cc:	6f 91       	pop	r22
    15ce:	5f 91       	pop	r21
    15d0:	4f 91       	pop	r20
    15d2:	3f 91       	pop	r19
    15d4:	2f 91       	pop	r18
    15d6:	0f 90       	pop	r0
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	0f 90       	pop	r0
    15dc:	1f 90       	pop	r1
    15de:	18 95       	reti

000015e0 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    15e0:	1f 92       	push	r1
    15e2:	0f 92       	push	r0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	0f 92       	push	r0
    15e8:	11 24       	eor	r1, r1
    15ea:	2f 93       	push	r18
    15ec:	3f 93       	push	r19
    15ee:	4f 93       	push	r20
    15f0:	5f 93       	push	r21
    15f2:	6f 93       	push	r22
    15f4:	7f 93       	push	r23
    15f6:	8f 93       	push	r24
    15f8:	9f 93       	push	r25
    15fa:	af 93       	push	r26
    15fc:	bf 93       	push	r27
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    if(g_callBackPtr[Timer0] != NULL_PTR)
    160a:	80 91 8c 01 	lds	r24, 0x018C
    160e:	90 91 8d 01 	lds	r25, 0x018D
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	29 f0       	breq	.+10     	; 0x1620 <__vector_10+0x40>
    {
        (*g_callBackPtr[Timer0])();
    1616:	e0 91 8c 01 	lds	r30, 0x018C
    161a:	f0 91 8d 01 	lds	r31, 0x018D
    161e:	09 95       	icall
    }
}
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1646:	1f 92       	push	r1
    1648:	0f 92       	push	r0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	ef 93       	push	r30
    1666:	ff 93       	push	r31
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    if(g_callBackPtr[Timer1] != NULL_PTR)
    1670:	80 91 8e 01 	lds	r24, 0x018E
    1674:	90 91 8f 01 	lds	r25, 0x018F
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	29 f0       	breq	.+10     	; 0x1686 <__vector_9+0x40>
    {
        (*g_callBackPtr[Timer1])();
    167c:	e0 91 8e 01 	lds	r30, 0x018E
    1680:	f0 91 8f 01 	lds	r31, 0x018F
    1684:	09 95       	icall
    }
}
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	bf 91       	pop	r27
    1690:	af 91       	pop	r26
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	7f 91       	pop	r23
    1698:	6f 91       	pop	r22
    169a:	5f 91       	pop	r21
    169c:	4f 91       	pop	r20
    169e:	3f 91       	pop	r19
    16a0:	2f 91       	pop	r18
    16a2:	0f 90       	pop	r0
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	0f 90       	pop	r0
    16a8:	1f 90       	pop	r1
    16aa:	18 95       	reti

000016ac <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    16ac:	1f 92       	push	r1
    16ae:	0f 92       	push	r0
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	0f 92       	push	r0
    16b4:	11 24       	eor	r1, r1
    16b6:	2f 93       	push	r18
    16b8:	3f 93       	push	r19
    16ba:	4f 93       	push	r20
    16bc:	5f 93       	push	r21
    16be:	6f 93       	push	r22
    16c0:	7f 93       	push	r23
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	af 93       	push	r26
    16c8:	bf 93       	push	r27
    16ca:	ef 93       	push	r30
    16cc:	ff 93       	push	r31
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    if(g_callBackPtr[Timer1] != NULL_PTR)
    16d6:	80 91 8e 01 	lds	r24, 0x018E
    16da:	90 91 8f 01 	lds	r25, 0x018F
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	29 f0       	breq	.+10     	; 0x16ec <__vector_7+0x40>
    {
        (*g_callBackPtr[Timer1])();
    16e2:	e0 91 8e 01 	lds	r30, 0x018E
    16e6:	f0 91 8f 01 	lds	r31, 0x018F
    16ea:	09 95       	icall
    }
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	4f 93       	push	r20
    1722:	5f 93       	push	r21
    1724:	6f 93       	push	r22
    1726:	7f 93       	push	r23
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    if(g_callBackPtr[Timer2] != NULL_PTR)
    173c:	80 91 90 01 	lds	r24, 0x0190
    1740:	90 91 91 01 	lds	r25, 0x0191
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	29 f0       	breq	.+10     	; 0x1752 <__vector_5+0x40>
    {
        (*g_callBackPtr[Timer2])();
    1748:	e0 91 90 01 	lds	r30, 0x0190
    174c:	f0 91 91 01 	lds	r31, 0x0191
    1750:	09 95       	icall
    }
}
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	ff 91       	pop	r31
    1758:	ef 91       	pop	r30
    175a:	bf 91       	pop	r27
    175c:	af 91       	pop	r26
    175e:	9f 91       	pop	r25
    1760:	8f 91       	pop	r24
    1762:	7f 91       	pop	r23
    1764:	6f 91       	pop	r22
    1766:	5f 91       	pop	r21
    1768:	4f 91       	pop	r20
    176a:	3f 91       	pop	r19
    176c:	2f 91       	pop	r18
    176e:	0f 90       	pop	r0
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	0f 90       	pop	r0
    1774:	1f 90       	pop	r1
    1776:	18 95       	reti

00001778 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1778:	1f 92       	push	r1
    177a:	0f 92       	push	r0
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	0f 92       	push	r0
    1780:	11 24       	eor	r1, r1
    1782:	2f 93       	push	r18
    1784:	3f 93       	push	r19
    1786:	4f 93       	push	r20
    1788:	5f 93       	push	r21
    178a:	6f 93       	push	r22
    178c:	7f 93       	push	r23
    178e:	8f 93       	push	r24
    1790:	9f 93       	push	r25
    1792:	af 93       	push	r26
    1794:	bf 93       	push	r27
    1796:	ef 93       	push	r30
    1798:	ff 93       	push	r31
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    if(g_callBackPtr[Timer2] != NULL_PTR)
    17a2:	80 91 90 01 	lds	r24, 0x0190
    17a6:	90 91 91 01 	lds	r25, 0x0191
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	29 f0       	breq	.+10     	; 0x17b8 <__vector_4+0x40>
    {
        (*g_callBackPtr[Timer2])();
    17ae:	e0 91 90 01 	lds	r30, 0x0190
    17b2:	f0 91 91 01 	lds	r31, 0x0191
    17b6:	09 95       	icall
    }
}
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	ff 91       	pop	r31
    17be:	ef 91       	pop	r30
    17c0:	bf 91       	pop	r27
    17c2:	af 91       	pop	r26
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	7f 91       	pop	r23
    17ca:	6f 91       	pop	r22
    17cc:	5f 91       	pop	r21
    17ce:	4f 91       	pop	r20
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <UART_init+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <UART_init+0x8>
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <UART_init+0xa>
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    17f0:	1a 82       	std	Y+2, r1	; 0x02
    17f2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    17f4:	eb e2       	ldi	r30, 0x2B	; 43
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	82 e0       	ldi	r24, 0x02	; 2
    17fa:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    17fc:	ea e2       	ldi	r30, 0x2A	; 42
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	88 e1       	ldi	r24, 0x18	; 24
    1802:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	SET_BIT(UCSRC,URSEL);//The URSEL must be one when writing the UCSRC.
    1804:	a0 e4       	ldi	r26, 0x40	; 64
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e0 e4       	ldi	r30, 0x40	; 64
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	80 68       	ori	r24, 0x80	; 128
    1810:	8c 93       	st	X, r24
	//to set the parity
	if(Config_Ptr->parity==even)
    1812:	eb 81       	ldd	r30, Y+3	; 0x03
    1814:	fc 81       	ldd	r31, Y+4	; 0x04
    1816:	81 81       	ldd	r24, Z+1	; 0x01
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	41 f4       	brne	.+16     	; 0x182c <UART_init+0x4e>
	{
		SET_BIT(UCSRC,UPM1);
    181c:	a0 e4       	ldi	r26, 0x40	; 64
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e0 e4       	ldi	r30, 0x40	; 64
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	80 62       	ori	r24, 0x20	; 32
    1828:	8c 93       	st	X, r24
    182a:	13 c0       	rjmp	.+38     	; 0x1852 <UART_init+0x74>
	}
	else if(Config_Ptr->parity==odd)
    182c:	eb 81       	ldd	r30, Y+3	; 0x03
    182e:	fc 81       	ldd	r31, Y+4	; 0x04
    1830:	81 81       	ldd	r24, Z+1	; 0x01
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	71 f4       	brne	.+28     	; 0x1852 <UART_init+0x74>
		{
			SET_BIT(UCSRC,UPM1);
    1836:	a0 e4       	ldi	r26, 0x40	; 64
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e0 e4       	ldi	r30, 0x40	; 64
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	80 62       	ori	r24, 0x20	; 32
    1842:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UPM0);
    1844:	a0 e4       	ldi	r26, 0x40	; 64
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e0 e4       	ldi	r30, 0x40	; 64
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	80 61       	ori	r24, 0x10	; 16
    1850:	8c 93       	st	X, r24
		}
	//stop bit select
	if(Config_Ptr->stop_bit==TWO_STOP_BITS)
    1852:	eb 81       	ldd	r30, Y+3	; 0x03
    1854:	fc 81       	ldd	r31, Y+4	; 0x04
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	39 f4       	brne	.+14     	; 0x186a <UART_init+0x8c>
	{
		SET_BIT(UCSRC,USBS);
    185c:	a0 e4       	ldi	r26, 0x40	; 64
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e0 e4       	ldi	r30, 0x40	; 64
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	88 60       	ori	r24, 0x08	; 8
    1868:	8c 93       	st	X, r24
	}
	//BIT DATA MODE
	switch(Config_Ptr->bit_data)
    186a:	eb 81       	ldd	r30, Y+3	; 0x03
    186c:	fc 81       	ldd	r31, Y+4	; 0x04
    186e:	80 81       	ld	r24, Z
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	3e 83       	std	Y+6, r19	; 0x06
    1876:	2d 83       	std	Y+5, r18	; 0x05
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	91 05       	cpc	r25, r1
    1880:	81 f0       	breq	.+32     	; 0x18a2 <UART_init+0xc4>
    1882:	2d 81       	ldd	r18, Y+5	; 0x05
    1884:	3e 81       	ldd	r19, Y+6	; 0x06
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	4c f1       	brlt	.+82     	; 0x18de <UART_init+0x100>
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	82 30       	cpi	r24, 0x02	; 2
    1892:	91 05       	cpc	r25, r1
    1894:	71 f0       	breq	.+28     	; 0x18b2 <UART_init+0xd4>
    1896:	2d 81       	ldd	r18, Y+5	; 0x05
    1898:	3e 81       	ldd	r19, Y+6	; 0x06
    189a:	23 30       	cpi	r18, 0x03	; 3
    189c:	31 05       	cpc	r19, r1
    189e:	89 f0       	breq	.+34     	; 0x18c2 <UART_init+0xe4>
    18a0:	1e c0       	rjmp	.+60     	; 0x18de <UART_init+0x100>
	{
	case UART_5BIT:
		break;
	case UART_6BIT:
		SET_BIT(UCSRC,UCSZ0);
    18a2:	a0 e4       	ldi	r26, 0x40	; 64
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e0 e4       	ldi	r30, 0x40	; 64
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	82 60       	ori	r24, 0x02	; 2
    18ae:	8c 93       	st	X, r24
    18b0:	16 c0       	rjmp	.+44     	; 0x18de <UART_init+0x100>
			break;
	case UART_7BIT:
			SET_BIT(UCSRC,UCSZ1);
    18b2:	a0 e4       	ldi	r26, 0x40	; 64
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e0 e4       	ldi	r30, 0x40	; 64
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	84 60       	ori	r24, 0x04	; 4
    18be:	8c 93       	st	X, r24
    18c0:	0e c0       	rjmp	.+28     	; 0x18de <UART_init+0x100>
				break;
	case UART_8BIT:
			SET_BIT(UCSRC,UCSZ0);
    18c2:	a0 e4       	ldi	r26, 0x40	; 64
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e0 e4       	ldi	r30, 0x40	; 64
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	82 60       	ori	r24, 0x02	; 2
    18ce:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    18d0:	a0 e4       	ldi	r26, 0x40	; 64
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e0 e4       	ldi	r30, 0x40	; 64
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	84 60       	ori	r24, 0x04	; 4
    18dc:	8c 93       	st	X, r24
				break;
	}
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    18de:	eb 81       	ldd	r30, Y+3	; 0x03
    18e0:	fc 81       	ldd	r31, Y+4	; 0x04
    18e2:	83 81       	ldd	r24, Z+3	; 0x03
    18e4:	94 81       	ldd	r25, Z+4	; 0x04
    18e6:	a5 81       	ldd	r26, Z+5	; 0x05
    18e8:	b6 81       	ldd	r27, Z+6	; 0x06
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	aa 1f       	adc	r26, r26
    18f0:	bb 1f       	adc	r27, r27
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	aa 1f       	adc	r26, r26
    18f8:	bb 1f       	adc	r27, r27
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	aa 1f       	adc	r26, r26
    1900:	bb 1f       	adc	r27, r27
    1902:	9c 01       	movw	r18, r24
    1904:	ad 01       	movw	r20, r26
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	92 e1       	ldi	r25, 0x12	; 18
    190a:	aa e7       	ldi	r26, 0x7A	; 122
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__udivmodsi4>
    1916:	da 01       	movw	r26, r20
    1918:	c9 01       	movw	r24, r18
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	9a 83       	std	Y+2, r25	; 0x02
    191e:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value>>8;
    1920:	e0 e4       	ldi	r30, 0x40	; 64
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	89 2f       	mov	r24, r25
    192a:	99 27       	eor	r25, r25
    192c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    192e:	e9 e2       	ldi	r30, 0x29	; 41
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	80 83       	st	Z, r24
	
}
    1936:	26 96       	adiw	r28, 0x06	; 6
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1954:	eb e2       	ldi	r30, 0x2B	; 43
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	88 2f       	mov	r24, r24
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	80 72       	andi	r24, 0x20	; 32
    1960:	90 70       	andi	r25, 0x00	; 0
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	b9 f3       	breq	.-18     	; 0x1954 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1966:	ec e2       	ldi	r30, 0x2C	; 44
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    196e:	0f 90       	pop	r0
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    197e:	eb e2       	ldi	r30, 0x2B	; 43
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	88 23       	and	r24, r24
    1986:	dc f7       	brge	.-10     	; 0x197e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1988:	ec e2       	ldi	r30, 0x2C	; 44
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
}
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	00 d0       	rcall	.+0      	; 0x199a <UART_sendString+0x6>
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	9b 83       	std	Y+3, r25	; 0x03
    19a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    19a4:	19 82       	std	Y+1, r1	; 0x01
    19a6:	0e c0       	rjmp	.+28     	; 0x19c4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	9b 81       	ldd	r25, Y+3	; 0x03
    19b2:	fc 01       	movw	r30, r24
    19b4:	e2 0f       	add	r30, r18
    19b6:	f3 1f       	adc	r31, r19
    19b8:	80 81       	ld	r24, Z
    19ba:	0e 94 a4 0c 	call	0x1948	; 0x1948 <UART_sendByte>
		i++;
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	8f 5f       	subi	r24, 0xFF	; 255
    19c2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	fc 01       	movw	r30, r24
    19d0:	e2 0f       	add	r30, r18
    19d2:	f3 1f       	adc	r31, r19
    19d4:	80 81       	ld	r24, Z
    19d6:	88 23       	and	r24, r24
    19d8:	39 f7       	brne	.-50     	; 0x19a8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <UART_receiveString+0xa>
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	9b 83       	std	Y+3, r25	; 0x03
    19f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    19fa:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	9b 81       	ldd	r25, Y+3	; 0x03
    1a06:	8c 01       	movw	r16, r24
    1a08:	02 0f       	add	r16, r18
    1a0a:	13 1f       	adc	r17, r19
    1a0c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    1a10:	f8 01       	movw	r30, r16
    1a12:	80 83       	st	Z, r24
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	8f 5f       	subi	r24, 0xFF	; 255
    1a1a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	9b 81       	ldd	r25, Y+3	; 0x03
    1a26:	8c 01       	movw	r16, r24
    1a28:	02 0f       	add	r16, r18
    1a2a:	13 1f       	adc	r17, r19
    1a2c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    1a30:	f8 01       	movw	r30, r16
    1a32:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3e:	fc 01       	movw	r30, r24
    1a40:	e2 0f       	add	r30, r18
    1a42:	f3 1f       	adc	r31, r19
    1a44:	80 81       	ld	r24, Z
    1a46:	83 32       	cpi	r24, 0x23	; 35
    1a48:	31 f7       	brne	.-52     	; 0x1a16 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	9b 81       	ldd	r25, Y+3	; 0x03
    1a54:	fc 01       	movw	r30, r24
    1a56:	e2 0f       	add	r30, r18
    1a58:	f3 1f       	adc	r31, r19
    1a5a:	10 82       	st	Z, r1
}
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	60 97       	sbiw	r28, 0x10	; 16
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	64 e0       	ldi	r22, 0x04	; 4
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	65 e0       	ldi	r22, 0x05	; 5
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	66 e0       	ldi	r22, 0x06	; 6
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	67 e0       	ldi	r22, 0x07	; 7
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	62 e0       	ldi	r22, 0x02	; 2
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1ab2:	83 e0       	ldi	r24, 0x03	; 3
    1ab4:	63 e0       	ldi	r22, 0x03	; 3
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	65 e0       	ldi	r22, 0x05	; 5
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1ad0:	1f 86       	std	Y+15, r1	; 0x0f
    1ad2:	b4 c0       	rjmp	.+360    	; 0x1c3c <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad6:	98 2f       	mov	r25, r24
    1ad8:	9c 5f       	subi	r25, 0xFC	; 252
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	69 2f       	mov	r22, r25
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1ae4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae6:	98 2f       	mov	r25, r24
    1ae8:	9c 5f       	subi	r25, 0xFC	; 252
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	69 2f       	mov	r22, r25
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1af4:	18 8a       	std	Y+16, r1	; 0x10
    1af6:	22 c0       	rjmp	.+68     	; 0x1b3c <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1af8:	88 89       	ldd	r24, Y+16	; 0x10
    1afa:	98 2f       	mov	r25, r24
    1afc:	9e 5f       	subi	r25, 0xFE	; 254
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	69 2f       	mov	r22, r25
    1b02:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1b06:	88 23       	and	r24, r24
    1b08:	b1 f4       	brne	.+44     	; 0x1b36 <KEYPAD_getPressedKey+0xca>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	98 2f       	mov	r25, r24
    1b1a:	88 89       	ldd	r24, Y+16	; 0x10
    1b1c:	89 0f       	add	r24, r25
    1b1e:	8f 5f       	subi	r24, 0xFF	; 255
    1b20:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1b24:	60 96       	adiw	r28, 0x10	; 16
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1b36:	88 89       	ldd	r24, Y+16	; 0x10
    1b38:	8f 5f       	subi	r24, 0xFF	; 255
    1b3a:	88 8b       	std	Y+16, r24	; 0x10
    1b3c:	88 89       	ldd	r24, Y+16	; 0x10
    1b3e:	84 30       	cpi	r24, 0x04	; 4
    1b40:	d8 f2       	brcs	.-74     	; 0x1af8 <KEYPAD_getPressedKey+0x8c>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b44:	98 2f       	mov	r25, r24
    1b46:	9c 5f       	subi	r25, 0xFC	; 252
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	69 2f       	mov	r22, r25
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e2       	ldi	r26, 0x20	; 32
    1b58:	b1 e4       	ldi	r27, 0x41	; 65
    1b5a:	8b 87       	std	Y+11, r24	; 0x0b
    1b5c:	9c 87       	std	Y+12, r25	; 0x0c
    1b5e:	ad 87       	std	Y+13, r26	; 0x0d
    1b60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a ef       	ldi	r20, 0xFA	; 250
    1b70:	54 e4       	ldi	r21, 0x44	; 68
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8f 83       	std	Y+7, r24	; 0x07
    1b7c:	98 87       	std	Y+8, r25	; 0x08
    1b7e:	a9 87       	std	Y+9, r26	; 0x09
    1b80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <KEYPAD_getPressedKey+0x198>
    1be6:	88 ec       	ldi	r24, 0xC8	; 200
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <KEYPAD_getPressedKey+0x186>
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <KEYPAD_getPressedKey+0x17a>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <KEYPAD_getPressedKey+0x1c2>
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c38:	8f 5f       	subi	r24, 0xFF	; 255
    1c3a:	8f 87       	std	Y+15, r24	; 0x0f
    1c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3e:	84 30       	cpi	r24, 0x04	; 4
    1c40:	08 f4       	brcc	.+2      	; 0x1c44 <KEYPAD_getPressedKey+0x1d8>
    1c42:	48 cf       	rjmp	.-368    	; 0x1ad4 <KEYPAD_getPressedKey+0x68>
    1c44:	45 cf       	rjmp	.-374    	; 0x1ad0 <KEYPAD_getPressedKey+0x64>

00001c46 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c54:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	3c 83       	std	Y+4, r19	; 0x04
    1c5e:	2b 83       	std	Y+3, r18	; 0x03
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	88 30       	cpi	r24, 0x08	; 8
    1c66:	91 05       	cpc	r25, r1
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c6a:	70 c0       	rjmp	.+224    	; 0x1d4c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c70:	29 30       	cpi	r18, 0x09	; 9
    1c72:	31 05       	cpc	r19, r1
    1c74:	5c f5       	brge	.+86     	; 0x1ccc <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	84 30       	cpi	r24, 0x04	; 4
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c80:	59 c0       	rjmp	.+178    	; 0x1d34 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	3c 81       	ldd	r19, Y+4	; 0x04
    1c86:	25 30       	cpi	r18, 0x05	; 5
    1c88:	31 05       	cpc	r19, r1
    1c8a:	9c f4       	brge	.+38     	; 0x1cb2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	82 30       	cpi	r24, 0x02	; 2
    1c92:	91 05       	cpc	r25, r1
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c96:	48 c0       	rjmp	.+144    	; 0x1d28 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	23 30       	cpi	r18, 0x03	; 3
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	0c f0       	brlt	.+2      	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1ca2:	45 c0       	rjmp	.+138    	; 0x1d2e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	91 05       	cpc	r25, r1
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1cae:	39 c0       	rjmp	.+114    	; 0x1d22 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1cb0:	67 c0       	rjmp	.+206    	; 0x1d80 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb6:	26 30       	cpi	r18, 0x06	; 6
    1cb8:	31 05       	cpc	r19, r1
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <KEYPAD_4x4_adjustKeyNumber+0x78>
    1cbc:	41 c0       	rjmp	.+130    	; 0x1d40 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	87 30       	cpi	r24, 0x07	; 7
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	0c f0       	brlt	.+2      	; 0x1cca <KEYPAD_4x4_adjustKeyNumber+0x84>
    1cc8:	3e c0       	rjmp	.+124    	; 0x1d46 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1cca:	37 c0       	rjmp	.+110    	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cce:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd0:	2c 30       	cpi	r18, 0x0C	; 12
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1cd6:	46 c0       	rjmp	.+140    	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	8d 30       	cpi	r24, 0x0D	; 13
    1cde:	91 05       	cpc	r25, r1
    1ce0:	5c f4       	brge	.+22     	; 0x1cf8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce6:	2a 30       	cpi	r18, 0x0A	; 10
    1ce8:	31 05       	cpc	r19, r1
    1cea:	b1 f1       	breq	.+108    	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	8b 30       	cpi	r24, 0x0B	; 11
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	a4 f5       	brge	.+104    	; 0x1d5e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1cf6:	2d c0       	rjmp	.+90     	; 0x1d52 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfc:	2e 30       	cpi	r18, 0x0E	; 14
    1cfe:	31 05       	cpc	r19, r1
    1d00:	b9 f1       	breq	.+110    	; 0x1d70 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	8e 30       	cpi	r24, 0x0E	; 14
    1d08:	91 05       	cpc	r25, r1
    1d0a:	7c f1       	brlt	.+94     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d10:	2f 30       	cpi	r18, 0x0F	; 15
    1d12:	31 05       	cpc	r19, r1
    1d14:	79 f1       	breq	.+94     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	80 31       	cpi	r24, 0x10	; 16
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	69 f1       	breq	.+90     	; 0x1d7a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1d20:	2f c0       	rjmp	.+94     	; 0x1d80 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1d22:	87 e0       	ldi	r24, 0x07	; 7
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	2e c0       	rjmp	.+92     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1d28:	88 e0       	ldi	r24, 0x08	; 8
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	2b c0       	rjmp	.+86     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1d2e:	89 e0       	ldi	r24, 0x09	; 9
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	28 c0       	rjmp	.+80     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1d34:	85 e2       	ldi	r24, 0x25	; 37
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	25 c0       	rjmp	.+74     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1d3a:	84 e0       	ldi	r24, 0x04	; 4
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	22 c0       	rjmp	.+68     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1d40:	85 e0       	ldi	r24, 0x05	; 5
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	1f c0       	rjmp	.+62     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1d46:	86 e0       	ldi	r24, 0x06	; 6
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	1c c0       	rjmp	.+56     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d4c:	8a e2       	ldi	r24, 0x2A	; 42
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	19 c0       	rjmp	.+50     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	16 c0       	rjmp	.+44     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	13 c0       	rjmp	.+38     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	10 c0       	rjmp	.+32     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d64:	8d e2       	ldi	r24, 0x2D	; 45
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	0d c0       	rjmp	.+26     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1d6a:	8d e0       	ldi	r24, 0x0D	; 13
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	0a c0       	rjmp	.+20     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1d70:	19 82       	std	Y+1, r1	; 0x01
    1d72:	08 c0       	rjmp	.+16     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d74:	8d e3       	ldi	r24, 0x3D	; 61
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d7a:	8b e2       	ldi	r24, 0x2B	; 43
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	2e 97       	sbiw	r28, 0x0e	; 14
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1db2:	82 e0       	ldi	r24, 0x02	; 2
    1db4:	61 e0       	ldi	r22, 0x01	; 1
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 ea       	ldi	r26, 0xA0	; 160
    1dc2:	b1 e4       	ldi	r27, 0x41	; 65
    1dc4:	8b 87       	std	Y+11, r24	; 0x0b
    1dc6:	9c 87       	std	Y+12, r25	; 0x0c
    1dc8:	ad 87       	std	Y+13, r26	; 0x0d
    1dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4a ef       	ldi	r20, 0xFA	; 250
    1dda:	54 e4       	ldi	r21, 0x44	; 68
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	8f 83       	std	Y+7, r24	; 0x07
    1de6:	98 87       	std	Y+8, r25	; 0x08
    1de8:	a9 87       	std	Y+9, r26	; 0x09
    1dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <LCD_init+0x7a>
		__ticks = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	3f c0       	rjmp	.+126    	; 0x1e8c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	4c f5       	brge	.+82     	; 0x1e78 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e2       	ldi	r20, 0x20	; 32
    1e34:	51 e4       	ldi	r21, 0x41	; 65
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <LCD_init+0xda>
    1e50:	88 ec       	ldi	r24, 0xC8	; 200
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_init+0xc8>
    1e60:	9c 83       	std	Y+4, r25	; 0x04
    1e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	9e 81       	ldd	r25, Y+6	; 0x06
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	69 f7       	brne	.-38     	; 0x1e50 <LCD_init+0xbc>
    1e76:	14 c0       	rjmp	.+40     	; 0x1ea0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_init+0x104>
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	6f ef       	ldi	r22, 0xFF	; 255
    1ea4:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1ea8:	88 e3       	ldi	r24, 0x38	; 56
    1eaa:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1eae:	8c e0       	ldi	r24, 0x0C	; 12
    1eb0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_sendCommand>
}
    1eba:	2e 96       	adiw	r28, 0x0e	; 14
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	e9 97       	sbiw	r28, 0x39	; 57
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e8       	ldi	r26, 0x80	; 128
    1ef2:	bf e3       	ldi	r27, 0x3F	; 63
    1ef4:	8d ab       	std	Y+53, r24	; 0x35
    1ef6:	9e ab       	std	Y+54, r25	; 0x36
    1ef8:	af ab       	std	Y+55, r26	; 0x37
    1efa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	6d a9       	ldd	r22, Y+53	; 0x35
    1efe:	7e a9       	ldd	r23, Y+54	; 0x36
    1f00:	8f a9       	ldd	r24, Y+55	; 0x37
    1f02:	98 ad       	ldd	r25, Y+56	; 0x38
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a ef       	ldi	r20, 0xFA	; 250
    1f0a:	54 e4       	ldi	r21, 0x44	; 68
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	89 ab       	std	Y+49, r24	; 0x31
    1f16:	9a ab       	std	Y+50, r25	; 0x32
    1f18:	ab ab       	std	Y+51, r26	; 0x33
    1f1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f20:	8b a9       	ldd	r24, Y+51	; 0x33
    1f22:	9c a9       	ldd	r25, Y+52	; 0x34
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <LCD_sendCommand+0x72>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	98 ab       	std	Y+48, r25	; 0x30
    1f3a:	8f a7       	std	Y+47, r24	; 0x2f
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1f3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f40:	7a a9       	ldd	r23, Y+50	; 0x32
    1f42:	8b a9       	ldd	r24, Y+51	; 0x33
    1f44:	9c a9       	ldd	r25, Y+52	; 0x34
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	6d a9       	ldd	r22, Y+53	; 0x35
    1f58:	7e a9       	ldd	r23, Y+54	; 0x36
    1f5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	98 ab       	std	Y+48, r25	; 0x30
    1f7c:	8f a7       	std	Y+47, r24	; 0x2f
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <LCD_sendCommand+0xd2>
    1f80:	88 ec       	ldi	r24, 0xC8	; 200
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9e a7       	std	Y+46, r25	; 0x2e
    1f86:	8d a7       	std	Y+45, r24	; 0x2d
    1f88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_sendCommand+0xc0>
    1f90:	9e a7       	std	Y+46, r25	; 0x2e
    1f92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f96:	98 a9       	ldd	r25, Y+48	; 0x30
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	98 ab       	std	Y+48, r25	; 0x30
    1f9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <LCD_sendCommand+0xb4>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	69 a9       	ldd	r22, Y+49	; 0x31
    1faa:	7a a9       	ldd	r23, Y+50	; 0x32
    1fac:	8b a9       	ldd	r24, Y+51	; 0x33
    1fae:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	98 ab       	std	Y+48, r25	; 0x30
    1fba:	8f a7       	std	Y+47, r24	; 0x2f
    1fbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc0:	9c a7       	std	Y+44, r25	; 0x2c
    1fc2:	8b a7       	std	Y+43, r24	; 0x2b
    1fc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_sendCommand+0xfc>
    1fcc:	9c a7       	std	Y+44, r25	; 0x2c
    1fce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e8       	ldi	r26, 0x80	; 128
    1fe0:	bf e3       	ldi	r27, 0x3F	; 63
    1fe2:	8f a3       	std	Y+39, r24	; 0x27
    1fe4:	98 a7       	std	Y+40, r25	; 0x28
    1fe6:	a9 a7       	std	Y+41, r26	; 0x29
    1fe8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	6f a1       	ldd	r22, Y+39	; 0x27
    1fec:	78 a5       	ldd	r23, Y+40	; 0x28
    1fee:	89 a5       	ldd	r24, Y+41	; 0x29
    1ff0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a ef       	ldi	r20, 0xFA	; 250
    1ff8:	54 e4       	ldi	r21, 0x44	; 68
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	8b a3       	std	Y+35, r24	; 0x23
    2004:	9c a3       	std	Y+36, r25	; 0x24
    2006:	ad a3       	std	Y+37, r26	; 0x25
    2008:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    200a:	6b a1       	ldd	r22, Y+35	; 0x23
    200c:	7c a1       	ldd	r23, Y+36	; 0x24
    200e:	8d a1       	ldd	r24, Y+37	; 0x25
    2010:	9e a1       	ldd	r25, Y+38	; 0x26
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e8       	ldi	r20, 0x80	; 128
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <LCD_sendCommand+0x160>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9a a3       	std	Y+34, r25	; 0x22
    2028:	89 a3       	std	Y+33, r24	; 0x21
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    202c:	6b a1       	ldd	r22, Y+35	; 0x23
    202e:	7c a1       	ldd	r23, Y+36	; 0x24
    2030:	8d a1       	ldd	r24, Y+37	; 0x25
    2032:	9e a1       	ldd	r25, Y+38	; 0x26
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	4f e7       	ldi	r20, 0x7F	; 127
    203a:	57 e4       	ldi	r21, 0x47	; 71
    203c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	6f a1       	ldd	r22, Y+39	; 0x27
    2046:	78 a5       	ldd	r23, Y+40	; 0x28
    2048:	89 a5       	ldd	r24, Y+41	; 0x29
    204a:	9a a5       	ldd	r25, Y+42	; 0x2a
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9a a3       	std	Y+34, r25	; 0x22
    206a:	89 a3       	std	Y+33, r24	; 0x21
    206c:	0f c0       	rjmp	.+30     	; 0x208c <LCD_sendCommand+0x1c0>
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	98 a3       	std	Y+32, r25	; 0x20
    2074:	8f 8f       	std	Y+31, r24	; 0x1f
    2076:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2078:	98 a1       	ldd	r25, Y+32	; 0x20
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <LCD_sendCommand+0x1ae>
    207e:	98 a3       	std	Y+32, r25	; 0x20
    2080:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	89 a1       	ldd	r24, Y+33	; 0x21
    2084:	9a a1       	ldd	r25, Y+34	; 0x22
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9a a3       	std	Y+34, r25	; 0x22
    208a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	89 a1       	ldd	r24, Y+33	; 0x21
    208e:	9a a1       	ldd	r25, Y+34	; 0x22
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <LCD_sendCommand+0x1a2>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	6b a1       	ldd	r22, Y+35	; 0x23
    2098:	7c a1       	ldd	r23, Y+36	; 0x24
    209a:	8d a1       	ldd	r24, Y+37	; 0x25
    209c:	9e a1       	ldd	r25, Y+38	; 0x26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9a a3       	std	Y+34, r25	; 0x22
    20a8:	89 a3       	std	Y+33, r24	; 0x21
    20aa:	89 a1       	ldd	r24, Y+33	; 0x21
    20ac:	9a a1       	ldd	r25, Y+34	; 0x22
    20ae:	9e 8f       	std	Y+30, r25	; 0x1e
    20b0:	8d 8f       	std	Y+29, r24	; 0x1d
    20b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <LCD_sendCommand+0x1ea>
    20ba:	9e 8f       	std	Y+30, r25	; 0x1e
    20bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	69 ad       	ldd	r22, Y+57	; 0x39
    20c2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	a0 e8       	ldi	r26, 0x80	; 128
    20cc:	bf e3       	ldi	r27, 0x3F	; 63
    20ce:	89 8f       	std	Y+25, r24	; 0x19
    20d0:	9a 8f       	std	Y+26, r25	; 0x1a
    20d2:	ab 8f       	std	Y+27, r26	; 0x1b
    20d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d6:	69 8d       	ldd	r22, Y+25	; 0x19
    20d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4a ef       	ldi	r20, 0xFA	; 250
    20e4:	54 e4       	ldi	r21, 0x44	; 68
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	8d 8b       	std	Y+21, r24	; 0x15
    20f0:	9e 8b       	std	Y+22, r25	; 0x16
    20f2:	af 8b       	std	Y+23, r26	; 0x17
    20f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20f6:	6d 89       	ldd	r22, Y+21	; 0x15
    20f8:	7e 89       	ldd	r23, Y+22	; 0x16
    20fa:	8f 89       	ldd	r24, Y+23	; 0x17
    20fc:	98 8d       	ldd	r25, Y+24	; 0x18
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e8       	ldi	r20, 0x80	; 128
    2104:	5f e3       	ldi	r21, 0x3F	; 63
    2106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    210a:	88 23       	and	r24, r24
    210c:	2c f4       	brge	.+10     	; 0x2118 <LCD_sendCommand+0x24c>
		__ticks = 1;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9c 8b       	std	Y+20, r25	; 0x14
    2114:	8b 8b       	std	Y+19, r24	; 0x13
    2116:	3f c0       	rjmp	.+126    	; 0x2196 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2118:	6d 89       	ldd	r22, Y+21	; 0x15
    211a:	7e 89       	ldd	r23, Y+22	; 0x16
    211c:	8f 89       	ldd	r24, Y+23	; 0x17
    211e:	98 8d       	ldd	r25, Y+24	; 0x18
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	3f ef       	ldi	r19, 0xFF	; 255
    2124:	4f e7       	ldi	r20, 0x7F	; 127
    2126:	57 e4       	ldi	r21, 0x47	; 71
    2128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    212c:	18 16       	cp	r1, r24
    212e:	4c f5       	brge	.+82     	; 0x2182 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2130:	69 8d       	ldd	r22, Y+25	; 0x19
    2132:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2134:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2136:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e2       	ldi	r20, 0x20	; 32
    213e:	51 e4       	ldi	r21, 0x41	; 65
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	bc 01       	movw	r22, r24
    214a:	cd 01       	movw	r24, r26
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9c 8b       	std	Y+20, r25	; 0x14
    2156:	8b 8b       	std	Y+19, r24	; 0x13
    2158:	0f c0       	rjmp	.+30     	; 0x2178 <LCD_sendCommand+0x2ac>
    215a:	88 ec       	ldi	r24, 0xC8	; 200
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9a 8b       	std	Y+18, r25	; 0x12
    2160:	89 8b       	std	Y+17, r24	; 0x11
    2162:	89 89       	ldd	r24, Y+17	; 0x11
    2164:	9a 89       	ldd	r25, Y+18	; 0x12
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <LCD_sendCommand+0x29a>
    216a:	9a 8b       	std	Y+18, r25	; 0x12
    216c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216e:	8b 89       	ldd	r24, Y+19	; 0x13
    2170:	9c 89       	ldd	r25, Y+20	; 0x14
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	9c 8b       	std	Y+20, r25	; 0x14
    2176:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2178:	8b 89       	ldd	r24, Y+19	; 0x13
    217a:	9c 89       	ldd	r25, Y+20	; 0x14
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	69 f7       	brne	.-38     	; 0x215a <LCD_sendCommand+0x28e>
    2180:	14 c0       	rjmp	.+40     	; 0x21aa <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2182:	6d 89       	ldd	r22, Y+21	; 0x15
    2184:	7e 89       	ldd	r23, Y+22	; 0x16
    2186:	8f 89       	ldd	r24, Y+23	; 0x17
    2188:	98 8d       	ldd	r25, Y+24	; 0x18
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	9c 8b       	std	Y+20, r25	; 0x14
    2194:	8b 8b       	std	Y+19, r24	; 0x13
    2196:	8b 89       	ldd	r24, Y+19	; 0x13
    2198:	9c 89       	ldd	r25, Y+20	; 0x14
    219a:	98 8b       	std	Y+16, r25	; 0x10
    219c:	8f 87       	std	Y+15, r24	; 0x0f
    219e:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a0:	98 89       	ldd	r25, Y+16	; 0x10
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_sendCommand+0x2d6>
    21a6:	98 8b       	std	Y+16, r25	; 0x10
    21a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21aa:	82 e0       	ldi	r24, 0x02	; 2
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a0 e8       	ldi	r26, 0x80	; 128
    21ba:	bf e3       	ldi	r27, 0x3F	; 63
    21bc:	8b 87       	std	Y+11, r24	; 0x0b
    21be:	9c 87       	std	Y+12, r25	; 0x0c
    21c0:	ad 87       	std	Y+13, r26	; 0x0d
    21c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	4a ef       	ldi	r20, 0xFA	; 250
    21d2:	54 e4       	ldi	r21, 0x44	; 68
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	8f 83       	std	Y+7, r24	; 0x07
    21de:	98 87       	std	Y+8, r25	; 0x08
    21e0:	a9 87       	std	Y+9, r26	; 0x09
    21e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e4:	6f 81       	ldd	r22, Y+7	; 0x07
    21e6:	78 85       	ldd	r23, Y+8	; 0x08
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e8       	ldi	r20, 0x80	; 128
    21f2:	5f e3       	ldi	r21, 0x3F	; 63
    21f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	2c f4       	brge	.+10     	; 0x2206 <LCD_sendCommand+0x33a>
		__ticks = 1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	3f c0       	rjmp	.+126    	; 0x2284 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2206:	6f 81       	ldd	r22, Y+7	; 0x07
    2208:	78 85       	ldd	r23, Y+8	; 0x08
    220a:	89 85       	ldd	r24, Y+9	; 0x09
    220c:	9a 85       	ldd	r25, Y+10	; 0x0a
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	3f ef       	ldi	r19, 0xFF	; 255
    2212:	4f e7       	ldi	r20, 0x7F	; 127
    2214:	57 e4       	ldi	r21, 0x47	; 71
    2216:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221a:	18 16       	cp	r1, r24
    221c:	4c f5       	brge	.+82     	; 0x2270 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2220:	7c 85       	ldd	r23, Y+12	; 0x0c
    2222:	8d 85       	ldd	r24, Y+13	; 0x0d
    2224:	9e 85       	ldd	r25, Y+14	; 0x0e
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e2       	ldi	r20, 0x20	; 32
    222c:	51 e4       	ldi	r21, 0x41	; 65
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <LCD_sendCommand+0x39a>
    2248:	88 ec       	ldi	r24, 0xC8	; 200
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	8b 83       	std	Y+3, r24	; 0x03
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	9c 81       	ldd	r25, Y+4	; 0x04
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <LCD_sendCommand+0x388>
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	69 f7       	brne	.-38     	; 0x2248 <LCD_sendCommand+0x37c>
    226e:	14 c0       	rjmp	.+40     	; 0x2298 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_sendCommand+0x3c4>
    2294:	9a 83       	std	Y+2, r25	; 0x02
    2296:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2298:	e9 96       	adiw	r28, 0x39	; 57
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	e9 97       	sbiw	r28, 0x39	; 57
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	a0 e8       	ldi	r26, 0x80	; 128
    22d0:	bf e3       	ldi	r27, 0x3F	; 63
    22d2:	8d ab       	std	Y+53, r24	; 0x35
    22d4:	9e ab       	std	Y+54, r25	; 0x36
    22d6:	af ab       	std	Y+55, r26	; 0x37
    22d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22da:	6d a9       	ldd	r22, Y+53	; 0x35
    22dc:	7e a9       	ldd	r23, Y+54	; 0x36
    22de:	8f a9       	ldd	r24, Y+55	; 0x37
    22e0:	98 ad       	ldd	r25, Y+56	; 0x38
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	4a ef       	ldi	r20, 0xFA	; 250
    22e8:	54 e4       	ldi	r21, 0x44	; 68
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	89 ab       	std	Y+49, r24	; 0x31
    22f4:	9a ab       	std	Y+50, r25	; 0x32
    22f6:	ab ab       	std	Y+51, r26	; 0x33
    22f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22fa:	69 a9       	ldd	r22, Y+49	; 0x31
    22fc:	7a a9       	ldd	r23, Y+50	; 0x32
    22fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2300:	9c a9       	ldd	r25, Y+52	; 0x34
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	2c f4       	brge	.+10     	; 0x231c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	98 ab       	std	Y+48, r25	; 0x30
    2318:	8f a7       	std	Y+47, r24	; 0x2f
    231a:	3f c0       	rjmp	.+126    	; 0x239a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    231c:	69 a9       	ldd	r22, Y+49	; 0x31
    231e:	7a a9       	ldd	r23, Y+50	; 0x32
    2320:	8b a9       	ldd	r24, Y+51	; 0x33
    2322:	9c a9       	ldd	r25, Y+52	; 0x34
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	3f ef       	ldi	r19, 0xFF	; 255
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	57 e4       	ldi	r21, 0x47	; 71
    232c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	4c f5       	brge	.+82     	; 0x2386 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2334:	6d a9       	ldd	r22, Y+53	; 0x35
    2336:	7e a9       	ldd	r23, Y+54	; 0x36
    2338:	8f a9       	ldd	r24, Y+55	; 0x37
    233a:	98 ad       	ldd	r25, Y+56	; 0x38
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e2       	ldi	r20, 0x20	; 32
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	98 ab       	std	Y+48, r25	; 0x30
    235a:	8f a7       	std	Y+47, r24	; 0x2f
    235c:	0f c0       	rjmp	.+30     	; 0x237c <LCD_displayCharacter+0xd2>
    235e:	88 ec       	ldi	r24, 0xC8	; 200
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9e a7       	std	Y+46, r25	; 0x2e
    2364:	8d a7       	std	Y+45, r24	; 0x2d
    2366:	8d a5       	ldd	r24, Y+45	; 0x2d
    2368:	9e a5       	ldd	r25, Y+46	; 0x2e
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <LCD_displayCharacter+0xc0>
    236e:	9e a7       	std	Y+46, r25	; 0x2e
    2370:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2372:	8f a5       	ldd	r24, Y+47	; 0x2f
    2374:	98 a9       	ldd	r25, Y+48	; 0x30
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	98 ab       	std	Y+48, r25	; 0x30
    237a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237c:	8f a5       	ldd	r24, Y+47	; 0x2f
    237e:	98 a9       	ldd	r25, Y+48	; 0x30
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	69 f7       	brne	.-38     	; 0x235e <LCD_displayCharacter+0xb4>
    2384:	14 c0       	rjmp	.+40     	; 0x23ae <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2386:	69 a9       	ldd	r22, Y+49	; 0x31
    2388:	7a a9       	ldd	r23, Y+50	; 0x32
    238a:	8b a9       	ldd	r24, Y+51	; 0x33
    238c:	9c a9       	ldd	r25, Y+52	; 0x34
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	98 ab       	std	Y+48, r25	; 0x30
    2398:	8f a7       	std	Y+47, r24	; 0x2f
    239a:	8f a5       	ldd	r24, Y+47	; 0x2f
    239c:	98 a9       	ldd	r25, Y+48	; 0x30
    239e:	9c a7       	std	Y+44, r25	; 0x2c
    23a0:	8b a7       	std	Y+43, r24	; 0x2b
    23a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_displayCharacter+0xfc>
    23aa:	9c a7       	std	Y+44, r25	; 0x2c
    23ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    23ae:	82 e0       	ldi	r24, 0x02	; 2
    23b0:	61 e0       	ldi	r22, 0x01	; 1
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e8       	ldi	r26, 0x80	; 128
    23be:	bf e3       	ldi	r27, 0x3F	; 63
    23c0:	8f a3       	std	Y+39, r24	; 0x27
    23c2:	98 a7       	std	Y+40, r25	; 0x28
    23c4:	a9 a7       	std	Y+41, r26	; 0x29
    23c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	6f a1       	ldd	r22, Y+39	; 0x27
    23ca:	78 a5       	ldd	r23, Y+40	; 0x28
    23cc:	89 a5       	ldd	r24, Y+41	; 0x29
    23ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a ef       	ldi	r20, 0xFA	; 250
    23d6:	54 e4       	ldi	r21, 0x44	; 68
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	8b a3       	std	Y+35, r24	; 0x23
    23e2:	9c a3       	std	Y+36, r25	; 0x24
    23e4:	ad a3       	std	Y+37, r26	; 0x25
    23e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23e8:	6b a1       	ldd	r22, Y+35	; 0x23
    23ea:	7c a1       	ldd	r23, Y+36	; 0x24
    23ec:	8d a1       	ldd	r24, Y+37	; 0x25
    23ee:	9e a1       	ldd	r25, Y+38	; 0x26
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9a a3       	std	Y+34, r25	; 0x22
    2406:	89 a3       	std	Y+33, r24	; 0x21
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    240a:	6b a1       	ldd	r22, Y+35	; 0x23
    240c:	7c a1       	ldd	r23, Y+36	; 0x24
    240e:	8d a1       	ldd	r24, Y+37	; 0x25
    2410:	9e a1       	ldd	r25, Y+38	; 0x26
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	6f a1       	ldd	r22, Y+39	; 0x27
    2424:	78 a5       	ldd	r23, Y+40	; 0x28
    2426:	89 a5       	ldd	r24, Y+41	; 0x29
    2428:	9a a5       	ldd	r25, Y+42	; 0x2a
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9a a3       	std	Y+34, r25	; 0x22
    2448:	89 a3       	std	Y+33, r24	; 0x21
    244a:	0f c0       	rjmp	.+30     	; 0x246a <LCD_displayCharacter+0x1c0>
    244c:	88 ec       	ldi	r24, 0xC8	; 200
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	98 a3       	std	Y+32, r25	; 0x20
    2452:	8f 8f       	std	Y+31, r24	; 0x1f
    2454:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2456:	98 a1       	ldd	r25, Y+32	; 0x20
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_displayCharacter+0x1ae>
    245c:	98 a3       	std	Y+32, r25	; 0x20
    245e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	89 a1       	ldd	r24, Y+33	; 0x21
    2462:	9a a1       	ldd	r25, Y+34	; 0x22
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	9a a3       	std	Y+34, r25	; 0x22
    2468:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	89 a1       	ldd	r24, Y+33	; 0x21
    246c:	9a a1       	ldd	r25, Y+34	; 0x22
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <LCD_displayCharacter+0x1a2>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	6b a1       	ldd	r22, Y+35	; 0x23
    2476:	7c a1       	ldd	r23, Y+36	; 0x24
    2478:	8d a1       	ldd	r24, Y+37	; 0x25
    247a:	9e a1       	ldd	r25, Y+38	; 0x26
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9a a3       	std	Y+34, r25	; 0x22
    2486:	89 a3       	std	Y+33, r24	; 0x21
    2488:	89 a1       	ldd	r24, Y+33	; 0x21
    248a:	9a a1       	ldd	r25, Y+34	; 0x22
    248c:	9e 8f       	std	Y+30, r25	; 0x1e
    248e:	8d 8f       	std	Y+29, r24	; 0x1d
    2490:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2492:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_displayCharacter+0x1ea>
    2498:	9e 8f       	std	Y+30, r25	; 0x1e
    249a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	69 ad       	ldd	r22, Y+57	; 0x39
    24a0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a0 e8       	ldi	r26, 0x80	; 128
    24aa:	bf e3       	ldi	r27, 0x3F	; 63
    24ac:	89 8f       	std	Y+25, r24	; 0x19
    24ae:	9a 8f       	std	Y+26, r25	; 0x1a
    24b0:	ab 8f       	std	Y+27, r26	; 0x1b
    24b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b4:	69 8d       	ldd	r22, Y+25	; 0x19
    24b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a ef       	ldi	r20, 0xFA	; 250
    24c2:	54 e4       	ldi	r21, 0x44	; 68
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	8d 8b       	std	Y+21, r24	; 0x15
    24ce:	9e 8b       	std	Y+22, r25	; 0x16
    24d0:	af 8b       	std	Y+23, r26	; 0x17
    24d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24d4:	6d 89       	ldd	r22, Y+21	; 0x15
    24d6:	7e 89       	ldd	r23, Y+22	; 0x16
    24d8:	8f 89       	ldd	r24, Y+23	; 0x17
    24da:	98 8d       	ldd	r25, Y+24	; 0x18
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	2c f4       	brge	.+10     	; 0x24f6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9c 8b       	std	Y+20, r25	; 0x14
    24f2:	8b 8b       	std	Y+19, r24	; 0x13
    24f4:	3f c0       	rjmp	.+126    	; 0x2574 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    24f6:	6d 89       	ldd	r22, Y+21	; 0x15
    24f8:	7e 89       	ldd	r23, Y+22	; 0x16
    24fa:	8f 89       	ldd	r24, Y+23	; 0x17
    24fc:	98 8d       	ldd	r25, Y+24	; 0x18
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	4c f5       	brge	.+82     	; 0x2560 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250e:	69 8d       	ldd	r22, Y+25	; 0x19
    2510:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <LCD_displayCharacter+0x2ac>
    2538:	88 ec       	ldi	r24, 0xC8	; 200
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9a 8b       	std	Y+18, r25	; 0x12
    253e:	89 8b       	std	Y+17, r24	; 0x11
    2540:	89 89       	ldd	r24, Y+17	; 0x11
    2542:	9a 89       	ldd	r25, Y+18	; 0x12
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <LCD_displayCharacter+0x29a>
    2548:	9a 8b       	std	Y+18, r25	; 0x12
    254a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254c:	8b 89       	ldd	r24, Y+19	; 0x13
    254e:	9c 89       	ldd	r25, Y+20	; 0x14
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	9c 8b       	std	Y+20, r25	; 0x14
    2554:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	8b 89       	ldd	r24, Y+19	; 0x13
    2558:	9c 89       	ldd	r25, Y+20	; 0x14
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	69 f7       	brne	.-38     	; 0x2538 <LCD_displayCharacter+0x28e>
    255e:	14 c0       	rjmp	.+40     	; 0x2588 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2560:	6d 89       	ldd	r22, Y+21	; 0x15
    2562:	7e 89       	ldd	r23, Y+22	; 0x16
    2564:	8f 89       	ldd	r24, Y+23	; 0x17
    2566:	98 8d       	ldd	r25, Y+24	; 0x18
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
    2574:	8b 89       	ldd	r24, Y+19	; 0x13
    2576:	9c 89       	ldd	r25, Y+20	; 0x14
    2578:	98 8b       	std	Y+16, r25	; 0x10
    257a:	8f 87       	std	Y+15, r24	; 0x0f
    257c:	8f 85       	ldd	r24, Y+15	; 0x0f
    257e:	98 89       	ldd	r25, Y+16	; 0x10
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <LCD_displayCharacter+0x2d6>
    2584:	98 8b       	std	Y+16, r25	; 0x10
    2586:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2588:	82 e0       	ldi	r24, 0x02	; 2
    258a:	61 e0       	ldi	r22, 0x01	; 1
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e8       	ldi	r26, 0x80	; 128
    2598:	bf e3       	ldi	r27, 0x3F	; 63
    259a:	8b 87       	std	Y+11, r24	; 0x0b
    259c:	9c 87       	std	Y+12, r25	; 0x0c
    259e:	ad 87       	std	Y+13, r26	; 0x0d
    25a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a ef       	ldi	r20, 0xFA	; 250
    25b0:	54 e4       	ldi	r21, 0x44	; 68
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8f 83       	std	Y+7, r24	; 0x07
    25bc:	98 87       	std	Y+8, r25	; 0x08
    25be:	a9 87       	std	Y+9, r26	; 0x09
    25c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c2:	6f 81       	ldd	r22, Y+7	; 0x07
    25c4:	78 85       	ldd	r23, Y+8	; 0x08
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2600:	8d 85       	ldd	r24, Y+13	; 0x0d
    2602:	9e 85       	ldd	r25, Y+14	; 0x0e
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e2       	ldi	r20, 0x20	; 32
    260a:	51 e4       	ldi	r21, 0x41	; 65
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <LCD_displayCharacter+0x39a>
    2626:	88 ec       	ldi	r24, 0xC8	; 200
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9c 83       	std	Y+4, r25	; 0x04
    262c:	8b 83       	std	Y+3, r24	; 0x03
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <LCD_displayCharacter+0x388>
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	69 f7       	brne	.-38     	; 0x2626 <LCD_displayCharacter+0x37c>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	6f 81       	ldd	r22, Y+7	; 0x07
    2650:	78 85       	ldd	r23, Y+8	; 0x08
    2652:	89 85       	ldd	r24, Y+9	; 0x09
    2654:	9a 85       	ldd	r25, Y+10	; 0x0a
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_displayCharacter+0x3c4>
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2676:	e9 96       	adiw	r28, 0x39	; 57
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <LCD_displayString+0x6>
    268e:	0f 92       	push	r0
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	9b 83       	std	Y+3, r25	; 0x03
    2696:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2698:	19 82       	std	Y+1, r1	; 0x01
    269a:	0e c0       	rjmp	.+28     	; 0x26b8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	9b 81       	ldd	r25, Y+3	; 0x03
    26a6:	fc 01       	movw	r30, r24
    26a8:	e2 0f       	add	r30, r18
    26aa:	f3 1f       	adc	r31, r19
    26ac:	80 81       	ld	r24, Z
    26ae:	0e 94 55 11 	call	0x22aa	; 0x22aa <LCD_displayCharacter>
		i++;
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	8f 5f       	subi	r24, 0xFF	; 255
    26b6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	28 2f       	mov	r18, r24
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	9b 81       	ldd	r25, Y+3	; 0x03
    26c2:	fc 01       	movw	r30, r24
    26c4:	e2 0f       	add	r30, r18
    26c6:	f3 1f       	adc	r31, r19
    26c8:	80 81       	ld	r24, Z
    26ca:	88 23       	and	r24, r24
    26cc:	39 f7       	brne	.-50     	; 0x269c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <LCD_moveCursor+0x6>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <LCD_moveCursor+0x8>
    26e2:	0f 92       	push	r0
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	8a 83       	std	Y+2, r24	; 0x02
    26ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	3d 83       	std	Y+5, r19	; 0x05
    26f4:	2c 83       	std	Y+4, r18	; 0x04
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	9d 81       	ldd	r25, Y+5	; 0x05
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	91 05       	cpc	r25, r1
    26fe:	c1 f0       	breq	.+48     	; 0x2730 <LCD_moveCursor+0x56>
    2700:	2c 81       	ldd	r18, Y+4	; 0x04
    2702:	3d 81       	ldd	r19, Y+5	; 0x05
    2704:	22 30       	cpi	r18, 0x02	; 2
    2706:	31 05       	cpc	r19, r1
    2708:	2c f4       	brge	.+10     	; 0x2714 <LCD_moveCursor+0x3a>
    270a:	8c 81       	ldd	r24, Y+4	; 0x04
    270c:	9d 81       	ldd	r25, Y+5	; 0x05
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	61 f0       	breq	.+24     	; 0x272a <LCD_moveCursor+0x50>
    2712:	19 c0       	rjmp	.+50     	; 0x2746 <LCD_moveCursor+0x6c>
    2714:	2c 81       	ldd	r18, Y+4	; 0x04
    2716:	3d 81       	ldd	r19, Y+5	; 0x05
    2718:	22 30       	cpi	r18, 0x02	; 2
    271a:	31 05       	cpc	r19, r1
    271c:	69 f0       	breq	.+26     	; 0x2738 <LCD_moveCursor+0x5e>
    271e:	8c 81       	ldd	r24, Y+4	; 0x04
    2720:	9d 81       	ldd	r25, Y+5	; 0x05
    2722:	83 30       	cpi	r24, 0x03	; 3
    2724:	91 05       	cpc	r25, r1
    2726:	61 f0       	breq	.+24     	; 0x2740 <LCD_moveCursor+0x66>
    2728:	0e c0       	rjmp	.+28     	; 0x2746 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	0b c0       	rjmp	.+22     	; 0x2746 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	80 5c       	subi	r24, 0xC0	; 192
    2734:	89 83       	std	Y+1, r24	; 0x01
    2736:	07 c0       	rjmp	.+14     	; 0x2746 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	80 5f       	subi	r24, 0xF0	; 240
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	03 c0       	rjmp	.+6      	; 0x2746 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	80 5b       	subi	r24, 0xB0	; 176
    2744:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	80 68       	ori	r24, 0x80	; 128
    274a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_sendCommand>
}
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	00 d0       	rcall	.+0      	; 0x2764 <LCD_displayStringRowColumn+0x6>
    2764:	00 d0       	rcall	.+0      	; 0x2766 <LCD_displayStringRowColumn+0x8>
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	6a 83       	std	Y+2, r22	; 0x02
    276e:	5c 83       	std	Y+4, r21	; 0x04
    2770:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	6a 81       	ldd	r22, Y+2	; 0x02
    2776:	0e 94 6d 13 	call	0x26da	; 0x26da <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
}
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	62 97       	sbiw	r28, 0x12	; 18
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	9a 8b       	std	Y+18, r25	; 0x12
    27a6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    27a8:	89 89       	ldd	r24, Y+17	; 0x11
    27aa:	9a 89       	ldd	r25, Y+18	; 0x12
    27ac:	9e 01       	movw	r18, r28
    27ae:	2f 5f       	subi	r18, 0xFF	; 255
    27b0:	3f 4f       	sbci	r19, 0xFF	; 255
    27b2:	b9 01       	movw	r22, r18
    27b4:	4a e0       	ldi	r20, 0x0A	; 10
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <itoa>
   LCD_displayString(buff); /* Display the string */
    27bc:	ce 01       	movw	r24, r28
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
}
    27c4:	62 96       	adiw	r28, 0x12	; 18
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_sendCommand>
}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <display_menu>:
/*******************************************************************************
 *                      Functions Implementation                               *
 *******************************************************************************/

void display_menu(void)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    LCD_clearScreen();
    27f2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
    LCD_displayString("1- Start");
    27f6:	80 e6       	ldi	r24, 0x60	; 96
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    LCD_displayStringRowColumn(1, 0, "2- Display Value");
    27fe:	29 e6       	ldi	r18, 0x69	; 105
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	60 e0       	ldi	r22, 0x00	; 0
    2806:	a9 01       	movw	r20, r18
    2808:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(2, 0, "3- Retrieve Fault");
    280c:	2a e7       	ldi	r18, 0x7A	; 122
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	a9 01       	movw	r20, r18
    2816:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(3, 0, "4- Stop");
    281a:	2c e8       	ldi	r18, 0x8C	; 140
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	83 e0       	ldi	r24, 0x03	; 3
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	a9 01       	movw	r20, r18
    2824:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
}
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <StartOperation>:

void StartOperation(void)
{
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	c7 57       	subi	r28, 0x77	; 119
    283c:	d0 40       	sbci	r29, 0x00	; 0
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    // variables for receiving data from Control ECU
    uint8 temp, distance_high, distance_low;
    uint16 distance;
    uint8 window_states;

    g_monitoring_active = 1; // mark system as active
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	80 93 92 01 	sts	0x0192, r24

    LCD_clearScreen();
    284e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
    LCD_displayString("Starting...");
    2852:	84 e9       	ldi	r24, 0x94	; 148
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    285a:	fe 01       	movw	r30, r28
    285c:	e3 59       	subi	r30, 0x93	; 147
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	aa ef       	ldi	r26, 0xFA	; 250
    2866:	b3 e4       	ldi	r27, 0x43	; 67
    2868:	80 83       	st	Z, r24
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	a2 83       	std	Z+2, r26	; 0x02
    286e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2870:	8e 01       	movw	r16, r28
    2872:	07 59       	subi	r16, 0x97	; 151
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	e3 59       	subi	r30, 0x93	; 147
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a ef       	ldi	r20, 0xFA	; 250
    288a:	54 e4       	ldi	r21, 0x44	; 68
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	f8 01       	movw	r30, r16
    2896:	80 83       	st	Z, r24
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	a2 83       	std	Z+2, r26	; 0x02
    289c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    289e:	fe 01       	movw	r30, r28
    28a0:	e7 59       	subi	r30, 0x97	; 151
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e8       	ldi	r20, 0x80	; 128
    28b2:	5f e3       	ldi	r21, 0x3F	; 63
    28b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	44 f4       	brge	.+16     	; 0x28cc <StartOperation+0x9e>
		__ticks = 1;
    28bc:	fe 01       	movw	r30, r28
    28be:	e9 59       	subi	r30, 0x99	; 153
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	80 83       	st	Z, r24
    28ca:	64 c0       	rjmp	.+200    	; 0x2994 <StartOperation+0x166>
	else if (__tmp > 65535)
    28cc:	fe 01       	movw	r30, r28
    28ce:	e7 59       	subi	r30, 0x97	; 151
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	0c f0       	brlt	.+2      	; 0x28ec <StartOperation+0xbe>
    28ea:	43 c0       	rjmp	.+134    	; 0x2972 <StartOperation+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ec:	fe 01       	movw	r30, r28
    28ee:	e3 59       	subi	r30, 0x93	; 147
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	60 81       	ld	r22, Z
    28f4:	71 81       	ldd	r23, Z+1	; 0x01
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	51 e4       	ldi	r21, 0x41	; 65
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	8e 01       	movw	r16, r28
    290c:	09 59       	subi	r16, 0x99	; 153
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	f8 01       	movw	r30, r16
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
    2922:	1f c0       	rjmp	.+62     	; 0x2962 <StartOperation+0x134>
    2924:	fe 01       	movw	r30, r28
    2926:	eb 59       	subi	r30, 0x9B	; 155
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	88 ec       	ldi	r24, 0xC8	; 200
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	80 83       	st	Z, r24
    2932:	fe 01       	movw	r30, r28
    2934:	eb 59       	subi	r30, 0x9B	; 155
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <StartOperation+0x10e>
    2940:	fe 01       	movw	r30, r28
    2942:	eb 59       	subi	r30, 0x9B	; 155
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294a:	de 01       	movw	r26, r28
    294c:	a9 59       	subi	r26, 0x99	; 153
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e9 59       	subi	r30, 0x99	; 153
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	11 96       	adiw	r26, 0x01	; 1
    295e:	9c 93       	st	X, r25
    2960:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2962:	fe 01       	movw	r30, r28
    2964:	e9 59       	subi	r30, 0x99	; 153
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	d1 f6       	brne	.-76     	; 0x2924 <StartOperation+0xf6>
    2970:	27 c0       	rjmp	.+78     	; 0x29c0 <StartOperation+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2972:	8e 01       	movw	r16, r28
    2974:	09 59       	subi	r16, 0x99	; 153
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	e7 59       	subi	r30, 0x97	; 151
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	f8 01       	movw	r30, r16
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	80 83       	st	Z, r24
    2994:	de 01       	movw	r26, r28
    2996:	ad 59       	subi	r26, 0x9D	; 157
    2998:	bf 4f       	sbci	r27, 0xFF	; 255
    299a:	fe 01       	movw	r30, r28
    299c:	e9 59       	subi	r30, 0x99	; 153
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	8d 93       	st	X+, r24
    29a6:	9c 93       	st	X, r25
    29a8:	fe 01       	movw	r30, r28
    29aa:	ed 59       	subi	r30, 0x9D	; 157
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	91 81       	ldd	r25, Z+1	; 0x01
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <StartOperation+0x184>
    29b6:	fe 01       	movw	r30, r28
    29b8:	ed 59       	subi	r30, 0x9D	; 157
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
    _delay_ms(500);

    // tell Control ECU to start monitoring
    UART_sendByte(START_OPERATION);
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	0e 94 a4 0c 	call	0x1948	; 0x1948 <UART_sendByte>
    29c6:	fe 01       	movw	r30, r28
    29c8:	e1 5a       	subi	r30, 0xA1	; 161
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	a8 e4       	ldi	r26, 0x48	; 72
    29d2:	b2 e4       	ldi	r27, 0x42	; 66
    29d4:	80 83       	st	Z, r24
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	a2 83       	std	Z+2, r26	; 0x02
    29da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29dc:	8e 01       	movw	r16, r28
    29de:	05 5a       	subi	r16, 0xA5	; 165
    29e0:	1f 4f       	sbci	r17, 0xFF	; 255
    29e2:	fe 01       	movw	r30, r28
    29e4:	e1 5a       	subi	r30, 0xA1	; 161
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	4a ef       	ldi	r20, 0xFA	; 250
    29f6:	54 e4       	ldi	r21, 0x44	; 68
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	f8 01       	movw	r30, r16
    2a02:	80 83       	st	Z, r24
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	a2 83       	std	Z+2, r26	; 0x02
    2a08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e5 5a       	subi	r30, 0xA5	; 165
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	44 f4       	brge	.+16     	; 0x2a38 <StartOperation+0x20a>
		__ticks = 1;
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e7 5a       	subi	r30, 0xA7	; 167
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	91 83       	std	Z+1, r25	; 0x01
    2a34:	80 83       	st	Z, r24
    2a36:	64 c0       	rjmp	.+200    	; 0x2b00 <StartOperation+0x2d2>
	else if (__tmp > 65535)
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e5 5a       	subi	r30, 0xA5	; 165
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	60 81       	ld	r22, Z
    2a40:	71 81       	ldd	r23, Z+1	; 0x01
    2a42:	82 81       	ldd	r24, Z+2	; 0x02
    2a44:	93 81       	ldd	r25, Z+3	; 0x03
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	3f ef       	ldi	r19, 0xFF	; 255
    2a4a:	4f e7       	ldi	r20, 0x7F	; 127
    2a4c:	57 e4       	ldi	r21, 0x47	; 71
    2a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a52:	18 16       	cp	r1, r24
    2a54:	0c f0       	brlt	.+2      	; 0x2a58 <StartOperation+0x22a>
    2a56:	43 c0       	rjmp	.+134    	; 0x2ade <StartOperation+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e1 5a       	subi	r30, 0xA1	; 161
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	60 81       	ld	r22, Z
    2a60:	71 81       	ldd	r23, Z+1	; 0x01
    2a62:	82 81       	ldd	r24, Z+2	; 0x02
    2a64:	93 81       	ldd	r25, Z+3	; 0x03
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	40 e2       	ldi	r20, 0x20	; 32
    2a6c:	51 e4       	ldi	r21, 0x41	; 65
    2a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	8e 01       	movw	r16, r28
    2a78:	07 5a       	subi	r16, 0xA7	; 167
    2a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	f8 01       	movw	r30, r16
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
    2a8e:	1f c0       	rjmp	.+62     	; 0x2ace <StartOperation+0x2a0>
    2a90:	fe 01       	movw	r30, r28
    2a92:	e9 5a       	subi	r30, 0xA9	; 169
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	88 ec       	ldi	r24, 0xC8	; 200
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	80 83       	st	Z, r24
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e9 5a       	subi	r30, 0xA9	; 169
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <StartOperation+0x27a>
    2aac:	fe 01       	movw	r30, r28
    2aae:	e9 5a       	subi	r30, 0xA9	; 169
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	91 83       	std	Z+1, r25	; 0x01
    2ab4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab6:	de 01       	movw	r26, r28
    2ab8:	a7 5a       	subi	r26, 0xA7	; 167
    2aba:	bf 4f       	sbci	r27, 0xFF	; 255
    2abc:	fe 01       	movw	r30, r28
    2abe:	e7 5a       	subi	r30, 0xA7	; 167
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	11 96       	adiw	r26, 0x01	; 1
    2aca:	9c 93       	st	X, r25
    2acc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e7 5a       	subi	r30, 0xA7	; 167
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	91 81       	ldd	r25, Z+1	; 0x01
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	d1 f6       	brne	.-76     	; 0x2a90 <StartOperation+0x262>
    2adc:	28 c0       	rjmp	.+80     	; 0x2b2e <StartOperation+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ade:	8e 01       	movw	r16, r28
    2ae0:	07 5a       	subi	r16, 0xA7	; 167
    2ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e5 5a       	subi	r30, 0xA5	; 165
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	f8 01       	movw	r30, r16
    2afc:	91 83       	std	Z+1, r25	; 0x01
    2afe:	80 83       	st	Z, r24
    2b00:	de 01       	movw	r26, r28
    2b02:	ab 5a       	subi	r26, 0xAB	; 171
    2b04:	bf 4f       	sbci	r27, 0xFF	; 255
    2b06:	fe 01       	movw	r30, r28
    2b08:	e7 5a       	subi	r30, 0xA7	; 167
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	80 81       	ld	r24, Z
    2b0e:	91 81       	ldd	r25, Z+1	; 0x01
    2b10:	11 96       	adiw	r26, 0x01	; 1
    2b12:	9c 93       	st	X, r25
    2b14:	8e 93       	st	-X, r24
    2b16:	fe 01       	movw	r30, r28
    2b18:	eb 5a       	subi	r30, 0xAB	; 171
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <StartOperation+0x2f2>
    2b24:	fe 01       	movw	r30, r28
    2b26:	eb 5a       	subi	r30, 0xAB	; 171
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	80 83       	st	Z, r24
    _delay_ms(50);

    // loop to read 10 samples (1 per second)
    for(uint8 sec = 1; sec <= 10; sec++)
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ef 58       	subi	r30, 0x8F	; 143
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	80 83       	st	Z, r24
    2b38:	28 c3       	rjmp	.+1616   	; 0x318a <StartOperation+0x95c>
    {
        // receive temperature
        temp = UART_recieveByte();
    2b3a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e9 58       	subi	r30, 0x89	; 137
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	80 83       	st	Z, r24
    2b46:	fe 01       	movw	r30, r28
    2b48:	ef 5a       	subi	r30, 0xAF	; 175
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	a0 e2       	ldi	r26, 0x20	; 32
    2b52:	b1 e4       	ldi	r27, 0x41	; 65
    2b54:	80 83       	st	Z, r24
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	a2 83       	std	Z+2, r26	; 0x02
    2b5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5c:	8e 01       	movw	r16, r28
    2b5e:	03 5b       	subi	r16, 0xB3	; 179
    2b60:	1f 4f       	sbci	r17, 0xFF	; 255
    2b62:	fe 01       	movw	r30, r28
    2b64:	ef 5a       	subi	r30, 0xAF	; 175
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	60 81       	ld	r22, Z
    2b6a:	71 81       	ldd	r23, Z+1	; 0x01
    2b6c:	82 81       	ldd	r24, Z+2	; 0x02
    2b6e:	93 81       	ldd	r25, Z+3	; 0x03
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a ef       	ldi	r20, 0xFA	; 250
    2b76:	54 e4       	ldi	r21, 0x44	; 68
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	f8 01       	movw	r30, r16
    2b82:	80 83       	st	Z, r24
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	a2 83       	std	Z+2, r26	; 0x02
    2b88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e3 5b       	subi	r30, 0xB3	; 179
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	60 81       	ld	r22, Z
    2b92:	71 81       	ldd	r23, Z+1	; 0x01
    2b94:	82 81       	ldd	r24, Z+2	; 0x02
    2b96:	93 81       	ldd	r25, Z+3	; 0x03
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e8       	ldi	r20, 0x80	; 128
    2b9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ba0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba4:	88 23       	and	r24, r24
    2ba6:	44 f4       	brge	.+16     	; 0x2bb8 <StartOperation+0x38a>
		__ticks = 1;
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e5 5b       	subi	r30, 0xB5	; 181
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	80 83       	st	Z, r24
    2bb6:	64 c0       	rjmp	.+200    	; 0x2c80 <StartOperation+0x452>
	else if (__tmp > 65535)
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e3 5b       	subi	r30, 0xB3	; 179
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	60 81       	ld	r22, Z
    2bc0:	71 81       	ldd	r23, Z+1	; 0x01
    2bc2:	82 81       	ldd	r24, Z+2	; 0x02
    2bc4:	93 81       	ldd	r25, Z+3	; 0x03
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	3f ef       	ldi	r19, 0xFF	; 255
    2bca:	4f e7       	ldi	r20, 0x7F	; 127
    2bcc:	57 e4       	ldi	r21, 0x47	; 71
    2bce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bd2:	18 16       	cp	r1, r24
    2bd4:	0c f0       	brlt	.+2      	; 0x2bd8 <StartOperation+0x3aa>
    2bd6:	43 c0       	rjmp	.+134    	; 0x2c5e <StartOperation+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd8:	fe 01       	movw	r30, r28
    2bda:	ef 5a       	subi	r30, 0xAF	; 175
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	60 81       	ld	r22, Z
    2be0:	71 81       	ldd	r23, Z+1	; 0x01
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	8e 01       	movw	r16, r28
    2bf8:	05 5b       	subi	r16, 0xB5	; 181
    2bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	f8 01       	movw	r30, r16
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	80 83       	st	Z, r24
    2c0e:	1f c0       	rjmp	.+62     	; 0x2c4e <StartOperation+0x420>
    2c10:	fe 01       	movw	r30, r28
    2c12:	e7 5b       	subi	r30, 0xB7	; 183
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	88 ec       	ldi	r24, 0xC8	; 200
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	91 83       	std	Z+1, r25	; 0x01
    2c1c:	80 83       	st	Z, r24
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e7 5b       	subi	r30, 0xB7	; 183
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 81       	ld	r24, Z
    2c26:	91 81       	ldd	r25, Z+1	; 0x01
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <StartOperation+0x3fa>
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e7 5b       	subi	r30, 0xB7	; 183
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c36:	de 01       	movw	r26, r28
    2c38:	a5 5b       	subi	r26, 0xB5	; 181
    2c3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e5 5b       	subi	r30, 0xB5	; 181
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	80 81       	ld	r24, Z
    2c44:	91 81       	ldd	r25, Z+1	; 0x01
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	11 96       	adiw	r26, 0x01	; 1
    2c4a:	9c 93       	st	X, r25
    2c4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e5 5b       	subi	r30, 0xB5	; 181
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 81       	ld	r24, Z
    2c56:	91 81       	ldd	r25, Z+1	; 0x01
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	d1 f6       	brne	.-76     	; 0x2c10 <StartOperation+0x3e2>
    2c5c:	27 c0       	rjmp	.+78     	; 0x2cac <StartOperation+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	8e 01       	movw	r16, r28
    2c60:	05 5b       	subi	r16, 0xB5	; 181
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	fe 01       	movw	r30, r28
    2c66:	e3 5b       	subi	r30, 0xB3	; 179
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	f8 01       	movw	r30, r16
    2c7c:	91 83       	std	Z+1, r25	; 0x01
    2c7e:	80 83       	st	Z, r24
    2c80:	de 01       	movw	r26, r28
    2c82:	a9 5b       	subi	r26, 0xB9	; 185
    2c84:	bf 4f       	sbci	r27, 0xFF	; 255
    2c86:	fe 01       	movw	r30, r28
    2c88:	e5 5b       	subi	r30, 0xB5	; 181
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 81       	ld	r24, Z
    2c8e:	91 81       	ldd	r25, Z+1	; 0x01
    2c90:	8d 93       	st	X+, r24
    2c92:	9c 93       	st	X, r25
    2c94:	fe 01       	movw	r30, r28
    2c96:	e9 5b       	subi	r30, 0xB9	; 185
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	f1 f7       	brne	.-4      	; 0x2c9e <StartOperation+0x470>
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e9 5b       	subi	r30, 0xB9	; 185
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	91 83       	std	Z+1, r25	; 0x01
    2caa:	80 83       	st	Z, r24
        _delay_ms(10);

        // receive distance (2 bytes)
        distance_high = UART_recieveByte();
    2cac:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	ea 58       	subi	r30, 0x8A	; 138
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	80 83       	st	Z, r24
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ed 5b       	subi	r30, 0xBD	; 189
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	a0 e2       	ldi	r26, 0x20	; 32
    2cc4:	b1 e4       	ldi	r27, 0x41	; 65
    2cc6:	80 83       	st	Z, r24
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	a2 83       	std	Z+2, r26	; 0x02
    2ccc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cce:	8e 01       	movw	r16, r28
    2cd0:	01 5c       	subi	r16, 0xC1	; 193
    2cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ed 5b       	subi	r30, 0xBD	; 189
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	60 81       	ld	r22, Z
    2cdc:	71 81       	ldd	r23, Z+1	; 0x01
    2cde:	82 81       	ldd	r24, Z+2	; 0x02
    2ce0:	93 81       	ldd	r25, Z+3	; 0x03
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	4a ef       	ldi	r20, 0xFA	; 250
    2ce8:	54 e4       	ldi	r21, 0x44	; 68
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	f8 01       	movw	r30, r16
    2cf4:	80 83       	st	Z, r24
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	a2 83       	std	Z+2, r26	; 0x02
    2cfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	ff 96       	adiw	r30, 0x3f	; 63
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	2c f4       	brge	.+10     	; 0x2d22 <StartOperation+0x4f4>
		__ticks = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9e af       	std	Y+62, r25	; 0x3e
    2d1e:	8d af       	std	Y+61, r24	; 0x3d
    2d20:	46 c0       	rjmp	.+140    	; 0x2dae <StartOperation+0x580>
	else if (__tmp > 65535)
    2d22:	fe 01       	movw	r30, r28
    2d24:	ff 96       	adiw	r30, 0x3f	; 63
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	64 f5       	brge	.+88     	; 0x2d96 <StartOperation+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	fe 01       	movw	r30, r28
    2d40:	ed 5b       	subi	r30, 0xBD	; 189
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e2       	ldi	r20, 0x20	; 32
    2d52:	51 e4       	ldi	r21, 0x41	; 65
    2d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9e af       	std	Y+62, r25	; 0x3e
    2d6a:	8d af       	std	Y+61, r24	; 0x3d
    2d6c:	0f c0       	rjmp	.+30     	; 0x2d8c <StartOperation+0x55e>
    2d6e:	88 ec       	ldi	r24, 0xC8	; 200
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	9c af       	std	Y+60, r25	; 0x3c
    2d74:	8b af       	std	Y+59, r24	; 0x3b
    2d76:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d78:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <StartOperation+0x54c>
    2d7e:	9c af       	std	Y+60, r25	; 0x3c
    2d80:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d82:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d84:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	9e af       	std	Y+62, r25	; 0x3e
    2d8a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	69 f7       	brne	.-38     	; 0x2d6e <StartOperation+0x540>
    2d94:	16 c0       	rjmp	.+44     	; 0x2dc2 <StartOperation+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d96:	fe 01       	movw	r30, r28
    2d98:	ff 96       	adiw	r30, 0x3f	; 63
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9e af       	std	Y+62, r25	; 0x3e
    2dac:	8d af       	std	Y+61, r24	; 0x3d
    2dae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2db0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2db2:	9a af       	std	Y+58, r25	; 0x3a
    2db4:	89 af       	std	Y+57, r24	; 0x39
    2db6:	89 ad       	ldd	r24, Y+57	; 0x39
    2db8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <StartOperation+0x58c>
    2dbe:	9a af       	std	Y+58, r25	; 0x3a
    2dc0:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(10);
        distance_low = UART_recieveByte();
    2dc2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	eb 58       	subi	r30, 0x8B	; 139
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 83       	st	Z, r24
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	a0 e2       	ldi	r26, 0x20	; 32
    2dd4:	b1 e4       	ldi	r27, 0x41	; 65
    2dd6:	8d ab       	std	Y+53, r24	; 0x35
    2dd8:	9e ab       	std	Y+54, r25	; 0x36
    2dda:	af ab       	std	Y+55, r26	; 0x37
    2ddc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dde:	6d a9       	ldd	r22, Y+53	; 0x35
    2de0:	7e a9       	ldd	r23, Y+54	; 0x36
    2de2:	8f a9       	ldd	r24, Y+55	; 0x37
    2de4:	98 ad       	ldd	r25, Y+56	; 0x38
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	4a ef       	ldi	r20, 0xFA	; 250
    2dec:	54 e4       	ldi	r21, 0x44	; 68
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	89 ab       	std	Y+49, r24	; 0x31
    2df8:	9a ab       	std	Y+50, r25	; 0x32
    2dfa:	ab ab       	std	Y+51, r26	; 0x33
    2dfc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dfe:	69 a9       	ldd	r22, Y+49	; 0x31
    2e00:	7a a9       	ldd	r23, Y+50	; 0x32
    2e02:	8b a9       	ldd	r24, Y+51	; 0x33
    2e04:	9c a9       	ldd	r25, Y+52	; 0x34
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e8       	ldi	r20, 0x80	; 128
    2e0c:	5f e3       	ldi	r21, 0x3F	; 63
    2e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e12:	88 23       	and	r24, r24
    2e14:	2c f4       	brge	.+10     	; 0x2e20 <StartOperation+0x5f2>
		__ticks = 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	98 ab       	std	Y+48, r25	; 0x30
    2e1c:	8f a7       	std	Y+47, r24	; 0x2f
    2e1e:	3f c0       	rjmp	.+126    	; 0x2e9e <StartOperation+0x670>
	else if (__tmp > 65535)
    2e20:	69 a9       	ldd	r22, Y+49	; 0x31
    2e22:	7a a9       	ldd	r23, Y+50	; 0x32
    2e24:	8b a9       	ldd	r24, Y+51	; 0x33
    2e26:	9c a9       	ldd	r25, Y+52	; 0x34
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	3f ef       	ldi	r19, 0xFF	; 255
    2e2c:	4f e7       	ldi	r20, 0x7F	; 127
    2e2e:	57 e4       	ldi	r21, 0x47	; 71
    2e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e34:	18 16       	cp	r1, r24
    2e36:	4c f5       	brge	.+82     	; 0x2e8a <StartOperation+0x65c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e38:	6d a9       	ldd	r22, Y+53	; 0x35
    2e3a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e3c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e3e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e2       	ldi	r20, 0x20	; 32
    2e46:	51 e4       	ldi	r21, 0x41	; 65
    2e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	98 ab       	std	Y+48, r25	; 0x30
    2e5e:	8f a7       	std	Y+47, r24	; 0x2f
    2e60:	0f c0       	rjmp	.+30     	; 0x2e80 <StartOperation+0x652>
    2e62:	88 ec       	ldi	r24, 0xC8	; 200
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	9e a7       	std	Y+46, r25	; 0x2e
    2e68:	8d a7       	std	Y+45, r24	; 0x2d
    2e6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <StartOperation+0x640>
    2e72:	9e a7       	std	Y+46, r25	; 0x2e
    2e74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e78:	98 a9       	ldd	r25, Y+48	; 0x30
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	98 ab       	std	Y+48, r25	; 0x30
    2e7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e80:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e82:	98 a9       	ldd	r25, Y+48	; 0x30
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	69 f7       	brne	.-38     	; 0x2e62 <StartOperation+0x634>
    2e88:	14 c0       	rjmp	.+40     	; 0x2eb2 <StartOperation+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e90:	9c a9       	ldd	r25, Y+52	; 0x34
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	98 ab       	std	Y+48, r25	; 0x30
    2e9c:	8f a7       	std	Y+47, r24	; 0x2f
    2e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ea2:	9c a7       	std	Y+44, r25	; 0x2c
    2ea4:	8b a7       	std	Y+43, r24	; 0x2b
    2ea6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ea8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <StartOperation+0x67c>
    2eae:	9c a7       	std	Y+44, r25	; 0x2c
    2eb0:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(10);
        distance = ((uint16)distance_high << 8) | distance_low;
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	ea 58       	subi	r30, 0x8A	; 138
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 81       	ld	r24, Z
    2eba:	88 2f       	mov	r24, r24
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	38 2f       	mov	r19, r24
    2ec0:	22 27       	eor	r18, r18
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	eb 58       	subi	r30, 0x8B	; 139
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	88 2f       	mov	r24, r24
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	fe 01       	movw	r30, r28
    2ed0:	ed 58       	subi	r30, 0x8D	; 141
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	82 2b       	or	r24, r18
    2ed6:	93 2b       	or	r25, r19
    2ed8:	91 83       	std	Z+1, r25	; 0x01
    2eda:	80 83       	st	Z, r24

        // receive window states
        window_states = UART_recieveByte();
    2edc:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	ee 58       	subi	r30, 0x8E	; 142
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 83       	st	Z, r24
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	a0 e2       	ldi	r26, 0x20	; 32
    2eee:	b1 e4       	ldi	r27, 0x41	; 65
    2ef0:	8f a3       	std	Y+39, r24	; 0x27
    2ef2:	98 a7       	std	Y+40, r25	; 0x28
    2ef4:	a9 a7       	std	Y+41, r26	; 0x29
    2ef6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef8:	6f a1       	ldd	r22, Y+39	; 0x27
    2efa:	78 a5       	ldd	r23, Y+40	; 0x28
    2efc:	89 a5       	ldd	r24, Y+41	; 0x29
    2efe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	4a ef       	ldi	r20, 0xFA	; 250
    2f06:	54 e4       	ldi	r21, 0x44	; 68
    2f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	8b a3       	std	Y+35, r24	; 0x23
    2f12:	9c a3       	std	Y+36, r25	; 0x24
    2f14:	ad a3       	std	Y+37, r26	; 0x25
    2f16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f18:	6b a1       	ldd	r22, Y+35	; 0x23
    2f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	40 e8       	ldi	r20, 0x80	; 128
    2f26:	5f e3       	ldi	r21, 0x3F	; 63
    2f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2c:	88 23       	and	r24, r24
    2f2e:	2c f4       	brge	.+10     	; 0x2f3a <StartOperation+0x70c>
		__ticks = 1;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9a a3       	std	Y+34, r25	; 0x22
    2f36:	89 a3       	std	Y+33, r24	; 0x21
    2f38:	3f c0       	rjmp	.+126    	; 0x2fb8 <StartOperation+0x78a>
	else if (__tmp > 65535)
    2f3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f40:	9e a1       	ldd	r25, Y+38	; 0x26
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	3f ef       	ldi	r19, 0xFF	; 255
    2f46:	4f e7       	ldi	r20, 0x7F	; 127
    2f48:	57 e4       	ldi	r21, 0x47	; 71
    2f4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f4e:	18 16       	cp	r1, r24
    2f50:	4c f5       	brge	.+82     	; 0x2fa4 <StartOperation+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f52:	6f a1       	ldd	r22, Y+39	; 0x27
    2f54:	78 a5       	ldd	r23, Y+40	; 0x28
    2f56:	89 a5       	ldd	r24, Y+41	; 0x29
    2f58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e2       	ldi	r20, 0x20	; 32
    2f60:	51 e4       	ldi	r21, 0x41	; 65
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	bc 01       	movw	r22, r24
    2f6c:	cd 01       	movw	r24, r26
    2f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	9a a3       	std	Y+34, r25	; 0x22
    2f78:	89 a3       	std	Y+33, r24	; 0x21
    2f7a:	0f c0       	rjmp	.+30     	; 0x2f9a <StartOperation+0x76c>
    2f7c:	88 ec       	ldi	r24, 0xC8	; 200
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	98 a3       	std	Y+32, r25	; 0x20
    2f82:	8f 8f       	std	Y+31, r24	; 0x1f
    2f84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f86:	98 a1       	ldd	r25, Y+32	; 0x20
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <StartOperation+0x75a>
    2f8c:	98 a3       	std	Y+32, r25	; 0x20
    2f8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f90:	89 a1       	ldd	r24, Y+33	; 0x21
    2f92:	9a a1       	ldd	r25, Y+34	; 0x22
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	9a a3       	std	Y+34, r25	; 0x22
    2f98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	69 f7       	brne	.-38     	; 0x2f7c <StartOperation+0x74e>
    2fa2:	14 c0       	rjmp	.+40     	; 0x2fcc <StartOperation+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    2faa:	9e a1       	ldd	r25, Y+38	; 0x26
    2fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	9a a3       	std	Y+34, r25	; 0x22
    2fb6:	89 a3       	std	Y+33, r24	; 0x21
    2fb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fba:	9a a1       	ldd	r25, Y+34	; 0x22
    2fbc:	9e 8f       	std	Y+30, r25	; 0x1e
    2fbe:	8d 8f       	std	Y+29, r24	; 0x1d
    2fc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <StartOperation+0x796>
    2fc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2fca:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(10);

        // show everything on LCD
        LCD_clearScreen();
    2fcc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
        LCD_displayString("Sec:");
    2fd0:	80 ea       	ldi	r24, 0xA0	; 160
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
        LCD_intgerToString(sec);
    2fd8:	fe 01       	movw	r30, r28
    2fda:	ef 58       	subi	r30, 0x8F	; 143
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	88 2f       	mov	r24, r24
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_intgerToString>
        LCD_displayString("/10");
    2fe8:	85 ea       	ldi	r24, 0xA5	; 165
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>

        LCD_displayStringRowColumn(1, 0, "T:");
    2ff0:	29 ea       	ldi	r18, 0xA9	; 169
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	60 e0       	ldi	r22, 0x00	; 0
    2ff8:	a9 01       	movw	r20, r18
    2ffa:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
        LCD_intgerToString(temp);
    2ffe:	fe 01       	movw	r30, r28
    3000:	e9 58       	subi	r30, 0x89	; 137
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	80 81       	ld	r24, Z
    3006:	88 2f       	mov	r24, r24
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_intgerToString>
        LCD_displayString("C D:");
    300e:	8c ea       	ldi	r24, 0xAC	; 172
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
        LCD_intgerToString(distance);
    3016:	fe 01       	movw	r30, r28
    3018:	ed 58       	subi	r30, 0x8D	; 141
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_intgerToString>
        LCD_displayString("cm");
    3024:	81 eb       	ldi	r24, 0xB1	; 177
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>

        // check window 1 status
        LCD_displayStringRowColumn(2, 0, "W1:");
    302c:	24 eb       	ldi	r18, 0xB4	; 180
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	82 e0       	ldi	r24, 0x02	; 2
    3032:	60 e0       	ldi	r22, 0x00	; 0
    3034:	a9 01       	movw	r20, r18
    3036:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
        if(window_states & 0x01)
    303a:	fe 01       	movw	r30, r28
    303c:	ee 58       	subi	r30, 0x8E	; 142
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	80 81       	ld	r24, Z
    3042:	88 2f       	mov	r24, r24
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	81 70       	andi	r24, 0x01	; 1
    3048:	90 70       	andi	r25, 0x00	; 0
    304a:	88 23       	and	r24, r24
    304c:	29 f0       	breq	.+10     	; 0x3058 <StartOperation+0x82a>
            LCD_displayString("Open ");
    304e:	88 eb       	ldi	r24, 0xB8	; 184
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    3056:	04 c0       	rjmp	.+8      	; 0x3060 <StartOperation+0x832>
        else
            LCD_displayString("Close");
    3058:	8e eb       	ldi	r24, 0xBE	; 190
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>

        // check window 2 status
        LCD_displayStringRowColumn(3, 0, "W2:");
    3060:	24 ec       	ldi	r18, 0xC4	; 196
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	83 e0       	ldi	r24, 0x03	; 3
    3066:	60 e0       	ldi	r22, 0x00	; 0
    3068:	a9 01       	movw	r20, r18
    306a:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
        if(window_states & 0x02)
    306e:	fe 01       	movw	r30, r28
    3070:	ee 58       	subi	r30, 0x8E	; 142
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 81       	ld	r24, Z
    3076:	88 2f       	mov	r24, r24
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	82 70       	andi	r24, 0x02	; 2
    307c:	90 70       	andi	r25, 0x00	; 0
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	29 f0       	breq	.+10     	; 0x308c <StartOperation+0x85e>
            LCD_displayString("Open ");
    3082:	88 eb       	ldi	r24, 0xB8	; 184
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    308a:	04 c0       	rjmp	.+8      	; 0x3094 <StartOperation+0x866>
        else
            LCD_displayString("Close");
    308c:	8e eb       	ldi	r24, 0xBE	; 190
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	a8 e4       	ldi	r26, 0x48	; 72
    309a:	b2 e4       	ldi	r27, 0x42	; 66
    309c:	89 8f       	std	Y+25, r24	; 0x19
    309e:	9a 8f       	std	Y+26, r25	; 0x1a
    30a0:	ab 8f       	std	Y+27, r26	; 0x1b
    30a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a4:	69 8d       	ldd	r22, Y+25	; 0x19
    30a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	4a ef       	ldi	r20, 0xFA	; 250
    30b2:	54 e4       	ldi	r21, 0x44	; 68
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	8d 8b       	std	Y+21, r24	; 0x15
    30be:	9e 8b       	std	Y+22, r25	; 0x16
    30c0:	af 8b       	std	Y+23, r26	; 0x17
    30c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30c4:	6d 89       	ldd	r22, Y+21	; 0x15
    30c6:	7e 89       	ldd	r23, Y+22	; 0x16
    30c8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ca:	98 8d       	ldd	r25, Y+24	; 0x18
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	2c f4       	brge	.+10     	; 0x30e6 <StartOperation+0x8b8>
		__ticks = 1;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9c 8b       	std	Y+20, r25	; 0x14
    30e2:	8b 8b       	std	Y+19, r24	; 0x13
    30e4:	3f c0       	rjmp	.+126    	; 0x3164 <StartOperation+0x936>
	else if (__tmp > 65535)
    30e6:	6d 89       	ldd	r22, Y+21	; 0x15
    30e8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ea:	8f 89       	ldd	r24, Y+23	; 0x17
    30ec:	98 8d       	ldd	r25, Y+24	; 0x18
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	3f ef       	ldi	r19, 0xFF	; 255
    30f2:	4f e7       	ldi	r20, 0x7F	; 127
    30f4:	57 e4       	ldi	r21, 0x47	; 71
    30f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fa:	18 16       	cp	r1, r24
    30fc:	4c f5       	brge	.+82     	; 0x3150 <StartOperation+0x922>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e2       	ldi	r20, 0x20	; 32
    310c:	51 e4       	ldi	r21, 0x41	; 65
    310e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	bc 01       	movw	r22, r24
    3118:	cd 01       	movw	r24, r26
    311a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	9c 8b       	std	Y+20, r25	; 0x14
    3124:	8b 8b       	std	Y+19, r24	; 0x13
    3126:	0f c0       	rjmp	.+30     	; 0x3146 <StartOperation+0x918>
    3128:	88 ec       	ldi	r24, 0xC8	; 200
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	9a 8b       	std	Y+18, r25	; 0x12
    312e:	89 8b       	std	Y+17, r24	; 0x11
    3130:	89 89       	ldd	r24, Y+17	; 0x11
    3132:	9a 89       	ldd	r25, Y+18	; 0x12
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <StartOperation+0x906>
    3138:	9a 8b       	std	Y+18, r25	; 0x12
    313a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313c:	8b 89       	ldd	r24, Y+19	; 0x13
    313e:	9c 89       	ldd	r25, Y+20	; 0x14
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	9c 8b       	std	Y+20, r25	; 0x14
    3144:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3146:	8b 89       	ldd	r24, Y+19	; 0x13
    3148:	9c 89       	ldd	r25, Y+20	; 0x14
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	69 f7       	brne	.-38     	; 0x3128 <StartOperation+0x8fa>
    314e:	14 c0       	rjmp	.+40     	; 0x3178 <StartOperation+0x94a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3150:	6d 89       	ldd	r22, Y+21	; 0x15
    3152:	7e 89       	ldd	r23, Y+22	; 0x16
    3154:	8f 89       	ldd	r24, Y+23	; 0x17
    3156:	98 8d       	ldd	r25, Y+24	; 0x18
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	9c 8b       	std	Y+20, r25	; 0x14
    3162:	8b 8b       	std	Y+19, r24	; 0x13
    3164:	8b 89       	ldd	r24, Y+19	; 0x13
    3166:	9c 89       	ldd	r25, Y+20	; 0x14
    3168:	98 8b       	std	Y+16, r25	; 0x10
    316a:	8f 87       	std	Y+15, r24	; 0x0f
    316c:	8f 85       	ldd	r24, Y+15	; 0x0f
    316e:	98 89       	ldd	r25, Y+16	; 0x10
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <StartOperation+0x942>
    3174:	98 8b       	std	Y+16, r25	; 0x10
    3176:	8f 87       	std	Y+15, r24	; 0x0f
    // tell Control ECU to start monitoring
    UART_sendByte(START_OPERATION);
    _delay_ms(50);

    // loop to read 10 samples (1 per second)
    for(uint8 sec = 1; sec <= 10; sec++)
    3178:	de 01       	movw	r26, r28
    317a:	af 58       	subi	r26, 0x8F	; 143
    317c:	bf 4f       	sbci	r27, 0xFF	; 255
    317e:	fe 01       	movw	r30, r28
    3180:	ef 58       	subi	r30, 0x8F	; 143
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	80 81       	ld	r24, Z
    3186:	8f 5f       	subi	r24, 0xFF	; 255
    3188:	8c 93       	st	X, r24
    318a:	fe 01       	movw	r30, r28
    318c:	ef 58       	subi	r30, 0x8F	; 143
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	80 81       	ld	r24, Z
    3192:	8b 30       	cpi	r24, 0x0B	; 11
    3194:	08 f4       	brcc	.+2      	; 0x3198 <StartOperation+0x96a>
    3196:	d1 cc       	rjmp	.-1630   	; 0x2b3a <StartOperation+0x30c>
            LCD_displayString("Close");

        _delay_ms(50);
    }

    LCD_clearScreen();
    3198:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
    LCD_displayString("Completed!");
    319c:	88 ec       	ldi	r24, 0xC8	; 200
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	aa ef       	ldi	r26, 0xFA	; 250
    31aa:	b4 e4       	ldi	r27, 0x44	; 68
    31ac:	8b 87       	std	Y+11, r24	; 0x0b
    31ae:	9c 87       	std	Y+12, r25	; 0x0c
    31b0:	ad 87       	std	Y+13, r26	; 0x0d
    31b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	4a ef       	ldi	r20, 0xFA	; 250
    31c2:	54 e4       	ldi	r21, 0x44	; 68
    31c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	8f 83       	std	Y+7, r24	; 0x07
    31ce:	98 87       	std	Y+8, r25	; 0x08
    31d0:	a9 87       	std	Y+9, r26	; 0x09
    31d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31d4:	6f 81       	ldd	r22, Y+7	; 0x07
    31d6:	78 85       	ldd	r23, Y+8	; 0x08
    31d8:	89 85       	ldd	r24, Y+9	; 0x09
    31da:	9a 85       	ldd	r25, Y+10	; 0x0a
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e8       	ldi	r20, 0x80	; 128
    31e2:	5f e3       	ldi	r21, 0x3F	; 63
    31e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31e8:	88 23       	and	r24, r24
    31ea:	2c f4       	brge	.+10     	; 0x31f6 <StartOperation+0x9c8>
		__ticks = 1;
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	8d 83       	std	Y+5, r24	; 0x05
    31f4:	3f c0       	rjmp	.+126    	; 0x3274 <StartOperation+0xa46>
	else if (__tmp > 65535)
    31f6:	6f 81       	ldd	r22, Y+7	; 0x07
    31f8:	78 85       	ldd	r23, Y+8	; 0x08
    31fa:	89 85       	ldd	r24, Y+9	; 0x09
    31fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	3f ef       	ldi	r19, 0xFF	; 255
    3202:	4f e7       	ldi	r20, 0x7F	; 127
    3204:	57 e4       	ldi	r21, 0x47	; 71
    3206:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    320a:	18 16       	cp	r1, r24
    320c:	4c f5       	brge	.+82     	; 0x3260 <StartOperation+0xa32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    320e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3210:	7c 85       	ldd	r23, Y+12	; 0x0c
    3212:	8d 85       	ldd	r24, Y+13	; 0x0d
    3214:	9e 85       	ldd	r25, Y+14	; 0x0e
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	40 e2       	ldi	r20, 0x20	; 32
    321c:	51 e4       	ldi	r21, 0x41	; 65
    321e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	9e 83       	std	Y+6, r25	; 0x06
    3234:	8d 83       	std	Y+5, r24	; 0x05
    3236:	0f c0       	rjmp	.+30     	; 0x3256 <StartOperation+0xa28>
    3238:	88 ec       	ldi	r24, 0xC8	; 200
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	9c 83       	std	Y+4, r25	; 0x04
    323e:	8b 83       	std	Y+3, r24	; 0x03
    3240:	8b 81       	ldd	r24, Y+3	; 0x03
    3242:	9c 81       	ldd	r25, Y+4	; 0x04
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <StartOperation+0xa16>
    3248:	9c 83       	std	Y+4, r25	; 0x04
    324a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324c:	8d 81       	ldd	r24, Y+5	; 0x05
    324e:	9e 81       	ldd	r25, Y+6	; 0x06
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	9e 83       	std	Y+6, r25	; 0x06
    3254:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3256:	8d 81       	ldd	r24, Y+5	; 0x05
    3258:	9e 81       	ldd	r25, Y+6	; 0x06
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	69 f7       	brne	.-38     	; 0x3238 <StartOperation+0xa0a>
    325e:	14 c0       	rjmp	.+40     	; 0x3288 <StartOperation+0xa5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3260:	6f 81       	ldd	r22, Y+7	; 0x07
    3262:	78 85       	ldd	r23, Y+8	; 0x08
    3264:	89 85       	ldd	r24, Y+9	; 0x09
    3266:	9a 85       	ldd	r25, Y+10	; 0x0a
    3268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9e 83       	std	Y+6, r25	; 0x06
    3272:	8d 83       	std	Y+5, r24	; 0x05
    3274:	8d 81       	ldd	r24, Y+5	; 0x05
    3276:	9e 81       	ldd	r25, Y+6	; 0x06
    3278:	9a 83       	std	Y+2, r25	; 0x02
    327a:	89 83       	std	Y+1, r24	; 0x01
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	9a 81       	ldd	r25, Y+2	; 0x02
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <StartOperation+0xa52>
    3284:	9a 83       	std	Y+2, r25	; 0x02
    3286:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2000);
}
    3288:	c9 58       	subi	r28, 0x89	; 137
    328a:	df 4f       	sbci	r29, 0xFF	; 255
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	08 95       	ret

000032a0 <DisplayValues>:

void DisplayValues(void)
{
    32a0:	0f 93       	push	r16
    32a2:	1f 93       	push	r17
    32a4:	df 93       	push	r29
    32a6:	cf 93       	push	r28
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	c6 57       	subi	r28, 0x76	; 118
    32ae:	d0 40       	sbci	r29, 0x00	; 0
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    uint8 temp, distance_high, distance_low;
    uint16 distance;
    uint8 window_states;

    // if system not active, tell user
    if(g_monitoring_active == 0)
    32ba:	80 91 92 01 	lds	r24, 0x0192
    32be:	88 23       	and	r24, r24
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <DisplayValues+0x24>
    32c2:	c2 c0       	rjmp	.+388    	; 0x3448 <DisplayValues+0x1a8>
    {
        LCD_clearScreen();
    32c4:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
        LCD_displayString("Start system");
    32c8:	83 ed       	ldi	r24, 0xD3	; 211
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
        LCD_displayStringRowColumn(1, 0, "first!");
    32d0:	20 ee       	ldi	r18, 0xE0	; 224
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	60 e0       	ldi	r22, 0x00	; 0
    32d8:	a9 01       	movw	r20, r18
    32da:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
    32de:	fe 01       	movw	r30, r28
    32e0:	e3 59       	subi	r30, 0x93	; 147
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e8       	ldi	r25, 0x80	; 128
    32e8:	ab e3       	ldi	r26, 0x3B	; 59
    32ea:	b5 e4       	ldi	r27, 0x45	; 69
    32ec:	80 83       	st	Z, r24
    32ee:	91 83       	std	Z+1, r25	; 0x01
    32f0:	a2 83       	std	Z+2, r26	; 0x02
    32f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f4:	8e 01       	movw	r16, r28
    32f6:	07 59       	subi	r16, 0x97	; 151
    32f8:	1f 4f       	sbci	r17, 0xFF	; 255
    32fa:	fe 01       	movw	r30, r28
    32fc:	e3 59       	subi	r30, 0x93	; 147
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	60 81       	ld	r22, Z
    3302:	71 81       	ldd	r23, Z+1	; 0x01
    3304:	82 81       	ldd	r24, Z+2	; 0x02
    3306:	93 81       	ldd	r25, Z+3	; 0x03
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	4a ef       	ldi	r20, 0xFA	; 250
    330e:	54 e4       	ldi	r21, 0x44	; 68
    3310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	f8 01       	movw	r30, r16
    331a:	80 83       	st	Z, r24
    331c:	91 83       	std	Z+1, r25	; 0x01
    331e:	a2 83       	std	Z+2, r26	; 0x02
    3320:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3322:	fe 01       	movw	r30, r28
    3324:	e7 59       	subi	r30, 0x97	; 151
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	60 81       	ld	r22, Z
    332a:	71 81       	ldd	r23, Z+1	; 0x01
    332c:	82 81       	ldd	r24, Z+2	; 0x02
    332e:	93 81       	ldd	r25, Z+3	; 0x03
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	40 e8       	ldi	r20, 0x80	; 128
    3336:	5f e3       	ldi	r21, 0x3F	; 63
    3338:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    333c:	88 23       	and	r24, r24
    333e:	44 f4       	brge	.+16     	; 0x3350 <DisplayValues+0xb0>
		__ticks = 1;
    3340:	fe 01       	movw	r30, r28
    3342:	e9 59       	subi	r30, 0x99	; 153
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	91 83       	std	Z+1, r25	; 0x01
    334c:	80 83       	st	Z, r24
    334e:	64 c0       	rjmp	.+200    	; 0x3418 <DisplayValues+0x178>
	else if (__tmp > 65535)
    3350:	fe 01       	movw	r30, r28
    3352:	e7 59       	subi	r30, 0x97	; 151
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	60 81       	ld	r22, Z
    3358:	71 81       	ldd	r23, Z+1	; 0x01
    335a:	82 81       	ldd	r24, Z+2	; 0x02
    335c:	93 81       	ldd	r25, Z+3	; 0x03
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	3f ef       	ldi	r19, 0xFF	; 255
    3362:	4f e7       	ldi	r20, 0x7F	; 127
    3364:	57 e4       	ldi	r21, 0x47	; 71
    3366:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    336a:	18 16       	cp	r1, r24
    336c:	0c f0       	brlt	.+2      	; 0x3370 <DisplayValues+0xd0>
    336e:	43 c0       	rjmp	.+134    	; 0x33f6 <DisplayValues+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3370:	fe 01       	movw	r30, r28
    3372:	e3 59       	subi	r30, 0x93	; 147
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	60 81       	ld	r22, Z
    3378:	71 81       	ldd	r23, Z+1	; 0x01
    337a:	82 81       	ldd	r24, Z+2	; 0x02
    337c:	93 81       	ldd	r25, Z+3	; 0x03
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e2       	ldi	r20, 0x20	; 32
    3384:	51 e4       	ldi	r21, 0x41	; 65
    3386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	8e 01       	movw	r16, r28
    3390:	09 59       	subi	r16, 0x99	; 153
    3392:	1f 4f       	sbci	r17, 0xFF	; 255
    3394:	bc 01       	movw	r22, r24
    3396:	cd 01       	movw	r24, r26
    3398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	f8 01       	movw	r30, r16
    33a2:	91 83       	std	Z+1, r25	; 0x01
    33a4:	80 83       	st	Z, r24
    33a6:	1f c0       	rjmp	.+62     	; 0x33e6 <DisplayValues+0x146>
    33a8:	fe 01       	movw	r30, r28
    33aa:	eb 59       	subi	r30, 0x9B	; 155
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	88 ec       	ldi	r24, 0xC8	; 200
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	80 83       	st	Z, r24
    33b6:	fe 01       	movw	r30, r28
    33b8:	eb 59       	subi	r30, 0x9B	; 155
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	80 81       	ld	r24, Z
    33be:	91 81       	ldd	r25, Z+1	; 0x01
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <DisplayValues+0x120>
    33c4:	fe 01       	movw	r30, r28
    33c6:	eb 59       	subi	r30, 0x9B	; 155
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	91 83       	std	Z+1, r25	; 0x01
    33cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ce:	de 01       	movw	r26, r28
    33d0:	a9 59       	subi	r26, 0x99	; 153
    33d2:	bf 4f       	sbci	r27, 0xFF	; 255
    33d4:	fe 01       	movw	r30, r28
    33d6:	e9 59       	subi	r30, 0x99	; 153
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	80 81       	ld	r24, Z
    33dc:	91 81       	ldd	r25, Z+1	; 0x01
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	11 96       	adiw	r26, 0x01	; 1
    33e2:	9c 93       	st	X, r25
    33e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e6:	fe 01       	movw	r30, r28
    33e8:	e9 59       	subi	r30, 0x99	; 153
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	00 97       	sbiw	r24, 0x00	; 0
    33f2:	d1 f6       	brne	.-76     	; 0x33a8 <DisplayValues+0x108>
    33f4:	69 c4       	rjmp	.+2258   	; 0x3cc8 <DisplayValues+0xa28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f6:	8e 01       	movw	r16, r28
    33f8:	09 59       	subi	r16, 0x99	; 153
    33fa:	1f 4f       	sbci	r17, 0xFF	; 255
    33fc:	fe 01       	movw	r30, r28
    33fe:	e7 59       	subi	r30, 0x97	; 151
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	60 81       	ld	r22, Z
    3404:	71 81       	ldd	r23, Z+1	; 0x01
    3406:	82 81       	ldd	r24, Z+2	; 0x02
    3408:	93 81       	ldd	r25, Z+3	; 0x03
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	f8 01       	movw	r30, r16
    3414:	91 83       	std	Z+1, r25	; 0x01
    3416:	80 83       	st	Z, r24
    3418:	de 01       	movw	r26, r28
    341a:	ad 59       	subi	r26, 0x9D	; 157
    341c:	bf 4f       	sbci	r27, 0xFF	; 255
    341e:	fe 01       	movw	r30, r28
    3420:	e9 59       	subi	r30, 0x99	; 153
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	80 81       	ld	r24, Z
    3426:	91 81       	ldd	r25, Z+1	; 0x01
    3428:	11 96       	adiw	r26, 0x01	; 1
    342a:	9c 93       	st	X, r25
    342c:	8e 93       	st	-X, r24
    342e:	fe 01       	movw	r30, r28
    3430:	ed 59       	subi	r30, 0x9D	; 157
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	80 81       	ld	r24, Z
    3436:	91 81       	ldd	r25, Z+1	; 0x01
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <DisplayValues+0x198>
    343c:	fe 01       	movw	r30, r28
    343e:	ed 59       	subi	r30, 0x9D	; 157
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	80 83       	st	Z, r24
    3446:	40 c4       	rjmp	.+2176   	; 0x3cc8 <DisplayValues+0xa28>
        _delay_ms(3000);
        return;
    }

    LCD_clearScreen();
    3448:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
    LCD_displayString("Reading...");
    344c:	87 ee       	ldi	r24, 0xE7	; 231
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    3454:	fe 01       	movw	r30, r28
    3456:	e1 5a       	subi	r30, 0xA1	; 161
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	a6 e9       	ldi	r26, 0x96	; 150
    3460:	b3 e4       	ldi	r27, 0x43	; 67
    3462:	80 83       	st	Z, r24
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	a2 83       	std	Z+2, r26	; 0x02
    3468:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346a:	8e 01       	movw	r16, r28
    346c:	05 5a       	subi	r16, 0xA5	; 165
    346e:	1f 4f       	sbci	r17, 0xFF	; 255
    3470:	fe 01       	movw	r30, r28
    3472:	e1 5a       	subi	r30, 0xA1	; 161
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	60 81       	ld	r22, Z
    3478:	71 81       	ldd	r23, Z+1	; 0x01
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	93 81       	ldd	r25, Z+3	; 0x03
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	4a ef       	ldi	r20, 0xFA	; 250
    3484:	54 e4       	ldi	r21, 0x44	; 68
    3486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	f8 01       	movw	r30, r16
    3490:	80 83       	st	Z, r24
    3492:	91 83       	std	Z+1, r25	; 0x01
    3494:	a2 83       	std	Z+2, r26	; 0x02
    3496:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3498:	fe 01       	movw	r30, r28
    349a:	e5 5a       	subi	r30, 0xA5	; 165
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	60 81       	ld	r22, Z
    34a0:	71 81       	ldd	r23, Z+1	; 0x01
    34a2:	82 81       	ldd	r24, Z+2	; 0x02
    34a4:	93 81       	ldd	r25, Z+3	; 0x03
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e8       	ldi	r20, 0x80	; 128
    34ac:	5f e3       	ldi	r21, 0x3F	; 63
    34ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34b2:	88 23       	and	r24, r24
    34b4:	44 f4       	brge	.+16     	; 0x34c6 <DisplayValues+0x226>
		__ticks = 1;
    34b6:	fe 01       	movw	r30, r28
    34b8:	e7 5a       	subi	r30, 0xA7	; 167
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	91 83       	std	Z+1, r25	; 0x01
    34c2:	80 83       	st	Z, r24
    34c4:	64 c0       	rjmp	.+200    	; 0x358e <DisplayValues+0x2ee>
	else if (__tmp > 65535)
    34c6:	fe 01       	movw	r30, r28
    34c8:	e5 5a       	subi	r30, 0xA5	; 165
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	60 81       	ld	r22, Z
    34ce:	71 81       	ldd	r23, Z+1	; 0x01
    34d0:	82 81       	ldd	r24, Z+2	; 0x02
    34d2:	93 81       	ldd	r25, Z+3	; 0x03
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	3f ef       	ldi	r19, 0xFF	; 255
    34d8:	4f e7       	ldi	r20, 0x7F	; 127
    34da:	57 e4       	ldi	r21, 0x47	; 71
    34dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e0:	18 16       	cp	r1, r24
    34e2:	0c f0       	brlt	.+2      	; 0x34e6 <DisplayValues+0x246>
    34e4:	43 c0       	rjmp	.+134    	; 0x356c <DisplayValues+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	fe 01       	movw	r30, r28
    34e8:	e1 5a       	subi	r30, 0xA1	; 161
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	60 81       	ld	r22, Z
    34ee:	71 81       	ldd	r23, Z+1	; 0x01
    34f0:	82 81       	ldd	r24, Z+2	; 0x02
    34f2:	93 81       	ldd	r25, Z+3	; 0x03
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e2       	ldi	r20, 0x20	; 32
    34fa:	51 e4       	ldi	r21, 0x41	; 65
    34fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	8e 01       	movw	r16, r28
    3506:	07 5a       	subi	r16, 0xA7	; 167
    3508:	1f 4f       	sbci	r17, 0xFF	; 255
    350a:	bc 01       	movw	r22, r24
    350c:	cd 01       	movw	r24, r26
    350e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	f8 01       	movw	r30, r16
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
    351c:	1f c0       	rjmp	.+62     	; 0x355c <DisplayValues+0x2bc>
    351e:	fe 01       	movw	r30, r28
    3520:	e9 5a       	subi	r30, 0xA9	; 169
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	88 ec       	ldi	r24, 0xC8	; 200
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	91 83       	std	Z+1, r25	; 0x01
    352a:	80 83       	st	Z, r24
    352c:	fe 01       	movw	r30, r28
    352e:	e9 5a       	subi	r30, 0xA9	; 169
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	80 81       	ld	r24, Z
    3534:	91 81       	ldd	r25, Z+1	; 0x01
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	f1 f7       	brne	.-4      	; 0x3536 <DisplayValues+0x296>
    353a:	fe 01       	movw	r30, r28
    353c:	e9 5a       	subi	r30, 0xA9	; 169
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	91 83       	std	Z+1, r25	; 0x01
    3542:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3544:	de 01       	movw	r26, r28
    3546:	a7 5a       	subi	r26, 0xA7	; 167
    3548:	bf 4f       	sbci	r27, 0xFF	; 255
    354a:	fe 01       	movw	r30, r28
    354c:	e7 5a       	subi	r30, 0xA7	; 167
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	80 81       	ld	r24, Z
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	11 96       	adiw	r26, 0x01	; 1
    3558:	9c 93       	st	X, r25
    355a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355c:	fe 01       	movw	r30, r28
    355e:	e7 5a       	subi	r30, 0xA7	; 167
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	80 81       	ld	r24, Z
    3564:	91 81       	ldd	r25, Z+1	; 0x01
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	d1 f6       	brne	.-76     	; 0x351e <DisplayValues+0x27e>
    356a:	27 c0       	rjmp	.+78     	; 0x35ba <DisplayValues+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356c:	8e 01       	movw	r16, r28
    356e:	07 5a       	subi	r16, 0xA7	; 167
    3570:	1f 4f       	sbci	r17, 0xFF	; 255
    3572:	fe 01       	movw	r30, r28
    3574:	e5 5a       	subi	r30, 0xA5	; 165
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	f8 01       	movw	r30, r16
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	80 83       	st	Z, r24
    358e:	de 01       	movw	r26, r28
    3590:	ab 5a       	subi	r26, 0xAB	; 171
    3592:	bf 4f       	sbci	r27, 0xFF	; 255
    3594:	fe 01       	movw	r30, r28
    3596:	e7 5a       	subi	r30, 0xA7	; 167
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 81       	ld	r24, Z
    359c:	91 81       	ldd	r25, Z+1	; 0x01
    359e:	8d 93       	st	X+, r24
    35a0:	9c 93       	st	X, r25
    35a2:	fe 01       	movw	r30, r28
    35a4:	eb 5a       	subi	r30, 0xAB	; 171
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	80 81       	ld	r24, Z
    35aa:	91 81       	ldd	r25, Z+1	; 0x01
    35ac:	01 97       	sbiw	r24, 0x01	; 1
    35ae:	f1 f7       	brne	.-4      	; 0x35ac <DisplayValues+0x30c>
    35b0:	fe 01       	movw	r30, r28
    35b2:	eb 5a       	subi	r30, 0xAB	; 171
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	91 83       	std	Z+1, r25	; 0x01
    35b8:	80 83       	st	Z, r24
    _delay_ms(300);

    // send display request
    UART_sendByte(DISPLAY_VALUES);
    35ba:	82 e0       	ldi	r24, 0x02	; 2
    35bc:	0e 94 a4 0c 	call	0x1948	; 0x1948 <UART_sendByte>
    35c0:	fe 01       	movw	r30, r28
    35c2:	ef 5a       	subi	r30, 0xAF	; 175
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	a8 e4       	ldi	r26, 0x48	; 72
    35cc:	b2 e4       	ldi	r27, 0x42	; 66
    35ce:	80 83       	st	Z, r24
    35d0:	91 83       	std	Z+1, r25	; 0x01
    35d2:	a2 83       	std	Z+2, r26	; 0x02
    35d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d6:	8e 01       	movw	r16, r28
    35d8:	03 5b       	subi	r16, 0xB3	; 179
    35da:	1f 4f       	sbci	r17, 0xFF	; 255
    35dc:	fe 01       	movw	r30, r28
    35de:	ef 5a       	subi	r30, 0xAF	; 175
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	60 81       	ld	r22, Z
    35e4:	71 81       	ldd	r23, Z+1	; 0x01
    35e6:	82 81       	ldd	r24, Z+2	; 0x02
    35e8:	93 81       	ldd	r25, Z+3	; 0x03
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	4a ef       	ldi	r20, 0xFA	; 250
    35f0:	54 e4       	ldi	r21, 0x44	; 68
    35f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	f8 01       	movw	r30, r16
    35fc:	80 83       	st	Z, r24
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	a2 83       	std	Z+2, r26	; 0x02
    3602:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3604:	fe 01       	movw	r30, r28
    3606:	e3 5b       	subi	r30, 0xB3	; 179
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	60 81       	ld	r22, Z
    360c:	71 81       	ldd	r23, Z+1	; 0x01
    360e:	82 81       	ldd	r24, Z+2	; 0x02
    3610:	93 81       	ldd	r25, Z+3	; 0x03
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	40 e8       	ldi	r20, 0x80	; 128
    3618:	5f e3       	ldi	r21, 0x3F	; 63
    361a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    361e:	88 23       	and	r24, r24
    3620:	44 f4       	brge	.+16     	; 0x3632 <DisplayValues+0x392>
		__ticks = 1;
    3622:	fe 01       	movw	r30, r28
    3624:	e5 5b       	subi	r30, 0xB5	; 181
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	80 83       	st	Z, r24
    3630:	64 c0       	rjmp	.+200    	; 0x36fa <DisplayValues+0x45a>
	else if (__tmp > 65535)
    3632:	fe 01       	movw	r30, r28
    3634:	e3 5b       	subi	r30, 0xB3	; 179
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	60 81       	ld	r22, Z
    363a:	71 81       	ldd	r23, Z+1	; 0x01
    363c:	82 81       	ldd	r24, Z+2	; 0x02
    363e:	93 81       	ldd	r25, Z+3	; 0x03
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    3644:	4f e7       	ldi	r20, 0x7F	; 127
    3646:	57 e4       	ldi	r21, 0x47	; 71
    3648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364c:	18 16       	cp	r1, r24
    364e:	0c f0       	brlt	.+2      	; 0x3652 <DisplayValues+0x3b2>
    3650:	43 c0       	rjmp	.+134    	; 0x36d8 <DisplayValues+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3652:	fe 01       	movw	r30, r28
    3654:	ef 5a       	subi	r30, 0xAF	; 175
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	60 81       	ld	r22, Z
    365a:	71 81       	ldd	r23, Z+1	; 0x01
    365c:	82 81       	ldd	r24, Z+2	; 0x02
    365e:	93 81       	ldd	r25, Z+3	; 0x03
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e2       	ldi	r20, 0x20	; 32
    3666:	51 e4       	ldi	r21, 0x41	; 65
    3668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	8e 01       	movw	r16, r28
    3672:	05 5b       	subi	r16, 0xB5	; 181
    3674:	1f 4f       	sbci	r17, 0xFF	; 255
    3676:	bc 01       	movw	r22, r24
    3678:	cd 01       	movw	r24, r26
    367a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	f8 01       	movw	r30, r16
    3684:	91 83       	std	Z+1, r25	; 0x01
    3686:	80 83       	st	Z, r24
    3688:	1f c0       	rjmp	.+62     	; 0x36c8 <DisplayValues+0x428>
    368a:	fe 01       	movw	r30, r28
    368c:	e7 5b       	subi	r30, 0xB7	; 183
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	88 ec       	ldi	r24, 0xC8	; 200
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
    3698:	fe 01       	movw	r30, r28
    369a:	e7 5b       	subi	r30, 0xB7	; 183
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	80 81       	ld	r24, Z
    36a0:	91 81       	ldd	r25, Z+1	; 0x01
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	f1 f7       	brne	.-4      	; 0x36a2 <DisplayValues+0x402>
    36a6:	fe 01       	movw	r30, r28
    36a8:	e7 5b       	subi	r30, 0xB7	; 183
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	91 83       	std	Z+1, r25	; 0x01
    36ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b0:	de 01       	movw	r26, r28
    36b2:	a5 5b       	subi	r26, 0xB5	; 181
    36b4:	bf 4f       	sbci	r27, 0xFF	; 255
    36b6:	fe 01       	movw	r30, r28
    36b8:	e5 5b       	subi	r30, 0xB5	; 181
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	80 81       	ld	r24, Z
    36be:	91 81       	ldd	r25, Z+1	; 0x01
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	11 96       	adiw	r26, 0x01	; 1
    36c4:	9c 93       	st	X, r25
    36c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c8:	fe 01       	movw	r30, r28
    36ca:	e5 5b       	subi	r30, 0xB5	; 181
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	80 81       	ld	r24, Z
    36d0:	91 81       	ldd	r25, Z+1	; 0x01
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	d1 f6       	brne	.-76     	; 0x368a <DisplayValues+0x3ea>
    36d6:	27 c0       	rjmp	.+78     	; 0x3726 <DisplayValues+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d8:	8e 01       	movw	r16, r28
    36da:	05 5b       	subi	r16, 0xB5	; 181
    36dc:	1f 4f       	sbci	r17, 0xFF	; 255
    36de:	fe 01       	movw	r30, r28
    36e0:	e3 5b       	subi	r30, 0xB3	; 179
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	60 81       	ld	r22, Z
    36e6:	71 81       	ldd	r23, Z+1	; 0x01
    36e8:	82 81       	ldd	r24, Z+2	; 0x02
    36ea:	93 81       	ldd	r25, Z+3	; 0x03
    36ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	f8 01       	movw	r30, r16
    36f6:	91 83       	std	Z+1, r25	; 0x01
    36f8:	80 83       	st	Z, r24
    36fa:	de 01       	movw	r26, r28
    36fc:	a9 5b       	subi	r26, 0xB9	; 185
    36fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3700:	fe 01       	movw	r30, r28
    3702:	e5 5b       	subi	r30, 0xB5	; 181
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	8d 93       	st	X+, r24
    370c:	9c 93       	st	X, r25
    370e:	fe 01       	movw	r30, r28
    3710:	e9 5b       	subi	r30, 0xB9	; 185
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	80 81       	ld	r24, Z
    3716:	91 81       	ldd	r25, Z+1	; 0x01
    3718:	01 97       	sbiw	r24, 0x01	; 1
    371a:	f1 f7       	brne	.-4      	; 0x3718 <DisplayValues+0x478>
    371c:	fe 01       	movw	r30, r28
    371e:	e9 5b       	subi	r30, 0xB9	; 185
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	91 83       	std	Z+1, r25	; 0x01
    3724:	80 83       	st	Z, r24
    _delay_ms(50);

    // receive all values
    temp = UART_recieveByte();
    3726:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    372a:	fe 01       	movw	r30, r28
    372c:	ea 58       	subi	r30, 0x8A	; 138
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	80 83       	st	Z, r24
    3732:	fe 01       	movw	r30, r28
    3734:	ed 5b       	subi	r30, 0xBD	; 189
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	a0 e2       	ldi	r26, 0x20	; 32
    373e:	b1 e4       	ldi	r27, 0x41	; 65
    3740:	80 83       	st	Z, r24
    3742:	91 83       	std	Z+1, r25	; 0x01
    3744:	a2 83       	std	Z+2, r26	; 0x02
    3746:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3748:	8e 01       	movw	r16, r28
    374a:	01 5c       	subi	r16, 0xC1	; 193
    374c:	1f 4f       	sbci	r17, 0xFF	; 255
    374e:	fe 01       	movw	r30, r28
    3750:	ed 5b       	subi	r30, 0xBD	; 189
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	60 81       	ld	r22, Z
    3756:	71 81       	ldd	r23, Z+1	; 0x01
    3758:	82 81       	ldd	r24, Z+2	; 0x02
    375a:	93 81       	ldd	r25, Z+3	; 0x03
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	4a ef       	ldi	r20, 0xFA	; 250
    3762:	54 e4       	ldi	r21, 0x44	; 68
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	f8 01       	movw	r30, r16
    376e:	80 83       	st	Z, r24
    3770:	91 83       	std	Z+1, r25	; 0x01
    3772:	a2 83       	std	Z+2, r26	; 0x02
    3774:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3776:	fe 01       	movw	r30, r28
    3778:	ff 96       	adiw	r30, 0x3f	; 63
    377a:	60 81       	ld	r22, Z
    377c:	71 81       	ldd	r23, Z+1	; 0x01
    377e:	82 81       	ldd	r24, Z+2	; 0x02
    3780:	93 81       	ldd	r25, Z+3	; 0x03
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	40 e8       	ldi	r20, 0x80	; 128
    3788:	5f e3       	ldi	r21, 0x3F	; 63
    378a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    378e:	88 23       	and	r24, r24
    3790:	2c f4       	brge	.+10     	; 0x379c <DisplayValues+0x4fc>
		__ticks = 1;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	9e af       	std	Y+62, r25	; 0x3e
    3798:	8d af       	std	Y+61, r24	; 0x3d
    379a:	46 c0       	rjmp	.+140    	; 0x3828 <DisplayValues+0x588>
	else if (__tmp > 65535)
    379c:	fe 01       	movw	r30, r28
    379e:	ff 96       	adiw	r30, 0x3f	; 63
    37a0:	60 81       	ld	r22, Z
    37a2:	71 81       	ldd	r23, Z+1	; 0x01
    37a4:	82 81       	ldd	r24, Z+2	; 0x02
    37a6:	93 81       	ldd	r25, Z+3	; 0x03
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	3f ef       	ldi	r19, 0xFF	; 255
    37ac:	4f e7       	ldi	r20, 0x7F	; 127
    37ae:	57 e4       	ldi	r21, 0x47	; 71
    37b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37b4:	18 16       	cp	r1, r24
    37b6:	64 f5       	brge	.+88     	; 0x3810 <DisplayValues+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b8:	fe 01       	movw	r30, r28
    37ba:	ed 5b       	subi	r30, 0xBD	; 189
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	60 81       	ld	r22, Z
    37c0:	71 81       	ldd	r23, Z+1	; 0x01
    37c2:	82 81       	ldd	r24, Z+2	; 0x02
    37c4:	93 81       	ldd	r25, Z+3	; 0x03
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	40 e2       	ldi	r20, 0x20	; 32
    37cc:	51 e4       	ldi	r21, 0x41	; 65
    37ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	9e af       	std	Y+62, r25	; 0x3e
    37e4:	8d af       	std	Y+61, r24	; 0x3d
    37e6:	0f c0       	rjmp	.+30     	; 0x3806 <DisplayValues+0x566>
    37e8:	88 ec       	ldi	r24, 0xC8	; 200
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	9c af       	std	Y+60, r25	; 0x3c
    37ee:	8b af       	std	Y+59, r24	; 0x3b
    37f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    37f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    37f4:	01 97       	sbiw	r24, 0x01	; 1
    37f6:	f1 f7       	brne	.-4      	; 0x37f4 <DisplayValues+0x554>
    37f8:	9c af       	std	Y+60, r25	; 0x3c
    37fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    37fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	9e af       	std	Y+62, r25	; 0x3e
    3804:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3806:	8d ad       	ldd	r24, Y+61	; 0x3d
    3808:	9e ad       	ldd	r25, Y+62	; 0x3e
    380a:	00 97       	sbiw	r24, 0x00	; 0
    380c:	69 f7       	brne	.-38     	; 0x37e8 <DisplayValues+0x548>
    380e:	16 c0       	rjmp	.+44     	; 0x383c <DisplayValues+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3810:	fe 01       	movw	r30, r28
    3812:	ff 96       	adiw	r30, 0x3f	; 63
    3814:	60 81       	ld	r22, Z
    3816:	71 81       	ldd	r23, Z+1	; 0x01
    3818:	82 81       	ldd	r24, Z+2	; 0x02
    381a:	93 81       	ldd	r25, Z+3	; 0x03
    381c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	9e af       	std	Y+62, r25	; 0x3e
    3826:	8d af       	std	Y+61, r24	; 0x3d
    3828:	8d ad       	ldd	r24, Y+61	; 0x3d
    382a:	9e ad       	ldd	r25, Y+62	; 0x3e
    382c:	9a af       	std	Y+58, r25	; 0x3a
    382e:	89 af       	std	Y+57, r24	; 0x39
    3830:	89 ad       	ldd	r24, Y+57	; 0x39
    3832:	9a ad       	ldd	r25, Y+58	; 0x3a
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <DisplayValues+0x594>
    3838:	9a af       	std	Y+58, r25	; 0x3a
    383a:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(10);
    distance_high = UART_recieveByte();
    383c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    3840:	fe 01       	movw	r30, r28
    3842:	eb 58       	subi	r30, 0x8B	; 139
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	80 83       	st	Z, r24
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	a0 e2       	ldi	r26, 0x20	; 32
    384e:	b1 e4       	ldi	r27, 0x41	; 65
    3850:	8d ab       	std	Y+53, r24	; 0x35
    3852:	9e ab       	std	Y+54, r25	; 0x36
    3854:	af ab       	std	Y+55, r26	; 0x37
    3856:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3858:	6d a9       	ldd	r22, Y+53	; 0x35
    385a:	7e a9       	ldd	r23, Y+54	; 0x36
    385c:	8f a9       	ldd	r24, Y+55	; 0x37
    385e:	98 ad       	ldd	r25, Y+56	; 0x38
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	4a ef       	ldi	r20, 0xFA	; 250
    3866:	54 e4       	ldi	r21, 0x44	; 68
    3868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	89 ab       	std	Y+49, r24	; 0x31
    3872:	9a ab       	std	Y+50, r25	; 0x32
    3874:	ab ab       	std	Y+51, r26	; 0x33
    3876:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3878:	69 a9       	ldd	r22, Y+49	; 0x31
    387a:	7a a9       	ldd	r23, Y+50	; 0x32
    387c:	8b a9       	ldd	r24, Y+51	; 0x33
    387e:	9c a9       	ldd	r25, Y+52	; 0x34
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	40 e8       	ldi	r20, 0x80	; 128
    3886:	5f e3       	ldi	r21, 0x3F	; 63
    3888:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    388c:	88 23       	and	r24, r24
    388e:	2c f4       	brge	.+10     	; 0x389a <DisplayValues+0x5fa>
		__ticks = 1;
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	98 ab       	std	Y+48, r25	; 0x30
    3896:	8f a7       	std	Y+47, r24	; 0x2f
    3898:	3f c0       	rjmp	.+126    	; 0x3918 <DisplayValues+0x678>
	else if (__tmp > 65535)
    389a:	69 a9       	ldd	r22, Y+49	; 0x31
    389c:	7a a9       	ldd	r23, Y+50	; 0x32
    389e:	8b a9       	ldd	r24, Y+51	; 0x33
    38a0:	9c a9       	ldd	r25, Y+52	; 0x34
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	3f ef       	ldi	r19, 0xFF	; 255
    38a6:	4f e7       	ldi	r20, 0x7F	; 127
    38a8:	57 e4       	ldi	r21, 0x47	; 71
    38aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ae:	18 16       	cp	r1, r24
    38b0:	4c f5       	brge	.+82     	; 0x3904 <DisplayValues+0x664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b2:	6d a9       	ldd	r22, Y+53	; 0x35
    38b4:	7e a9       	ldd	r23, Y+54	; 0x36
    38b6:	8f a9       	ldd	r24, Y+55	; 0x37
    38b8:	98 ad       	ldd	r25, Y+56	; 0x38
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	40 e2       	ldi	r20, 0x20	; 32
    38c0:	51 e4       	ldi	r21, 0x41	; 65
    38c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	bc 01       	movw	r22, r24
    38cc:	cd 01       	movw	r24, r26
    38ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	98 ab       	std	Y+48, r25	; 0x30
    38d8:	8f a7       	std	Y+47, r24	; 0x2f
    38da:	0f c0       	rjmp	.+30     	; 0x38fa <DisplayValues+0x65a>
    38dc:	88 ec       	ldi	r24, 0xC8	; 200
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	9e a7       	std	Y+46, r25	; 0x2e
    38e2:	8d a7       	std	Y+45, r24	; 0x2d
    38e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    38e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	f1 f7       	brne	.-4      	; 0x38e8 <DisplayValues+0x648>
    38ec:	9e a7       	std	Y+46, r25	; 0x2e
    38ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    38f2:	98 a9       	ldd	r25, Y+48	; 0x30
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	98 ab       	std	Y+48, r25	; 0x30
    38f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    38fc:	98 a9       	ldd	r25, Y+48	; 0x30
    38fe:	00 97       	sbiw	r24, 0x00	; 0
    3900:	69 f7       	brne	.-38     	; 0x38dc <DisplayValues+0x63c>
    3902:	14 c0       	rjmp	.+40     	; 0x392c <DisplayValues+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3904:	69 a9       	ldd	r22, Y+49	; 0x31
    3906:	7a a9       	ldd	r23, Y+50	; 0x32
    3908:	8b a9       	ldd	r24, Y+51	; 0x33
    390a:	9c a9       	ldd	r25, Y+52	; 0x34
    390c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	98 ab       	std	Y+48, r25	; 0x30
    3916:	8f a7       	std	Y+47, r24	; 0x2f
    3918:	8f a5       	ldd	r24, Y+47	; 0x2f
    391a:	98 a9       	ldd	r25, Y+48	; 0x30
    391c:	9c a7       	std	Y+44, r25	; 0x2c
    391e:	8b a7       	std	Y+43, r24	; 0x2b
    3920:	8b a5       	ldd	r24, Y+43	; 0x2b
    3922:	9c a5       	ldd	r25, Y+44	; 0x2c
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	f1 f7       	brne	.-4      	; 0x3924 <DisplayValues+0x684>
    3928:	9c a7       	std	Y+44, r25	; 0x2c
    392a:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
    distance_low = UART_recieveByte();
    392c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    3930:	fe 01       	movw	r30, r28
    3932:	ec 58       	subi	r30, 0x8C	; 140
    3934:	ff 4f       	sbci	r31, 0xFF	; 255
    3936:	80 83       	st	Z, r24
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	a0 e2       	ldi	r26, 0x20	; 32
    393e:	b1 e4       	ldi	r27, 0x41	; 65
    3940:	8f a3       	std	Y+39, r24	; 0x27
    3942:	98 a7       	std	Y+40, r25	; 0x28
    3944:	a9 a7       	std	Y+41, r26	; 0x29
    3946:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3948:	6f a1       	ldd	r22, Y+39	; 0x27
    394a:	78 a5       	ldd	r23, Y+40	; 0x28
    394c:	89 a5       	ldd	r24, Y+41	; 0x29
    394e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	4a ef       	ldi	r20, 0xFA	; 250
    3956:	54 e4       	ldi	r21, 0x44	; 68
    3958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	8b a3       	std	Y+35, r24	; 0x23
    3962:	9c a3       	std	Y+36, r25	; 0x24
    3964:	ad a3       	std	Y+37, r26	; 0x25
    3966:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3968:	6b a1       	ldd	r22, Y+35	; 0x23
    396a:	7c a1       	ldd	r23, Y+36	; 0x24
    396c:	8d a1       	ldd	r24, Y+37	; 0x25
    396e:	9e a1       	ldd	r25, Y+38	; 0x26
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e8       	ldi	r20, 0x80	; 128
    3976:	5f e3       	ldi	r21, 0x3F	; 63
    3978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    397c:	88 23       	and	r24, r24
    397e:	2c f4       	brge	.+10     	; 0x398a <DisplayValues+0x6ea>
		__ticks = 1;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9a a3       	std	Y+34, r25	; 0x22
    3986:	89 a3       	std	Y+33, r24	; 0x21
    3988:	3f c0       	rjmp	.+126    	; 0x3a08 <DisplayValues+0x768>
	else if (__tmp > 65535)
    398a:	6b a1       	ldd	r22, Y+35	; 0x23
    398c:	7c a1       	ldd	r23, Y+36	; 0x24
    398e:	8d a1       	ldd	r24, Y+37	; 0x25
    3990:	9e a1       	ldd	r25, Y+38	; 0x26
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	3f ef       	ldi	r19, 0xFF	; 255
    3996:	4f e7       	ldi	r20, 0x7F	; 127
    3998:	57 e4       	ldi	r21, 0x47	; 71
    399a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    399e:	18 16       	cp	r1, r24
    39a0:	4c f5       	brge	.+82     	; 0x39f4 <DisplayValues+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a2:	6f a1       	ldd	r22, Y+39	; 0x27
    39a4:	78 a5       	ldd	r23, Y+40	; 0x28
    39a6:	89 a5       	ldd	r24, Y+41	; 0x29
    39a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e2       	ldi	r20, 0x20	; 32
    39b0:	51 e4       	ldi	r21, 0x41	; 65
    39b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	bc 01       	movw	r22, r24
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	9a a3       	std	Y+34, r25	; 0x22
    39c8:	89 a3       	std	Y+33, r24	; 0x21
    39ca:	0f c0       	rjmp	.+30     	; 0x39ea <DisplayValues+0x74a>
    39cc:	88 ec       	ldi	r24, 0xC8	; 200
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	98 a3       	std	Y+32, r25	; 0x20
    39d2:	8f 8f       	std	Y+31, r24	; 0x1f
    39d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39d6:	98 a1       	ldd	r25, Y+32	; 0x20
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <DisplayValues+0x738>
    39dc:	98 a3       	std	Y+32, r25	; 0x20
    39de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e0:	89 a1       	ldd	r24, Y+33	; 0x21
    39e2:	9a a1       	ldd	r25, Y+34	; 0x22
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	9a a3       	std	Y+34, r25	; 0x22
    39e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ea:	89 a1       	ldd	r24, Y+33	; 0x21
    39ec:	9a a1       	ldd	r25, Y+34	; 0x22
    39ee:	00 97       	sbiw	r24, 0x00	; 0
    39f0:	69 f7       	brne	.-38     	; 0x39cc <DisplayValues+0x72c>
    39f2:	14 c0       	rjmp	.+40     	; 0x3a1c <DisplayValues+0x77c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f4:	6b a1       	ldd	r22, Y+35	; 0x23
    39f6:	7c a1       	ldd	r23, Y+36	; 0x24
    39f8:	8d a1       	ldd	r24, Y+37	; 0x25
    39fa:	9e a1       	ldd	r25, Y+38	; 0x26
    39fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	9a a3       	std	Y+34, r25	; 0x22
    3a06:	89 a3       	std	Y+33, r24	; 0x21
    3a08:	89 a1       	ldd	r24, Y+33	; 0x21
    3a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    3a0c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a0e:	8d 8f       	std	Y+29, r24	; 0x1d
    3a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <DisplayValues+0x774>
    3a18:	9e 8f       	std	Y+30, r25	; 0x1e
    3a1a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
    distance = ((uint16)distance_high << 8) | distance_low;
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	eb 58       	subi	r30, 0x8B	; 139
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	80 81       	ld	r24, Z
    3a24:	88 2f       	mov	r24, r24
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	38 2f       	mov	r19, r24
    3a2a:	22 27       	eor	r18, r18
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	ec 58       	subi	r30, 0x8C	; 140
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	80 81       	ld	r24, Z
    3a34:	88 2f       	mov	r24, r24
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	fe 01       	movw	r30, r28
    3a3a:	ee 58       	subi	r30, 0x8E	; 142
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	82 2b       	or	r24, r18
    3a40:	93 2b       	or	r25, r19
    3a42:	91 83       	std	Z+1, r25	; 0x01
    3a44:	80 83       	st	Z, r24

    window_states = UART_recieveByte();
    3a46:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	ef 58       	subi	r30, 0x8F	; 143
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	80 83       	st	Z, r24
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	a0 e2       	ldi	r26, 0x20	; 32
    3a58:	b1 e4       	ldi	r27, 0x41	; 65
    3a5a:	89 8f       	std	Y+25, r24	; 0x19
    3a5c:	9a 8f       	std	Y+26, r25	; 0x1a
    3a5e:	ab 8f       	std	Y+27, r26	; 0x1b
    3a60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a62:	69 8d       	ldd	r22, Y+25	; 0x19
    3a64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	4a ef       	ldi	r20, 0xFA	; 250
    3a70:	54 e4       	ldi	r21, 0x44	; 68
    3a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	8d 8b       	std	Y+21, r24	; 0x15
    3a7c:	9e 8b       	std	Y+22, r25	; 0x16
    3a7e:	af 8b       	std	Y+23, r26	; 0x17
    3a80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a82:	6d 89       	ldd	r22, Y+21	; 0x15
    3a84:	7e 89       	ldd	r23, Y+22	; 0x16
    3a86:	8f 89       	ldd	r24, Y+23	; 0x17
    3a88:	98 8d       	ldd	r25, Y+24	; 0x18
    3a8a:	20 e0       	ldi	r18, 0x00	; 0
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	40 e8       	ldi	r20, 0x80	; 128
    3a90:	5f e3       	ldi	r21, 0x3F	; 63
    3a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a96:	88 23       	and	r24, r24
    3a98:	2c f4       	brge	.+10     	; 0x3aa4 <DisplayValues+0x804>
		__ticks = 1;
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	9c 8b       	std	Y+20, r25	; 0x14
    3aa0:	8b 8b       	std	Y+19, r24	; 0x13
    3aa2:	3f c0       	rjmp	.+126    	; 0x3b22 <DisplayValues+0x882>
	else if (__tmp > 65535)
    3aa4:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa6:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	3f ef       	ldi	r19, 0xFF	; 255
    3ab0:	4f e7       	ldi	r20, 0x7F	; 127
    3ab2:	57 e4       	ldi	r21, 0x47	; 71
    3ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ab8:	18 16       	cp	r1, r24
    3aba:	4c f5       	brge	.+82     	; 0x3b0e <DisplayValues+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3abc:	69 8d       	ldd	r22, Y+25	; 0x19
    3abe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ac0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ac2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	40 e2       	ldi	r20, 0x20	; 32
    3aca:	51 e4       	ldi	r21, 0x41	; 65
    3acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	bc 01       	movw	r22, r24
    3ad6:	cd 01       	movw	r24, r26
    3ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	9c 8b       	std	Y+20, r25	; 0x14
    3ae2:	8b 8b       	std	Y+19, r24	; 0x13
    3ae4:	0f c0       	rjmp	.+30     	; 0x3b04 <DisplayValues+0x864>
    3ae6:	88 ec       	ldi	r24, 0xC8	; 200
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	9a 8b       	std	Y+18, r25	; 0x12
    3aec:	89 8b       	std	Y+17, r24	; 0x11
    3aee:	89 89       	ldd	r24, Y+17	; 0x11
    3af0:	9a 89       	ldd	r25, Y+18	; 0x12
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	f1 f7       	brne	.-4      	; 0x3af2 <DisplayValues+0x852>
    3af6:	9a 8b       	std	Y+18, r25	; 0x12
    3af8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3afa:	8b 89       	ldd	r24, Y+19	; 0x13
    3afc:	9c 89       	ldd	r25, Y+20	; 0x14
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	9c 8b       	std	Y+20, r25	; 0x14
    3b02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b04:	8b 89       	ldd	r24, Y+19	; 0x13
    3b06:	9c 89       	ldd	r25, Y+20	; 0x14
    3b08:	00 97       	sbiw	r24, 0x00	; 0
    3b0a:	69 f7       	brne	.-38     	; 0x3ae6 <DisplayValues+0x846>
    3b0c:	14 c0       	rjmp	.+40     	; 0x3b36 <DisplayValues+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b10:	7e 89       	ldd	r23, Y+22	; 0x16
    3b12:	8f 89       	ldd	r24, Y+23	; 0x17
    3b14:	98 8d       	ldd	r25, Y+24	; 0x18
    3b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	9c 8b       	std	Y+20, r25	; 0x14
    3b20:	8b 8b       	std	Y+19, r24	; 0x13
    3b22:	8b 89       	ldd	r24, Y+19	; 0x13
    3b24:	9c 89       	ldd	r25, Y+20	; 0x14
    3b26:	98 8b       	std	Y+16, r25	; 0x10
    3b28:	8f 87       	std	Y+15, r24	; 0x0f
    3b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b2c:	98 89       	ldd	r25, Y+16	; 0x10
    3b2e:	01 97       	sbiw	r24, 0x01	; 1
    3b30:	f1 f7       	brne	.-4      	; 0x3b2e <DisplayValues+0x88e>
    3b32:	98 8b       	std	Y+16, r25	; 0x10
    3b34:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);

    // print readings
    LCD_clearScreen();
    3b36:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
    LCD_displayString("Temp:");
    3b3a:	82 ef       	ldi	r24, 0xF2	; 242
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    LCD_intgerToString(temp);
    3b42:	fe 01       	movw	r30, r28
    3b44:	ea 58       	subi	r30, 0x8A	; 138
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	80 81       	ld	r24, Z
    3b4a:	88 2f       	mov	r24, r24
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_intgerToString>
    LCD_displayCharacter('C');
    3b52:	83 e4       	ldi	r24, 0x43	; 67
    3b54:	0e 94 55 11 	call	0x22aa	; 0x22aa <LCD_displayCharacter>

    LCD_displayStringRowColumn(1, 0, "Dist:");
    3b58:	28 ef       	ldi	r18, 0xF8	; 248
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	60 e0       	ldi	r22, 0x00	; 0
    3b60:	a9 01       	movw	r20, r18
    3b62:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
    LCD_intgerToString(distance);
    3b66:	fe 01       	movw	r30, r28
    3b68:	ee 58       	subi	r30, 0x8E	; 142
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_intgerToString>
    LCD_displayString("cm");
    3b74:	81 eb       	ldi	r24, 0xB1	; 177
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>

    LCD_displayStringRowColumn(2, 0, "W1:");
    3b7c:	24 eb       	ldi	r18, 0xB4	; 180
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	82 e0       	ldi	r24, 0x02	; 2
    3b82:	60 e0       	ldi	r22, 0x00	; 0
    3b84:	a9 01       	movw	r20, r18
    3b86:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
    if(window_states & 0x01)
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	ef 58       	subi	r30, 0x8F	; 143
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	80 81       	ld	r24, Z
    3b92:	88 2f       	mov	r24, r24
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	81 70       	andi	r24, 0x01	; 1
    3b98:	90 70       	andi	r25, 0x00	; 0
    3b9a:	88 23       	and	r24, r24
    3b9c:	29 f0       	breq	.+10     	; 0x3ba8 <DisplayValues+0x908>
        LCD_displayString("Open ");
    3b9e:	88 eb       	ldi	r24, 0xB8	; 184
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    3ba6:	04 c0       	rjmp	.+8      	; 0x3bb0 <DisplayValues+0x910>
    else
        LCD_displayString("Closed");
    3ba8:	8e ef       	ldi	r24, 0xFE	; 254
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>

    LCD_displayStringRowColumn(3, 0, "W2:");
    3bb0:	24 ec       	ldi	r18, 0xC4	; 196
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	83 e0       	ldi	r24, 0x03	; 3
    3bb6:	60 e0       	ldi	r22, 0x00	; 0
    3bb8:	a9 01       	movw	r20, r18
    3bba:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
    if(window_states & 0x02)
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	ef 58       	subi	r30, 0x8F	; 143
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 81       	ld	r24, Z
    3bc6:	88 2f       	mov	r24, r24
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	82 70       	andi	r24, 0x02	; 2
    3bcc:	90 70       	andi	r25, 0x00	; 0
    3bce:	00 97       	sbiw	r24, 0x00	; 0
    3bd0:	29 f0       	breq	.+10     	; 0x3bdc <DisplayValues+0x93c>
        LCD_displayString("Open ");
    3bd2:	88 eb       	ldi	r24, 0xB8	; 184
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    3bda:	04 c0       	rjmp	.+8      	; 0x3be4 <DisplayValues+0x944>
    else
        LCD_displayString("Closed");
    3bdc:	8e ef       	ldi	r24, 0xFE	; 254
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	90 e4       	ldi	r25, 0x40	; 64
    3be8:	ac e1       	ldi	r26, 0x1C	; 28
    3bea:	b6 e4       	ldi	r27, 0x46	; 70
    3bec:	8b 87       	std	Y+11, r24	; 0x0b
    3bee:	9c 87       	std	Y+12, r25	; 0x0c
    3bf0:	ad 87       	std	Y+13, r26	; 0x0d
    3bf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	4a ef       	ldi	r20, 0xFA	; 250
    3c02:	54 e4       	ldi	r21, 0x44	; 68
    3c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	8f 83       	std	Y+7, r24	; 0x07
    3c0e:	98 87       	std	Y+8, r25	; 0x08
    3c10:	a9 87       	std	Y+9, r26	; 0x09
    3c12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c14:	6f 81       	ldd	r22, Y+7	; 0x07
    3c16:	78 85       	ldd	r23, Y+8	; 0x08
    3c18:	89 85       	ldd	r24, Y+9	; 0x09
    3c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	40 e8       	ldi	r20, 0x80	; 128
    3c22:	5f e3       	ldi	r21, 0x3F	; 63
    3c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c28:	88 23       	and	r24, r24
    3c2a:	2c f4       	brge	.+10     	; 0x3c36 <DisplayValues+0x996>
		__ticks = 1;
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	9e 83       	std	Y+6, r25	; 0x06
    3c32:	8d 83       	std	Y+5, r24	; 0x05
    3c34:	3f c0       	rjmp	.+126    	; 0x3cb4 <DisplayValues+0xa14>
	else if (__tmp > 65535)
    3c36:	6f 81       	ldd	r22, Y+7	; 0x07
    3c38:	78 85       	ldd	r23, Y+8	; 0x08
    3c3a:	89 85       	ldd	r24, Y+9	; 0x09
    3c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	3f ef       	ldi	r19, 0xFF	; 255
    3c42:	4f e7       	ldi	r20, 0x7F	; 127
    3c44:	57 e4       	ldi	r21, 0x47	; 71
    3c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c4a:	18 16       	cp	r1, r24
    3c4c:	4c f5       	brge	.+82     	; 0x3ca0 <DisplayValues+0xa00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e2       	ldi	r20, 0x20	; 32
    3c5c:	51 e4       	ldi	r21, 0x41	; 65
    3c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	bc 01       	movw	r22, r24
    3c68:	cd 01       	movw	r24, r26
    3c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	9e 83       	std	Y+6, r25	; 0x06
    3c74:	8d 83       	std	Y+5, r24	; 0x05
    3c76:	0f c0       	rjmp	.+30     	; 0x3c96 <DisplayValues+0x9f6>
    3c78:	88 ec       	ldi	r24, 0xC8	; 200
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	9c 83       	std	Y+4, r25	; 0x04
    3c7e:	8b 83       	std	Y+3, r24	; 0x03
    3c80:	8b 81       	ldd	r24, Y+3	; 0x03
    3c82:	9c 81       	ldd	r25, Y+4	; 0x04
    3c84:	01 97       	sbiw	r24, 0x01	; 1
    3c86:	f1 f7       	brne	.-4      	; 0x3c84 <DisplayValues+0x9e4>
    3c88:	9c 83       	std	Y+4, r25	; 0x04
    3c8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	9e 83       	std	Y+6, r25	; 0x06
    3c94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c96:	8d 81       	ldd	r24, Y+5	; 0x05
    3c98:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9a:	00 97       	sbiw	r24, 0x00	; 0
    3c9c:	69 f7       	brne	.-38     	; 0x3c78 <DisplayValues+0x9d8>
    3c9e:	14 c0       	rjmp	.+40     	; 0x3cc8 <DisplayValues+0xa28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca2:	78 85       	ldd	r23, Y+8	; 0x08
    3ca4:	89 85       	ldd	r24, Y+9	; 0x09
    3ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	9e 83       	std	Y+6, r25	; 0x06
    3cb2:	8d 83       	std	Y+5, r24	; 0x05
    3cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb8:	9a 83       	std	Y+2, r25	; 0x02
    3cba:	89 83       	std	Y+1, r24	; 0x01
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc0:	01 97       	sbiw	r24, 0x01	; 1
    3cc2:	f1 f7       	brne	.-4      	; 0x3cc0 <DisplayValues+0xa20>
    3cc4:	9a 83       	std	Y+2, r25	; 0x02
    3cc6:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(10000);
}
    3cc8:	ca 58       	subi	r28, 0x8A	; 138
    3cca:	df 4f       	sbci	r29, 0xFF	; 255
    3ccc:	0f b6       	in	r0, 0x3f	; 63
    3cce:	f8 94       	cli
    3cd0:	de bf       	out	0x3e, r29	; 62
    3cd2:	0f be       	out	0x3f, r0	; 63
    3cd4:	cd bf       	out	0x3d, r28	; 61
    3cd6:	cf 91       	pop	r28
    3cd8:	df 91       	pop	r29
    3cda:	1f 91       	pop	r17
    3cdc:	0f 91       	pop	r16
    3cde:	08 95       	ret

00003ce0 <Retrieve_Faults>:

void Retrieve_Faults(void)
{
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	df 93       	push	r29
    3ce6:	cf 93       	push	r28
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    3cec:	c8 54       	subi	r28, 0x48	; 72
    3cee:	d0 40       	sbci	r29, 0x00	; 0
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	f8 94       	cli
    3cf4:	de bf       	out	0x3e, r29	; 62
    3cf6:	0f be       	out	0x3f, r0	; 63
    3cf8:	cd bf       	out	0x3d, r28	; 61
    uint8 fault_distance = 0;
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e8 5b       	subi	r30, 0xB8	; 184
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	10 82       	st	Z, r1
    uint8 fault_temp = 0;
    3d02:	fe 01       	movw	r30, r28
    3d04:	e9 5b       	subi	r30, 0xB9	; 185
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	10 82       	st	Z, r1

    LCD_clearScreen();
    3d0a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
    LCD_displayString("Reading...");
    3d0e:	87 ee       	ldi	r24, 0xE7	; 231
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    3d16:	fe 01       	movw	r30, r28
    3d18:	ed 5b       	subi	r30, 0xBD	; 189
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	a6 e9       	ldi	r26, 0x96	; 150
    3d22:	b3 e4       	ldi	r27, 0x43	; 67
    3d24:	80 83       	st	Z, r24
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	a2 83       	std	Z+2, r26	; 0x02
    3d2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2c:	8e 01       	movw	r16, r28
    3d2e:	01 5c       	subi	r16, 0xC1	; 193
    3d30:	1f 4f       	sbci	r17, 0xFF	; 255
    3d32:	fe 01       	movw	r30, r28
    3d34:	ed 5b       	subi	r30, 0xBD	; 189
    3d36:	ff 4f       	sbci	r31, 0xFF	; 255
    3d38:	60 81       	ld	r22, Z
    3d3a:	71 81       	ldd	r23, Z+1	; 0x01
    3d3c:	82 81       	ldd	r24, Z+2	; 0x02
    3d3e:	93 81       	ldd	r25, Z+3	; 0x03
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	4a ef       	ldi	r20, 0xFA	; 250
    3d46:	54 e4       	ldi	r21, 0x44	; 68
    3d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	f8 01       	movw	r30, r16
    3d52:	80 83       	st	Z, r24
    3d54:	91 83       	std	Z+1, r25	; 0x01
    3d56:	a2 83       	std	Z+2, r26	; 0x02
    3d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ff 96       	adiw	r30, 0x3f	; 63
    3d5e:	60 81       	ld	r22, Z
    3d60:	71 81       	ldd	r23, Z+1	; 0x01
    3d62:	82 81       	ldd	r24, Z+2	; 0x02
    3d64:	93 81       	ldd	r25, Z+3	; 0x03
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	40 e8       	ldi	r20, 0x80	; 128
    3d6c:	5f e3       	ldi	r21, 0x3F	; 63
    3d6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d72:	88 23       	and	r24, r24
    3d74:	2c f4       	brge	.+10     	; 0x3d80 <Retrieve_Faults+0xa0>
		__ticks = 1;
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	9e af       	std	Y+62, r25	; 0x3e
    3d7c:	8d af       	std	Y+61, r24	; 0x3d
    3d7e:	46 c0       	rjmp	.+140    	; 0x3e0c <Retrieve_Faults+0x12c>
	else if (__tmp > 65535)
    3d80:	fe 01       	movw	r30, r28
    3d82:	ff 96       	adiw	r30, 0x3f	; 63
    3d84:	60 81       	ld	r22, Z
    3d86:	71 81       	ldd	r23, Z+1	; 0x01
    3d88:	82 81       	ldd	r24, Z+2	; 0x02
    3d8a:	93 81       	ldd	r25, Z+3	; 0x03
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	3f ef       	ldi	r19, 0xFF	; 255
    3d90:	4f e7       	ldi	r20, 0x7F	; 127
    3d92:	57 e4       	ldi	r21, 0x47	; 71
    3d94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d98:	18 16       	cp	r1, r24
    3d9a:	64 f5       	brge	.+88     	; 0x3df4 <Retrieve_Faults+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	ed 5b       	subi	r30, 0xBD	; 189
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	60 81       	ld	r22, Z
    3da4:	71 81       	ldd	r23, Z+1	; 0x01
    3da6:	82 81       	ldd	r24, Z+2	; 0x02
    3da8:	93 81       	ldd	r25, Z+3	; 0x03
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	40 e2       	ldi	r20, 0x20	; 32
    3db0:	51 e4       	ldi	r21, 0x41	; 65
    3db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	bc 01       	movw	r22, r24
    3dbc:	cd 01       	movw	r24, r26
    3dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	9e af       	std	Y+62, r25	; 0x3e
    3dc8:	8d af       	std	Y+61, r24	; 0x3d
    3dca:	0f c0       	rjmp	.+30     	; 0x3dea <Retrieve_Faults+0x10a>
    3dcc:	88 ec       	ldi	r24, 0xC8	; 200
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	9c af       	std	Y+60, r25	; 0x3c
    3dd2:	8b af       	std	Y+59, r24	; 0x3b
    3dd4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3dd6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3dd8:	01 97       	sbiw	r24, 0x01	; 1
    3dda:	f1 f7       	brne	.-4      	; 0x3dd8 <Retrieve_Faults+0xf8>
    3ddc:	9c af       	std	Y+60, r25	; 0x3c
    3dde:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3de2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	9e af       	std	Y+62, r25	; 0x3e
    3de8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dea:	8d ad       	ldd	r24, Y+61	; 0x3d
    3dec:	9e ad       	ldd	r25, Y+62	; 0x3e
    3dee:	00 97       	sbiw	r24, 0x00	; 0
    3df0:	69 f7       	brne	.-38     	; 0x3dcc <Retrieve_Faults+0xec>
    3df2:	16 c0       	rjmp	.+44     	; 0x3e20 <Retrieve_Faults+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df4:	fe 01       	movw	r30, r28
    3df6:	ff 96       	adiw	r30, 0x3f	; 63
    3df8:	60 81       	ld	r22, Z
    3dfa:	71 81       	ldd	r23, Z+1	; 0x01
    3dfc:	82 81       	ldd	r24, Z+2	; 0x02
    3dfe:	93 81       	ldd	r25, Z+3	; 0x03
    3e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	9e af       	std	Y+62, r25	; 0x3e
    3e0a:	8d af       	std	Y+61, r24	; 0x3d
    3e0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e10:	9a af       	std	Y+58, r25	; 0x3a
    3e12:	89 af       	std	Y+57, r24	; 0x39
    3e14:	89 ad       	ldd	r24, Y+57	; 0x39
    3e16:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e18:	01 97       	sbiw	r24, 0x01	; 1
    3e1a:	f1 f7       	brne	.-4      	; 0x3e18 <Retrieve_Faults+0x138>
    3e1c:	9a af       	std	Y+58, r25	; 0x3a
    3e1e:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(300);

    // ask Control ECU to send fault codes
    UART_sendByte(RETRIEVE_FAULTS);
    3e20:	83 e0       	ldi	r24, 0x03	; 3
    3e22:	0e 94 a4 0c 	call	0x1948	; 0x1948 <UART_sendByte>
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	a8 e4       	ldi	r26, 0x48	; 72
    3e2c:	b2 e4       	ldi	r27, 0x42	; 66
    3e2e:	8d ab       	std	Y+53, r24	; 0x35
    3e30:	9e ab       	std	Y+54, r25	; 0x36
    3e32:	af ab       	std	Y+55, r26	; 0x37
    3e34:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e36:	6d a9       	ldd	r22, Y+53	; 0x35
    3e38:	7e a9       	ldd	r23, Y+54	; 0x36
    3e3a:	8f a9       	ldd	r24, Y+55	; 0x37
    3e3c:	98 ad       	ldd	r25, Y+56	; 0x38
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	4a ef       	ldi	r20, 0xFA	; 250
    3e44:	54 e4       	ldi	r21, 0x44	; 68
    3e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	89 ab       	std	Y+49, r24	; 0x31
    3e50:	9a ab       	std	Y+50, r25	; 0x32
    3e52:	ab ab       	std	Y+51, r26	; 0x33
    3e54:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e56:	69 a9       	ldd	r22, Y+49	; 0x31
    3e58:	7a a9       	ldd	r23, Y+50	; 0x32
    3e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    3e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	40 e8       	ldi	r20, 0x80	; 128
    3e64:	5f e3       	ldi	r21, 0x3F	; 63
    3e66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e6a:	88 23       	and	r24, r24
    3e6c:	2c f4       	brge	.+10     	; 0x3e78 <Retrieve_Faults+0x198>
		__ticks = 1;
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	98 ab       	std	Y+48, r25	; 0x30
    3e74:	8f a7       	std	Y+47, r24	; 0x2f
    3e76:	3f c0       	rjmp	.+126    	; 0x3ef6 <Retrieve_Faults+0x216>
	else if (__tmp > 65535)
    3e78:	69 a9       	ldd	r22, Y+49	; 0x31
    3e7a:	7a a9       	ldd	r23, Y+50	; 0x32
    3e7c:	8b a9       	ldd	r24, Y+51	; 0x33
    3e7e:	9c a9       	ldd	r25, Y+52	; 0x34
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	3f ef       	ldi	r19, 0xFF	; 255
    3e84:	4f e7       	ldi	r20, 0x7F	; 127
    3e86:	57 e4       	ldi	r21, 0x47	; 71
    3e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e8c:	18 16       	cp	r1, r24
    3e8e:	4c f5       	brge	.+82     	; 0x3ee2 <Retrieve_Faults+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e90:	6d a9       	ldd	r22, Y+53	; 0x35
    3e92:	7e a9       	ldd	r23, Y+54	; 0x36
    3e94:	8f a9       	ldd	r24, Y+55	; 0x37
    3e96:	98 ad       	ldd	r25, Y+56	; 0x38
    3e98:	20 e0       	ldi	r18, 0x00	; 0
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	40 e2       	ldi	r20, 0x20	; 32
    3e9e:	51 e4       	ldi	r21, 0x41	; 65
    3ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	bc 01       	movw	r22, r24
    3eaa:	cd 01       	movw	r24, r26
    3eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	98 ab       	std	Y+48, r25	; 0x30
    3eb6:	8f a7       	std	Y+47, r24	; 0x2f
    3eb8:	0f c0       	rjmp	.+30     	; 0x3ed8 <Retrieve_Faults+0x1f8>
    3eba:	88 ec       	ldi	r24, 0xC8	; 200
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	9e a7       	std	Y+46, r25	; 0x2e
    3ec0:	8d a7       	std	Y+45, r24	; 0x2d
    3ec2:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ec4:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	f1 f7       	brne	.-4      	; 0x3ec6 <Retrieve_Faults+0x1e6>
    3eca:	9e a7       	std	Y+46, r25	; 0x2e
    3ecc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ece:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ed2:	01 97       	sbiw	r24, 0x01	; 1
    3ed4:	98 ab       	std	Y+48, r25	; 0x30
    3ed6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3eda:	98 a9       	ldd	r25, Y+48	; 0x30
    3edc:	00 97       	sbiw	r24, 0x00	; 0
    3ede:	69 f7       	brne	.-38     	; 0x3eba <Retrieve_Faults+0x1da>
    3ee0:	14 c0       	rjmp	.+40     	; 0x3f0a <Retrieve_Faults+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee2:	69 a9       	ldd	r22, Y+49	; 0x31
    3ee4:	7a a9       	ldd	r23, Y+50	; 0x32
    3ee6:	8b a9       	ldd	r24, Y+51	; 0x33
    3ee8:	9c a9       	ldd	r25, Y+52	; 0x34
    3eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	98 ab       	std	Y+48, r25	; 0x30
    3ef4:	8f a7       	std	Y+47, r24	; 0x2f
    3ef6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ef8:	98 a9       	ldd	r25, Y+48	; 0x30
    3efa:	9c a7       	std	Y+44, r25	; 0x2c
    3efc:	8b a7       	std	Y+43, r24	; 0x2b
    3efe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f00:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f02:	01 97       	sbiw	r24, 0x01	; 1
    3f04:	f1 f7       	brne	.-4      	; 0x3f02 <Retrieve_Faults+0x222>
    3f06:	9c a7       	std	Y+44, r25	; 0x2c
    3f08:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(50);

    // receive stored faults
    fault_distance = UART_recieveByte();
    3f0a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    3f0e:	fe 01       	movw	r30, r28
    3f10:	e8 5b       	subi	r30, 0xB8	; 184
    3f12:	ff 4f       	sbci	r31, 0xFF	; 255
    3f14:	80 83       	st	Z, r24
    3f16:	80 e0       	ldi	r24, 0x00	; 0
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	a0 e2       	ldi	r26, 0x20	; 32
    3f1c:	b1 e4       	ldi	r27, 0x41	; 65
    3f1e:	8f a3       	std	Y+39, r24	; 0x27
    3f20:	98 a7       	std	Y+40, r25	; 0x28
    3f22:	a9 a7       	std	Y+41, r26	; 0x29
    3f24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f26:	6f a1       	ldd	r22, Y+39	; 0x27
    3f28:	78 a5       	ldd	r23, Y+40	; 0x28
    3f2a:	89 a5       	ldd	r24, Y+41	; 0x29
    3f2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	4a ef       	ldi	r20, 0xFA	; 250
    3f34:	54 e4       	ldi	r21, 0x44	; 68
    3f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	8b a3       	std	Y+35, r24	; 0x23
    3f40:	9c a3       	std	Y+36, r25	; 0x24
    3f42:	ad a3       	std	Y+37, r26	; 0x25
    3f44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f46:	6b a1       	ldd	r22, Y+35	; 0x23
    3f48:	7c a1       	ldd	r23, Y+36	; 0x24
    3f4a:	8d a1       	ldd	r24, Y+37	; 0x25
    3f4c:	9e a1       	ldd	r25, Y+38	; 0x26
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	40 e8       	ldi	r20, 0x80	; 128
    3f54:	5f e3       	ldi	r21, 0x3F	; 63
    3f56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f5a:	88 23       	and	r24, r24
    3f5c:	2c f4       	brge	.+10     	; 0x3f68 <Retrieve_Faults+0x288>
		__ticks = 1;
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	9a a3       	std	Y+34, r25	; 0x22
    3f64:	89 a3       	std	Y+33, r24	; 0x21
    3f66:	3f c0       	rjmp	.+126    	; 0x3fe6 <Retrieve_Faults+0x306>
	else if (__tmp > 65535)
    3f68:	6b a1       	ldd	r22, Y+35	; 0x23
    3f6a:	7c a1       	ldd	r23, Y+36	; 0x24
    3f6c:	8d a1       	ldd	r24, Y+37	; 0x25
    3f6e:	9e a1       	ldd	r25, Y+38	; 0x26
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	3f ef       	ldi	r19, 0xFF	; 255
    3f74:	4f e7       	ldi	r20, 0x7F	; 127
    3f76:	57 e4       	ldi	r21, 0x47	; 71
    3f78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f7c:	18 16       	cp	r1, r24
    3f7e:	4c f5       	brge	.+82     	; 0x3fd2 <Retrieve_Faults+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f80:	6f a1       	ldd	r22, Y+39	; 0x27
    3f82:	78 a5       	ldd	r23, Y+40	; 0x28
    3f84:	89 a5       	ldd	r24, Y+41	; 0x29
    3f86:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	40 e2       	ldi	r20, 0x20	; 32
    3f8e:	51 e4       	ldi	r21, 0x41	; 65
    3f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	bc 01       	movw	r22, r24
    3f9a:	cd 01       	movw	r24, r26
    3f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	9a a3       	std	Y+34, r25	; 0x22
    3fa6:	89 a3       	std	Y+33, r24	; 0x21
    3fa8:	0f c0       	rjmp	.+30     	; 0x3fc8 <Retrieve_Faults+0x2e8>
    3faa:	88 ec       	ldi	r24, 0xC8	; 200
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	98 a3       	std	Y+32, r25	; 0x20
    3fb0:	8f 8f       	std	Y+31, r24	; 0x1f
    3fb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fb4:	98 a1       	ldd	r25, Y+32	; 0x20
    3fb6:	01 97       	sbiw	r24, 0x01	; 1
    3fb8:	f1 f7       	brne	.-4      	; 0x3fb6 <Retrieve_Faults+0x2d6>
    3fba:	98 a3       	std	Y+32, r25	; 0x20
    3fbc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fbe:	89 a1       	ldd	r24, Y+33	; 0x21
    3fc0:	9a a1       	ldd	r25, Y+34	; 0x22
    3fc2:	01 97       	sbiw	r24, 0x01	; 1
    3fc4:	9a a3       	std	Y+34, r25	; 0x22
    3fc6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc8:	89 a1       	ldd	r24, Y+33	; 0x21
    3fca:	9a a1       	ldd	r25, Y+34	; 0x22
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	69 f7       	brne	.-38     	; 0x3faa <Retrieve_Faults+0x2ca>
    3fd0:	14 c0       	rjmp	.+40     	; 0x3ffa <Retrieve_Faults+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd2:	6b a1       	ldd	r22, Y+35	; 0x23
    3fd4:	7c a1       	ldd	r23, Y+36	; 0x24
    3fd6:	8d a1       	ldd	r24, Y+37	; 0x25
    3fd8:	9e a1       	ldd	r25, Y+38	; 0x26
    3fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	9a a3       	std	Y+34, r25	; 0x22
    3fe4:	89 a3       	std	Y+33, r24	; 0x21
    3fe6:	89 a1       	ldd	r24, Y+33	; 0x21
    3fe8:	9a a1       	ldd	r25, Y+34	; 0x22
    3fea:	9e 8f       	std	Y+30, r25	; 0x1e
    3fec:	8d 8f       	std	Y+29, r24	; 0x1d
    3fee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ff0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
    3ff4:	f1 f7       	brne	.-4      	; 0x3ff2 <Retrieve_Faults+0x312>
    3ff6:	9e 8f       	std	Y+30, r25	; 0x1e
    3ff8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
    fault_temp = UART_recieveByte();
    3ffa:	0e 94 bb 0c 	call	0x1976	; 0x1976 <UART_recieveByte>
    3ffe:	fe 01       	movw	r30, r28
    4000:	e9 5b       	subi	r30, 0xB9	; 185
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	80 83       	st	Z, r24
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	a0 e2       	ldi	r26, 0x20	; 32
    400c:	b1 e4       	ldi	r27, 0x41	; 65
    400e:	89 8f       	std	Y+25, r24	; 0x19
    4010:	9a 8f       	std	Y+26, r25	; 0x1a
    4012:	ab 8f       	std	Y+27, r26	; 0x1b
    4014:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4016:	69 8d       	ldd	r22, Y+25	; 0x19
    4018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    401a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    401c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    401e:	20 e0       	ldi	r18, 0x00	; 0
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	4a ef       	ldi	r20, 0xFA	; 250
    4024:	54 e4       	ldi	r21, 0x44	; 68
    4026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	8d 8b       	std	Y+21, r24	; 0x15
    4030:	9e 8b       	std	Y+22, r25	; 0x16
    4032:	af 8b       	std	Y+23, r26	; 0x17
    4034:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4036:	6d 89       	ldd	r22, Y+21	; 0x15
    4038:	7e 89       	ldd	r23, Y+22	; 0x16
    403a:	8f 89       	ldd	r24, Y+23	; 0x17
    403c:	98 8d       	ldd	r25, Y+24	; 0x18
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	40 e8       	ldi	r20, 0x80	; 128
    4044:	5f e3       	ldi	r21, 0x3F	; 63
    4046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    404a:	88 23       	and	r24, r24
    404c:	2c f4       	brge	.+10     	; 0x4058 <Retrieve_Faults+0x378>
		__ticks = 1;
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	9c 8b       	std	Y+20, r25	; 0x14
    4054:	8b 8b       	std	Y+19, r24	; 0x13
    4056:	3f c0       	rjmp	.+126    	; 0x40d6 <Retrieve_Faults+0x3f6>
	else if (__tmp > 65535)
    4058:	6d 89       	ldd	r22, Y+21	; 0x15
    405a:	7e 89       	ldd	r23, Y+22	; 0x16
    405c:	8f 89       	ldd	r24, Y+23	; 0x17
    405e:	98 8d       	ldd	r25, Y+24	; 0x18
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	3f ef       	ldi	r19, 0xFF	; 255
    4064:	4f e7       	ldi	r20, 0x7F	; 127
    4066:	57 e4       	ldi	r21, 0x47	; 71
    4068:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    406c:	18 16       	cp	r1, r24
    406e:	4c f5       	brge	.+82     	; 0x40c2 <Retrieve_Faults+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4070:	69 8d       	ldd	r22, Y+25	; 0x19
    4072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	40 e2       	ldi	r20, 0x20	; 32
    407e:	51 e4       	ldi	r21, 0x41	; 65
    4080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	bc 01       	movw	r22, r24
    408a:	cd 01       	movw	r24, r26
    408c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	9c 8b       	std	Y+20, r25	; 0x14
    4096:	8b 8b       	std	Y+19, r24	; 0x13
    4098:	0f c0       	rjmp	.+30     	; 0x40b8 <Retrieve_Faults+0x3d8>
    409a:	88 ec       	ldi	r24, 0xC8	; 200
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	9a 8b       	std	Y+18, r25	; 0x12
    40a0:	89 8b       	std	Y+17, r24	; 0x11
    40a2:	89 89       	ldd	r24, Y+17	; 0x11
    40a4:	9a 89       	ldd	r25, Y+18	; 0x12
    40a6:	01 97       	sbiw	r24, 0x01	; 1
    40a8:	f1 f7       	brne	.-4      	; 0x40a6 <Retrieve_Faults+0x3c6>
    40aa:	9a 8b       	std	Y+18, r25	; 0x12
    40ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ae:	8b 89       	ldd	r24, Y+19	; 0x13
    40b0:	9c 89       	ldd	r25, Y+20	; 0x14
    40b2:	01 97       	sbiw	r24, 0x01	; 1
    40b4:	9c 8b       	std	Y+20, r25	; 0x14
    40b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40b8:	8b 89       	ldd	r24, Y+19	; 0x13
    40ba:	9c 89       	ldd	r25, Y+20	; 0x14
    40bc:	00 97       	sbiw	r24, 0x00	; 0
    40be:	69 f7       	brne	.-38     	; 0x409a <Retrieve_Faults+0x3ba>
    40c0:	14 c0       	rjmp	.+40     	; 0x40ea <Retrieve_Faults+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40c2:	6d 89       	ldd	r22, Y+21	; 0x15
    40c4:	7e 89       	ldd	r23, Y+22	; 0x16
    40c6:	8f 89       	ldd	r24, Y+23	; 0x17
    40c8:	98 8d       	ldd	r25, Y+24	; 0x18
    40ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ce:	dc 01       	movw	r26, r24
    40d0:	cb 01       	movw	r24, r22
    40d2:	9c 8b       	std	Y+20, r25	; 0x14
    40d4:	8b 8b       	std	Y+19, r24	; 0x13
    40d6:	8b 89       	ldd	r24, Y+19	; 0x13
    40d8:	9c 89       	ldd	r25, Y+20	; 0x14
    40da:	98 8b       	std	Y+16, r25	; 0x10
    40dc:	8f 87       	std	Y+15, r24	; 0x0f
    40de:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e0:	98 89       	ldd	r25, Y+16	; 0x10
    40e2:	01 97       	sbiw	r24, 0x01	; 1
    40e4:	f1 f7       	brne	.-4      	; 0x40e2 <Retrieve_Faults+0x402>
    40e6:	98 8b       	std	Y+16, r25	; 0x10
    40e8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);

    LCD_clearScreen();
    40ea:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
    LCD_displayString("Faults Log:");
    40ee:	85 e0       	ldi	r24, 0x05	; 5
    40f0:	91 e0       	ldi	r25, 0x01	; 1
    40f2:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>

    // show distance fault status
    LCD_displayStringRowColumn(1, 0, "");
    40f6:	21 e1       	ldi	r18, 0x11	; 17
    40f8:	31 e0       	ldi	r19, 0x01	; 1
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	a9 01       	movw	r20, r18
    4100:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
    if(fault_distance == FAULT_DISTANCE_P001)
    4104:	fe 01       	movw	r30, r28
    4106:	e8 5b       	subi	r30, 0xB8	; 184
    4108:	ff 4f       	sbci	r31, 0xFF	; 255
    410a:	80 81       	ld	r24, Z
    410c:	8c 30       	cpi	r24, 0x0C	; 12
    410e:	29 f4       	brne	.+10     	; 0x411a <Retrieve_Faults+0x43a>
        LCD_displayString("P001:Crash Risk!");
    4110:	82 e1       	ldi	r24, 0x12	; 18
    4112:	91 e0       	ldi	r25, 0x01	; 1
    4114:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    4118:	04 c0       	rjmp	.+8      	; 0x4122 <Retrieve_Faults+0x442>
    else
        LCD_displayString("No Distance Fault");
    411a:	83 e2       	ldi	r24, 0x23	; 35
    411c:	91 e0       	ldi	r25, 0x01	; 1
    411e:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>

    // show temperature fault status
    LCD_displayStringRowColumn(2, 0, "");
    4122:	21 e1       	ldi	r18, 0x11	; 17
    4124:	31 e0       	ldi	r19, 0x01	; 1
    4126:	82 e0       	ldi	r24, 0x02	; 2
    4128:	60 e0       	ldi	r22, 0x00	; 0
    412a:	a9 01       	movw	r20, r18
    412c:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
    if(fault_temp == FAULT_TEMP_P002)
    4130:	fe 01       	movw	r30, r28
    4132:	e9 5b       	subi	r30, 0xB9	; 185
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	80 81       	ld	r24, Z
    4138:	8d 30       	cpi	r24, 0x0D	; 13
    413a:	29 f4       	brne	.+10     	; 0x4146 <Retrieve_Faults+0x466>
        LCD_displayString("P002:Overheat!");
    413c:	85 e3       	ldi	r24, 0x35	; 53
    413e:	91 e0       	ldi	r25, 0x01	; 1
    4140:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    4144:	04 c0       	rjmp	.+8      	; 0x414e <Retrieve_Faults+0x46e>
    else
        LCD_displayString("No Temp Fault");
    4146:	84 e4       	ldi	r24, 0x44	; 68
    4148:	91 e0       	ldi	r25, 0x01	; 1
    414a:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>

    LCD_displayStringRowColumn(3, 0, "--End of List--");
    414e:	22 e5       	ldi	r18, 0x52	; 82
    4150:	31 e0       	ldi	r19, 0x01	; 1
    4152:	83 e0       	ldi	r24, 0x03	; 3
    4154:	60 e0       	ldi	r22, 0x00	; 0
    4156:	a9 01       	movw	r20, r18
    4158:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayStringRowColumn>
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	90 e4       	ldi	r25, 0x40	; 64
    4160:	ac e1       	ldi	r26, 0x1C	; 28
    4162:	b6 e4       	ldi	r27, 0x46	; 70
    4164:	8b 87       	std	Y+11, r24	; 0x0b
    4166:	9c 87       	std	Y+12, r25	; 0x0c
    4168:	ad 87       	std	Y+13, r26	; 0x0d
    416a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    416c:	6b 85       	ldd	r22, Y+11	; 0x0b
    416e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4170:	8d 85       	ldd	r24, Y+13	; 0x0d
    4172:	9e 85       	ldd	r25, Y+14	; 0x0e
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	4a ef       	ldi	r20, 0xFA	; 250
    417a:	54 e4       	ldi	r21, 0x44	; 68
    417c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4180:	dc 01       	movw	r26, r24
    4182:	cb 01       	movw	r24, r22
    4184:	8f 83       	std	Y+7, r24	; 0x07
    4186:	98 87       	std	Y+8, r25	; 0x08
    4188:	a9 87       	std	Y+9, r26	; 0x09
    418a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    418c:	6f 81       	ldd	r22, Y+7	; 0x07
    418e:	78 85       	ldd	r23, Y+8	; 0x08
    4190:	89 85       	ldd	r24, Y+9	; 0x09
    4192:	9a 85       	ldd	r25, Y+10	; 0x0a
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	40 e8       	ldi	r20, 0x80	; 128
    419a:	5f e3       	ldi	r21, 0x3F	; 63
    419c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41a0:	88 23       	and	r24, r24
    41a2:	2c f4       	brge	.+10     	; 0x41ae <Retrieve_Faults+0x4ce>
		__ticks = 1;
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	9e 83       	std	Y+6, r25	; 0x06
    41aa:	8d 83       	std	Y+5, r24	; 0x05
    41ac:	3f c0       	rjmp	.+126    	; 0x422c <Retrieve_Faults+0x54c>
	else if (__tmp > 65535)
    41ae:	6f 81       	ldd	r22, Y+7	; 0x07
    41b0:	78 85       	ldd	r23, Y+8	; 0x08
    41b2:	89 85       	ldd	r24, Y+9	; 0x09
    41b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	3f ef       	ldi	r19, 0xFF	; 255
    41ba:	4f e7       	ldi	r20, 0x7F	; 127
    41bc:	57 e4       	ldi	r21, 0x47	; 71
    41be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41c2:	18 16       	cp	r1, r24
    41c4:	4c f5       	brge	.+82     	; 0x4218 <Retrieve_Faults+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    41c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    41ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    41cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ce:	20 e0       	ldi	r18, 0x00	; 0
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	40 e2       	ldi	r20, 0x20	; 32
    41d4:	51 e4       	ldi	r21, 0x41	; 65
    41d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41da:	dc 01       	movw	r26, r24
    41dc:	cb 01       	movw	r24, r22
    41de:	bc 01       	movw	r22, r24
    41e0:	cd 01       	movw	r24, r26
    41e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	9e 83       	std	Y+6, r25	; 0x06
    41ec:	8d 83       	std	Y+5, r24	; 0x05
    41ee:	0f c0       	rjmp	.+30     	; 0x420e <Retrieve_Faults+0x52e>
    41f0:	88 ec       	ldi	r24, 0xC8	; 200
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	9c 83       	std	Y+4, r25	; 0x04
    41f6:	8b 83       	std	Y+3, r24	; 0x03
    41f8:	8b 81       	ldd	r24, Y+3	; 0x03
    41fa:	9c 81       	ldd	r25, Y+4	; 0x04
    41fc:	01 97       	sbiw	r24, 0x01	; 1
    41fe:	f1 f7       	brne	.-4      	; 0x41fc <Retrieve_Faults+0x51c>
    4200:	9c 83       	std	Y+4, r25	; 0x04
    4202:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4204:	8d 81       	ldd	r24, Y+5	; 0x05
    4206:	9e 81       	ldd	r25, Y+6	; 0x06
    4208:	01 97       	sbiw	r24, 0x01	; 1
    420a:	9e 83       	std	Y+6, r25	; 0x06
    420c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    420e:	8d 81       	ldd	r24, Y+5	; 0x05
    4210:	9e 81       	ldd	r25, Y+6	; 0x06
    4212:	00 97       	sbiw	r24, 0x00	; 0
    4214:	69 f7       	brne	.-38     	; 0x41f0 <Retrieve_Faults+0x510>
    4216:	14 c0       	rjmp	.+40     	; 0x4240 <Retrieve_Faults+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4218:	6f 81       	ldd	r22, Y+7	; 0x07
    421a:	78 85       	ldd	r23, Y+8	; 0x08
    421c:	89 85       	ldd	r24, Y+9	; 0x09
    421e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	9e 83       	std	Y+6, r25	; 0x06
    422a:	8d 83       	std	Y+5, r24	; 0x05
    422c:	8d 81       	ldd	r24, Y+5	; 0x05
    422e:	9e 81       	ldd	r25, Y+6	; 0x06
    4230:	9a 83       	std	Y+2, r25	; 0x02
    4232:	89 83       	std	Y+1, r24	; 0x01
    4234:	89 81       	ldd	r24, Y+1	; 0x01
    4236:	9a 81       	ldd	r25, Y+2	; 0x02
    4238:	01 97       	sbiw	r24, 0x01	; 1
    423a:	f1 f7       	brne	.-4      	; 0x4238 <Retrieve_Faults+0x558>
    423c:	9a 83       	std	Y+2, r25	; 0x02
    423e:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(10000);
}
    4240:	c8 5b       	subi	r28, 0xB8	; 184
    4242:	df 4f       	sbci	r29, 0xFF	; 255
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	de bf       	out	0x3e, r29	; 62
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	cd bf       	out	0x3d, r28	; 61
    424e:	cf 91       	pop	r28
    4250:	df 91       	pop	r29
    4252:	1f 91       	pop	r17
    4254:	0f 91       	pop	r16
    4256:	08 95       	ret

00004258 <stop_monitor>:

void stop_monitor(void)
{
    4258:	df 93       	push	r29
    425a:	cf 93       	push	r28
    425c:	cd b7       	in	r28, 0x3d	; 61
    425e:	de b7       	in	r29, 0x3e	; 62
    4260:	aa 97       	sbiw	r28, 0x2a	; 42
    4262:	0f b6       	in	r0, 0x3f	; 63
    4264:	f8 94       	cli
    4266:	de bf       	out	0x3e, r29	; 62
    4268:	0f be       	out	0x3f, r0	; 63
    426a:	cd bf       	out	0x3d, r28	; 61
    LCD_clearScreen();
    426c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
    LCD_displayString("Stopping...");
    4270:	82 e6       	ldi	r24, 0x62	; 98
    4272:	91 e0       	ldi	r25, 0x01	; 1
    4274:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	a6 e9       	ldi	r26, 0x96	; 150
    427e:	b3 e4       	ldi	r27, 0x43	; 67
    4280:	8f a3       	std	Y+39, r24	; 0x27
    4282:	98 a7       	std	Y+40, r25	; 0x28
    4284:	a9 a7       	std	Y+41, r26	; 0x29
    4286:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4288:	6f a1       	ldd	r22, Y+39	; 0x27
    428a:	78 a5       	ldd	r23, Y+40	; 0x28
    428c:	89 a5       	ldd	r24, Y+41	; 0x29
    428e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	4a ef       	ldi	r20, 0xFA	; 250
    4296:	54 e4       	ldi	r21, 0x44	; 68
    4298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	8b a3       	std	Y+35, r24	; 0x23
    42a2:	9c a3       	std	Y+36, r25	; 0x24
    42a4:	ad a3       	std	Y+37, r26	; 0x25
    42a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42a8:	6b a1       	ldd	r22, Y+35	; 0x23
    42aa:	7c a1       	ldd	r23, Y+36	; 0x24
    42ac:	8d a1       	ldd	r24, Y+37	; 0x25
    42ae:	9e a1       	ldd	r25, Y+38	; 0x26
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	40 e8       	ldi	r20, 0x80	; 128
    42b6:	5f e3       	ldi	r21, 0x3F	; 63
    42b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42bc:	88 23       	and	r24, r24
    42be:	2c f4       	brge	.+10     	; 0x42ca <stop_monitor+0x72>
		__ticks = 1;
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	9a a3       	std	Y+34, r25	; 0x22
    42c6:	89 a3       	std	Y+33, r24	; 0x21
    42c8:	3f c0       	rjmp	.+126    	; 0x4348 <stop_monitor+0xf0>
	else if (__tmp > 65535)
    42ca:	6b a1       	ldd	r22, Y+35	; 0x23
    42cc:	7c a1       	ldd	r23, Y+36	; 0x24
    42ce:	8d a1       	ldd	r24, Y+37	; 0x25
    42d0:	9e a1       	ldd	r25, Y+38	; 0x26
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	3f ef       	ldi	r19, 0xFF	; 255
    42d6:	4f e7       	ldi	r20, 0x7F	; 127
    42d8:	57 e4       	ldi	r21, 0x47	; 71
    42da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42de:	18 16       	cp	r1, r24
    42e0:	4c f5       	brge	.+82     	; 0x4334 <stop_monitor+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e2:	6f a1       	ldd	r22, Y+39	; 0x27
    42e4:	78 a5       	ldd	r23, Y+40	; 0x28
    42e6:	89 a5       	ldd	r24, Y+41	; 0x29
    42e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 e2       	ldi	r20, 0x20	; 32
    42f0:	51 e4       	ldi	r21, 0x41	; 65
    42f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	bc 01       	movw	r22, r24
    42fc:	cd 01       	movw	r24, r26
    42fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	9a a3       	std	Y+34, r25	; 0x22
    4308:	89 a3       	std	Y+33, r24	; 0x21
    430a:	0f c0       	rjmp	.+30     	; 0x432a <stop_monitor+0xd2>
    430c:	88 ec       	ldi	r24, 0xC8	; 200
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	98 a3       	std	Y+32, r25	; 0x20
    4312:	8f 8f       	std	Y+31, r24	; 0x1f
    4314:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4316:	98 a1       	ldd	r25, Y+32	; 0x20
    4318:	01 97       	sbiw	r24, 0x01	; 1
    431a:	f1 f7       	brne	.-4      	; 0x4318 <stop_monitor+0xc0>
    431c:	98 a3       	std	Y+32, r25	; 0x20
    431e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4320:	89 a1       	ldd	r24, Y+33	; 0x21
    4322:	9a a1       	ldd	r25, Y+34	; 0x22
    4324:	01 97       	sbiw	r24, 0x01	; 1
    4326:	9a a3       	std	Y+34, r25	; 0x22
    4328:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432a:	89 a1       	ldd	r24, Y+33	; 0x21
    432c:	9a a1       	ldd	r25, Y+34	; 0x22
    432e:	00 97       	sbiw	r24, 0x00	; 0
    4330:	69 f7       	brne	.-38     	; 0x430c <stop_monitor+0xb4>
    4332:	14 c0       	rjmp	.+40     	; 0x435c <stop_monitor+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4334:	6b a1       	ldd	r22, Y+35	; 0x23
    4336:	7c a1       	ldd	r23, Y+36	; 0x24
    4338:	8d a1       	ldd	r24, Y+37	; 0x25
    433a:	9e a1       	ldd	r25, Y+38	; 0x26
    433c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	9a a3       	std	Y+34, r25	; 0x22
    4346:	89 a3       	std	Y+33, r24	; 0x21
    4348:	89 a1       	ldd	r24, Y+33	; 0x21
    434a:	9a a1       	ldd	r25, Y+34	; 0x22
    434c:	9e 8f       	std	Y+30, r25	; 0x1e
    434e:	8d 8f       	std	Y+29, r24	; 0x1d
    4350:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4352:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4354:	01 97       	sbiw	r24, 0x01	; 1
    4356:	f1 f7       	brne	.-4      	; 0x4354 <stop_monitor+0xfc>
    4358:	9e 8f       	std	Y+30, r25	; 0x1e
    435a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(300);

    // tell Control ECU to stop
    UART_sendByte(STOP_MONITORING);
    435c:	84 e0       	ldi	r24, 0x04	; 4
    435e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <UART_sendByte>
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	a8 e4       	ldi	r26, 0x48	; 72
    4368:	b2 e4       	ldi	r27, 0x42	; 66
    436a:	89 8f       	std	Y+25, r24	; 0x19
    436c:	9a 8f       	std	Y+26, r25	; 0x1a
    436e:	ab 8f       	std	Y+27, r26	; 0x1b
    4370:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4372:	69 8d       	ldd	r22, Y+25	; 0x19
    4374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	4a ef       	ldi	r20, 0xFA	; 250
    4380:	54 e4       	ldi	r21, 0x44	; 68
    4382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
    438a:	8d 8b       	std	Y+21, r24	; 0x15
    438c:	9e 8b       	std	Y+22, r25	; 0x16
    438e:	af 8b       	std	Y+23, r26	; 0x17
    4390:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4392:	6d 89       	ldd	r22, Y+21	; 0x15
    4394:	7e 89       	ldd	r23, Y+22	; 0x16
    4396:	8f 89       	ldd	r24, Y+23	; 0x17
    4398:	98 8d       	ldd	r25, Y+24	; 0x18
    439a:	20 e0       	ldi	r18, 0x00	; 0
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	40 e8       	ldi	r20, 0x80	; 128
    43a0:	5f e3       	ldi	r21, 0x3F	; 63
    43a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43a6:	88 23       	and	r24, r24
    43a8:	2c f4       	brge	.+10     	; 0x43b4 <stop_monitor+0x15c>
		__ticks = 1;
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	9c 8b       	std	Y+20, r25	; 0x14
    43b0:	8b 8b       	std	Y+19, r24	; 0x13
    43b2:	3f c0       	rjmp	.+126    	; 0x4432 <stop_monitor+0x1da>
	else if (__tmp > 65535)
    43b4:	6d 89       	ldd	r22, Y+21	; 0x15
    43b6:	7e 89       	ldd	r23, Y+22	; 0x16
    43b8:	8f 89       	ldd	r24, Y+23	; 0x17
    43ba:	98 8d       	ldd	r25, Y+24	; 0x18
    43bc:	20 e0       	ldi	r18, 0x00	; 0
    43be:	3f ef       	ldi	r19, 0xFF	; 255
    43c0:	4f e7       	ldi	r20, 0x7F	; 127
    43c2:	57 e4       	ldi	r21, 0x47	; 71
    43c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43c8:	18 16       	cp	r1, r24
    43ca:	4c f5       	brge	.+82     	; 0x441e <stop_monitor+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43cc:	69 8d       	ldd	r22, Y+25	; 0x19
    43ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43d4:	20 e0       	ldi	r18, 0x00	; 0
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	40 e2       	ldi	r20, 0x20	; 32
    43da:	51 e4       	ldi	r21, 0x41	; 65
    43dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e0:	dc 01       	movw	r26, r24
    43e2:	cb 01       	movw	r24, r22
    43e4:	bc 01       	movw	r22, r24
    43e6:	cd 01       	movw	r24, r26
    43e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	9c 8b       	std	Y+20, r25	; 0x14
    43f2:	8b 8b       	std	Y+19, r24	; 0x13
    43f4:	0f c0       	rjmp	.+30     	; 0x4414 <stop_monitor+0x1bc>
    43f6:	88 ec       	ldi	r24, 0xC8	; 200
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	9a 8b       	std	Y+18, r25	; 0x12
    43fc:	89 8b       	std	Y+17, r24	; 0x11
    43fe:	89 89       	ldd	r24, Y+17	; 0x11
    4400:	9a 89       	ldd	r25, Y+18	; 0x12
    4402:	01 97       	sbiw	r24, 0x01	; 1
    4404:	f1 f7       	brne	.-4      	; 0x4402 <stop_monitor+0x1aa>
    4406:	9a 8b       	std	Y+18, r25	; 0x12
    4408:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    440a:	8b 89       	ldd	r24, Y+19	; 0x13
    440c:	9c 89       	ldd	r25, Y+20	; 0x14
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	9c 8b       	std	Y+20, r25	; 0x14
    4412:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4414:	8b 89       	ldd	r24, Y+19	; 0x13
    4416:	9c 89       	ldd	r25, Y+20	; 0x14
    4418:	00 97       	sbiw	r24, 0x00	; 0
    441a:	69 f7       	brne	.-38     	; 0x43f6 <stop_monitor+0x19e>
    441c:	14 c0       	rjmp	.+40     	; 0x4446 <stop_monitor+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    441e:	6d 89       	ldd	r22, Y+21	; 0x15
    4420:	7e 89       	ldd	r23, Y+22	; 0x16
    4422:	8f 89       	ldd	r24, Y+23	; 0x17
    4424:	98 8d       	ldd	r25, Y+24	; 0x18
    4426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	9c 8b       	std	Y+20, r25	; 0x14
    4430:	8b 8b       	std	Y+19, r24	; 0x13
    4432:	8b 89       	ldd	r24, Y+19	; 0x13
    4434:	9c 89       	ldd	r25, Y+20	; 0x14
    4436:	98 8b       	std	Y+16, r25	; 0x10
    4438:	8f 87       	std	Y+15, r24	; 0x0f
    443a:	8f 85       	ldd	r24, Y+15	; 0x0f
    443c:	98 89       	ldd	r25, Y+16	; 0x10
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	f1 f7       	brne	.-4      	; 0x443e <stop_monitor+0x1e6>
    4442:	98 8b       	std	Y+16, r25	; 0x10
    4444:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(50);

    g_monitoring_active = 0; // reset state
    4446:	10 92 92 01 	sts	0x0192, r1

    LCD_clearScreen();
    444a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <LCD_clearScreen>
    LCD_displayString("System is OFF");
    444e:	8e e6       	ldi	r24, 0x6E	; 110
    4450:	91 e0       	ldi	r25, 0x01	; 1
    4452:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_displayString>
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	aa ef       	ldi	r26, 0xFA	; 250
    445c:	b4 e4       	ldi	r27, 0x44	; 68
    445e:	8b 87       	std	Y+11, r24	; 0x0b
    4460:	9c 87       	std	Y+12, r25	; 0x0c
    4462:	ad 87       	std	Y+13, r26	; 0x0d
    4464:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4466:	6b 85       	ldd	r22, Y+11	; 0x0b
    4468:	7c 85       	ldd	r23, Y+12	; 0x0c
    446a:	8d 85       	ldd	r24, Y+13	; 0x0d
    446c:	9e 85       	ldd	r25, Y+14	; 0x0e
    446e:	20 e0       	ldi	r18, 0x00	; 0
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	4a ef       	ldi	r20, 0xFA	; 250
    4474:	54 e4       	ldi	r21, 0x44	; 68
    4476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    447a:	dc 01       	movw	r26, r24
    447c:	cb 01       	movw	r24, r22
    447e:	8f 83       	std	Y+7, r24	; 0x07
    4480:	98 87       	std	Y+8, r25	; 0x08
    4482:	a9 87       	std	Y+9, r26	; 0x09
    4484:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4486:	6f 81       	ldd	r22, Y+7	; 0x07
    4488:	78 85       	ldd	r23, Y+8	; 0x08
    448a:	89 85       	ldd	r24, Y+9	; 0x09
    448c:	9a 85       	ldd	r25, Y+10	; 0x0a
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e8       	ldi	r20, 0x80	; 128
    4494:	5f e3       	ldi	r21, 0x3F	; 63
    4496:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    449a:	88 23       	and	r24, r24
    449c:	2c f4       	brge	.+10     	; 0x44a8 <stop_monitor+0x250>
		__ticks = 1;
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	9e 83       	std	Y+6, r25	; 0x06
    44a4:	8d 83       	std	Y+5, r24	; 0x05
    44a6:	3f c0       	rjmp	.+126    	; 0x4526 <stop_monitor+0x2ce>
	else if (__tmp > 65535)
    44a8:	6f 81       	ldd	r22, Y+7	; 0x07
    44aa:	78 85       	ldd	r23, Y+8	; 0x08
    44ac:	89 85       	ldd	r24, Y+9	; 0x09
    44ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	3f ef       	ldi	r19, 0xFF	; 255
    44b4:	4f e7       	ldi	r20, 0x7F	; 127
    44b6:	57 e4       	ldi	r21, 0x47	; 71
    44b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44bc:	18 16       	cp	r1, r24
    44be:	4c f5       	brge	.+82     	; 0x4512 <stop_monitor+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    44c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    44c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    44c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	40 e2       	ldi	r20, 0x20	; 32
    44ce:	51 e4       	ldi	r21, 0x41	; 65
    44d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	bc 01       	movw	r22, r24
    44da:	cd 01       	movw	r24, r26
    44dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	9e 83       	std	Y+6, r25	; 0x06
    44e6:	8d 83       	std	Y+5, r24	; 0x05
    44e8:	0f c0       	rjmp	.+30     	; 0x4508 <stop_monitor+0x2b0>
    44ea:	88 ec       	ldi	r24, 0xC8	; 200
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	9c 83       	std	Y+4, r25	; 0x04
    44f0:	8b 83       	std	Y+3, r24	; 0x03
    44f2:	8b 81       	ldd	r24, Y+3	; 0x03
    44f4:	9c 81       	ldd	r25, Y+4	; 0x04
    44f6:	01 97       	sbiw	r24, 0x01	; 1
    44f8:	f1 f7       	brne	.-4      	; 0x44f6 <stop_monitor+0x29e>
    44fa:	9c 83       	std	Y+4, r25	; 0x04
    44fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4500:	9e 81       	ldd	r25, Y+6	; 0x06
    4502:	01 97       	sbiw	r24, 0x01	; 1
    4504:	9e 83       	std	Y+6, r25	; 0x06
    4506:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4508:	8d 81       	ldd	r24, Y+5	; 0x05
    450a:	9e 81       	ldd	r25, Y+6	; 0x06
    450c:	00 97       	sbiw	r24, 0x00	; 0
    450e:	69 f7       	brne	.-38     	; 0x44ea <stop_monitor+0x292>
    4510:	14 c0       	rjmp	.+40     	; 0x453a <stop_monitor+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4512:	6f 81       	ldd	r22, Y+7	; 0x07
    4514:	78 85       	ldd	r23, Y+8	; 0x08
    4516:	89 85       	ldd	r24, Y+9	; 0x09
    4518:	9a 85       	ldd	r25, Y+10	; 0x0a
    451a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451e:	dc 01       	movw	r26, r24
    4520:	cb 01       	movw	r24, r22
    4522:	9e 83       	std	Y+6, r25	; 0x06
    4524:	8d 83       	std	Y+5, r24	; 0x05
    4526:	8d 81       	ldd	r24, Y+5	; 0x05
    4528:	9e 81       	ldd	r25, Y+6	; 0x06
    452a:	9a 83       	std	Y+2, r25	; 0x02
    452c:	89 83       	std	Y+1, r24	; 0x01
    452e:	89 81       	ldd	r24, Y+1	; 0x01
    4530:	9a 81       	ldd	r25, Y+2	; 0x02
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	f1 f7       	brne	.-4      	; 0x4532 <stop_monitor+0x2da>
    4536:	9a 83       	std	Y+2, r25	; 0x02
    4538:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2000);
}
    453a:	aa 96       	adiw	r28, 0x2a	; 42
    453c:	0f b6       	in	r0, 0x3f	; 63
    453e:	f8 94       	cli
    4540:	de bf       	out	0x3e, r29	; 62
    4542:	0f be       	out	0x3f, r0	; 63
    4544:	cd bf       	out	0x3d, r28	; 61
    4546:	cf 91       	pop	r28
    4548:	df 91       	pop	r29
    454a:	08 95       	ret

0000454c <main>:

/*******************************************************************************
 *                   Main Function                                             *
 *******************************************************************************/
int main(void)
{
    454c:	df 93       	push	r29
    454e:	cf 93       	push	r28
    4550:	cd b7       	in	r28, 0x3d	; 61
    4552:	de b7       	in	r29, 0x3e	; 62
    4554:	c7 54       	subi	r28, 0x47	; 71
    4556:	d0 40       	sbci	r29, 0x00	; 0
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	f8 94       	cli
    455c:	de bf       	out	0x3e, r29	; 62
    455e:	0f be       	out	0x3f, r0	; 63
    4560:	cd bf       	out	0x3d, r28	; 61
    uint8 key = 0;
    4562:	19 ae       	std	Y+57, r1	; 0x39

    // setup LCD
    LCD_init();
    4564:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LCD_init>
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	a8 e4       	ldi	r26, 0x48	; 72
    456e:	b2 e4       	ldi	r27, 0x42	; 66
    4570:	8d ab       	std	Y+53, r24	; 0x35
    4572:	9e ab       	std	Y+54, r25	; 0x36
    4574:	af ab       	std	Y+55, r26	; 0x37
    4576:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4578:	6d a9       	ldd	r22, Y+53	; 0x35
    457a:	7e a9       	ldd	r23, Y+54	; 0x36
    457c:	8f a9       	ldd	r24, Y+55	; 0x37
    457e:	98 ad       	ldd	r25, Y+56	; 0x38
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	4a ef       	ldi	r20, 0xFA	; 250
    4586:	54 e4       	ldi	r21, 0x44	; 68
    4588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	89 ab       	std	Y+49, r24	; 0x31
    4592:	9a ab       	std	Y+50, r25	; 0x32
    4594:	ab ab       	std	Y+51, r26	; 0x33
    4596:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4598:	69 a9       	ldd	r22, Y+49	; 0x31
    459a:	7a a9       	ldd	r23, Y+50	; 0x32
    459c:	8b a9       	ldd	r24, Y+51	; 0x33
    459e:	9c a9       	ldd	r25, Y+52	; 0x34
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	40 e8       	ldi	r20, 0x80	; 128
    45a6:	5f e3       	ldi	r21, 0x3F	; 63
    45a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45ac:	88 23       	and	r24, r24
    45ae:	2c f4       	brge	.+10     	; 0x45ba <main+0x6e>
		__ticks = 1;
    45b0:	81 e0       	ldi	r24, 0x01	; 1
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	98 ab       	std	Y+48, r25	; 0x30
    45b6:	8f a7       	std	Y+47, r24	; 0x2f
    45b8:	3f c0       	rjmp	.+126    	; 0x4638 <main+0xec>
	else if (__tmp > 65535)
    45ba:	69 a9       	ldd	r22, Y+49	; 0x31
    45bc:	7a a9       	ldd	r23, Y+50	; 0x32
    45be:	8b a9       	ldd	r24, Y+51	; 0x33
    45c0:	9c a9       	ldd	r25, Y+52	; 0x34
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	3f ef       	ldi	r19, 0xFF	; 255
    45c6:	4f e7       	ldi	r20, 0x7F	; 127
    45c8:	57 e4       	ldi	r21, 0x47	; 71
    45ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45ce:	18 16       	cp	r1, r24
    45d0:	4c f5       	brge	.+82     	; 0x4624 <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d2:	6d a9       	ldd	r22, Y+53	; 0x35
    45d4:	7e a9       	ldd	r23, Y+54	; 0x36
    45d6:	8f a9       	ldd	r24, Y+55	; 0x37
    45d8:	98 ad       	ldd	r25, Y+56	; 0x38
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	40 e2       	ldi	r20, 0x20	; 32
    45e0:	51 e4       	ldi	r21, 0x41	; 65
    45e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	bc 01       	movw	r22, r24
    45ec:	cd 01       	movw	r24, r26
    45ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	98 ab       	std	Y+48, r25	; 0x30
    45f8:	8f a7       	std	Y+47, r24	; 0x2f
    45fa:	0f c0       	rjmp	.+30     	; 0x461a <main+0xce>
    45fc:	88 ec       	ldi	r24, 0xC8	; 200
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	9e a7       	std	Y+46, r25	; 0x2e
    4602:	8d a7       	std	Y+45, r24	; 0x2d
    4604:	8d a5       	ldd	r24, Y+45	; 0x2d
    4606:	9e a5       	ldd	r25, Y+46	; 0x2e
    4608:	01 97       	sbiw	r24, 0x01	; 1
    460a:	f1 f7       	brne	.-4      	; 0x4608 <main+0xbc>
    460c:	9e a7       	std	Y+46, r25	; 0x2e
    460e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4610:	8f a5       	ldd	r24, Y+47	; 0x2f
    4612:	98 a9       	ldd	r25, Y+48	; 0x30
    4614:	01 97       	sbiw	r24, 0x01	; 1
    4616:	98 ab       	std	Y+48, r25	; 0x30
    4618:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    461a:	8f a5       	ldd	r24, Y+47	; 0x2f
    461c:	98 a9       	ldd	r25, Y+48	; 0x30
    461e:	00 97       	sbiw	r24, 0x00	; 0
    4620:	69 f7       	brne	.-38     	; 0x45fc <main+0xb0>
    4622:	14 c0       	rjmp	.+40     	; 0x464c <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4624:	69 a9       	ldd	r22, Y+49	; 0x31
    4626:	7a a9       	ldd	r23, Y+50	; 0x32
    4628:	8b a9       	ldd	r24, Y+51	; 0x33
    462a:	9c a9       	ldd	r25, Y+52	; 0x34
    462c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	98 ab       	std	Y+48, r25	; 0x30
    4636:	8f a7       	std	Y+47, r24	; 0x2f
    4638:	8f a5       	ldd	r24, Y+47	; 0x2f
    463a:	98 a9       	ldd	r25, Y+48	; 0x30
    463c:	9c a7       	std	Y+44, r25	; 0x2c
    463e:	8b a7       	std	Y+43, r24	; 0x2b
    4640:	8b a5       	ldd	r24, Y+43	; 0x2b
    4642:	9c a5       	ldd	r25, Y+44	; 0x2c
    4644:	01 97       	sbiw	r24, 0x01	; 1
    4646:	f1 f7       	brne	.-4      	; 0x4644 <main+0xf8>
    4648:	9c a7       	std	Y+44, r25	; 0x2c
    464a:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(50);

    // setup UART for communication
    UART_ConfigType uartConfig = {UART_8BIT, disabled, ONE_STOP_BIT, 9600};
    464c:	9e 01       	movw	r18, r28
    464e:	26 5c       	subi	r18, 0xC6	; 198
    4650:	3f 4f       	sbci	r19, 0xFF	; 255
    4652:	25 96       	adiw	r28, 0x05	; 5
    4654:	3f af       	std	Y+63, r19	; 0x3f
    4656:	2e af       	std	Y+62, r18	; 0x3e
    4658:	25 97       	sbiw	r28, 0x05	; 5
    465a:	84 e8       	ldi	r24, 0x84	; 132
    465c:	91 e0       	ldi	r25, 0x01	; 1
    465e:	27 96       	adiw	r28, 0x07	; 7
    4660:	9f af       	std	Y+63, r25	; 0x3f
    4662:	8e af       	std	Y+62, r24	; 0x3e
    4664:	27 97       	sbiw	r28, 0x07	; 7
    4666:	97 e0       	ldi	r25, 0x07	; 7
    4668:	28 96       	adiw	r28, 0x08	; 8
    466a:	9f af       	std	Y+63, r25	; 0x3f
    466c:	28 97       	sbiw	r28, 0x08	; 8
    466e:	27 96       	adiw	r28, 0x07	; 7
    4670:	ee ad       	ldd	r30, Y+62	; 0x3e
    4672:	ff ad       	ldd	r31, Y+63	; 0x3f
    4674:	27 97       	sbiw	r28, 0x07	; 7
    4676:	00 80       	ld	r0, Z
    4678:	27 96       	adiw	r28, 0x07	; 7
    467a:	2e ad       	ldd	r18, Y+62	; 0x3e
    467c:	3f ad       	ldd	r19, Y+63	; 0x3f
    467e:	27 97       	sbiw	r28, 0x07	; 7
    4680:	2f 5f       	subi	r18, 0xFF	; 255
    4682:	3f 4f       	sbci	r19, 0xFF	; 255
    4684:	27 96       	adiw	r28, 0x07	; 7
    4686:	3f af       	std	Y+63, r19	; 0x3f
    4688:	2e af       	std	Y+62, r18	; 0x3e
    468a:	27 97       	sbiw	r28, 0x07	; 7
    468c:	25 96       	adiw	r28, 0x05	; 5
    468e:	ee ad       	ldd	r30, Y+62	; 0x3e
    4690:	ff ad       	ldd	r31, Y+63	; 0x3f
    4692:	25 97       	sbiw	r28, 0x05	; 5
    4694:	00 82       	st	Z, r0
    4696:	25 96       	adiw	r28, 0x05	; 5
    4698:	2e ad       	ldd	r18, Y+62	; 0x3e
    469a:	3f ad       	ldd	r19, Y+63	; 0x3f
    469c:	25 97       	sbiw	r28, 0x05	; 5
    469e:	2f 5f       	subi	r18, 0xFF	; 255
    46a0:	3f 4f       	sbci	r19, 0xFF	; 255
    46a2:	25 96       	adiw	r28, 0x05	; 5
    46a4:	3f af       	std	Y+63, r19	; 0x3f
    46a6:	2e af       	std	Y+62, r18	; 0x3e
    46a8:	25 97       	sbiw	r28, 0x05	; 5
    46aa:	28 96       	adiw	r28, 0x08	; 8
    46ac:	3f ad       	ldd	r19, Y+63	; 0x3f
    46ae:	28 97       	sbiw	r28, 0x08	; 8
    46b0:	31 50       	subi	r19, 0x01	; 1
    46b2:	28 96       	adiw	r28, 0x08	; 8
    46b4:	3f af       	std	Y+63, r19	; 0x3f
    46b6:	28 97       	sbiw	r28, 0x08	; 8
    46b8:	28 96       	adiw	r28, 0x08	; 8
    46ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    46bc:	28 97       	sbiw	r28, 0x08	; 8
    46be:	88 23       	and	r24, r24
    46c0:	b1 f6       	brne	.-84     	; 0x466e <main+0x122>
    UART_init(&uartConfig);
    46c2:	ce 01       	movw	r24, r28
    46c4:	ca 96       	adiw	r24, 0x3a	; 58
    46c6:	0e 94 ef 0b 	call	0x17de	; 0x17de <UART_init>
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	a8 e4       	ldi	r26, 0x48	; 72
    46d0:	b2 e4       	ldi	r27, 0x42	; 66
    46d2:	8f a3       	std	Y+39, r24	; 0x27
    46d4:	98 a7       	std	Y+40, r25	; 0x28
    46d6:	a9 a7       	std	Y+41, r26	; 0x29
    46d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46da:	6f a1       	ldd	r22, Y+39	; 0x27
    46dc:	78 a5       	ldd	r23, Y+40	; 0x28
    46de:	89 a5       	ldd	r24, Y+41	; 0x29
    46e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	4a ef       	ldi	r20, 0xFA	; 250
    46e8:	54 e4       	ldi	r21, 0x44	; 68
    46ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ee:	dc 01       	movw	r26, r24
    46f0:	cb 01       	movw	r24, r22
    46f2:	8b a3       	std	Y+35, r24	; 0x23
    46f4:	9c a3       	std	Y+36, r25	; 0x24
    46f6:	ad a3       	std	Y+37, r26	; 0x25
    46f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46fa:	6b a1       	ldd	r22, Y+35	; 0x23
    46fc:	7c a1       	ldd	r23, Y+36	; 0x24
    46fe:	8d a1       	ldd	r24, Y+37	; 0x25
    4700:	9e a1       	ldd	r25, Y+38	; 0x26
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	40 e8       	ldi	r20, 0x80	; 128
    4708:	5f e3       	ldi	r21, 0x3F	; 63
    470a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    470e:	88 23       	and	r24, r24
    4710:	2c f4       	brge	.+10     	; 0x471c <main+0x1d0>
		__ticks = 1;
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	9a a3       	std	Y+34, r25	; 0x22
    4718:	89 a3       	std	Y+33, r24	; 0x21
    471a:	3f c0       	rjmp	.+126    	; 0x479a <main+0x24e>
	else if (__tmp > 65535)
    471c:	6b a1       	ldd	r22, Y+35	; 0x23
    471e:	7c a1       	ldd	r23, Y+36	; 0x24
    4720:	8d a1       	ldd	r24, Y+37	; 0x25
    4722:	9e a1       	ldd	r25, Y+38	; 0x26
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	3f ef       	ldi	r19, 0xFF	; 255
    4728:	4f e7       	ldi	r20, 0x7F	; 127
    472a:	57 e4       	ldi	r21, 0x47	; 71
    472c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4730:	18 16       	cp	r1, r24
    4732:	4c f5       	brge	.+82     	; 0x4786 <main+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4734:	6f a1       	ldd	r22, Y+39	; 0x27
    4736:	78 a5       	ldd	r23, Y+40	; 0x28
    4738:	89 a5       	ldd	r24, Y+41	; 0x29
    473a:	9a a5       	ldd	r25, Y+42	; 0x2a
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	30 e0       	ldi	r19, 0x00	; 0
    4740:	40 e2       	ldi	r20, 0x20	; 32
    4742:	51 e4       	ldi	r21, 0x41	; 65
    4744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4748:	dc 01       	movw	r26, r24
    474a:	cb 01       	movw	r24, r22
    474c:	bc 01       	movw	r22, r24
    474e:	cd 01       	movw	r24, r26
    4750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4754:	dc 01       	movw	r26, r24
    4756:	cb 01       	movw	r24, r22
    4758:	9a a3       	std	Y+34, r25	; 0x22
    475a:	89 a3       	std	Y+33, r24	; 0x21
    475c:	0f c0       	rjmp	.+30     	; 0x477c <main+0x230>
    475e:	88 ec       	ldi	r24, 0xC8	; 200
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	98 a3       	std	Y+32, r25	; 0x20
    4764:	8f 8f       	std	Y+31, r24	; 0x1f
    4766:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4768:	98 a1       	ldd	r25, Y+32	; 0x20
    476a:	01 97       	sbiw	r24, 0x01	; 1
    476c:	f1 f7       	brne	.-4      	; 0x476a <main+0x21e>
    476e:	98 a3       	std	Y+32, r25	; 0x20
    4770:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4772:	89 a1       	ldd	r24, Y+33	; 0x21
    4774:	9a a1       	ldd	r25, Y+34	; 0x22
    4776:	01 97       	sbiw	r24, 0x01	; 1
    4778:	9a a3       	std	Y+34, r25	; 0x22
    477a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    477c:	89 a1       	ldd	r24, Y+33	; 0x21
    477e:	9a a1       	ldd	r25, Y+34	; 0x22
    4780:	00 97       	sbiw	r24, 0x00	; 0
    4782:	69 f7       	brne	.-38     	; 0x475e <main+0x212>
    4784:	14 c0       	rjmp	.+40     	; 0x47ae <main+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4786:	6b a1       	ldd	r22, Y+35	; 0x23
    4788:	7c a1       	ldd	r23, Y+36	; 0x24
    478a:	8d a1       	ldd	r24, Y+37	; 0x25
    478c:	9e a1       	ldd	r25, Y+38	; 0x26
    478e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	9a a3       	std	Y+34, r25	; 0x22
    4798:	89 a3       	std	Y+33, r24	; 0x21
    479a:	89 a1       	ldd	r24, Y+33	; 0x21
    479c:	9a a1       	ldd	r25, Y+34	; 0x22
    479e:	9e 8f       	std	Y+30, r25	; 0x1e
    47a0:	8d 8f       	std	Y+29, r24	; 0x1d
    47a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47a6:	01 97       	sbiw	r24, 0x01	; 1
    47a8:	f1 f7       	brne	.-4      	; 0x47a6 <main+0x25a>
    47aa:	9e 8f       	std	Y+30, r25	; 0x1e
    47ac:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(50);

    while(1)
    {
        display_menu();  // show menu on LCD
    47ae:	0e 94 f5 13 	call	0x27ea	; 0x27ea <display_menu>

        // wait for user input
        key = KEYPAD_getPressedKey();
    47b2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <KEYPAD_getPressedKey>
    47b6:	89 af       	std	Y+57, r24	; 0x39

        if(key >= 1 && key <= 4)
    47b8:	89 ad       	ldd	r24, Y+57	; 0x39
    47ba:	88 23       	and	r24, r24
    47bc:	09 f4       	brne	.+2      	; 0x47c0 <main+0x274>
    47be:	ad c0       	rjmp	.+346    	; 0x491a <main+0x3ce>
    47c0:	89 ad       	ldd	r24, Y+57	; 0x39
    47c2:	85 30       	cpi	r24, 0x05	; 5
    47c4:	08 f0       	brcs	.+2      	; 0x47c8 <main+0x27c>
    47c6:	a9 c0       	rjmp	.+338    	; 0x491a <main+0x3ce>
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	a8 e4       	ldi	r26, 0x48	; 72
    47ce:	b3 e4       	ldi	r27, 0x43	; 67
    47d0:	89 8f       	std	Y+25, r24	; 0x19
    47d2:	9a 8f       	std	Y+26, r25	; 0x1a
    47d4:	ab 8f       	std	Y+27, r26	; 0x1b
    47d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d8:	69 8d       	ldd	r22, Y+25	; 0x19
    47da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47e0:	20 e0       	ldi	r18, 0x00	; 0
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	4a ef       	ldi	r20, 0xFA	; 250
    47e6:	54 e4       	ldi	r21, 0x44	; 68
    47e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ec:	dc 01       	movw	r26, r24
    47ee:	cb 01       	movw	r24, r22
    47f0:	8d 8b       	std	Y+21, r24	; 0x15
    47f2:	9e 8b       	std	Y+22, r25	; 0x16
    47f4:	af 8b       	std	Y+23, r26	; 0x17
    47f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47f8:	6d 89       	ldd	r22, Y+21	; 0x15
    47fa:	7e 89       	ldd	r23, Y+22	; 0x16
    47fc:	8f 89       	ldd	r24, Y+23	; 0x17
    47fe:	98 8d       	ldd	r25, Y+24	; 0x18
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	40 e8       	ldi	r20, 0x80	; 128
    4806:	5f e3       	ldi	r21, 0x3F	; 63
    4808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    480c:	88 23       	and	r24, r24
    480e:	2c f4       	brge	.+10     	; 0x481a <main+0x2ce>
		__ticks = 1;
    4810:	81 e0       	ldi	r24, 0x01	; 1
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	9c 8b       	std	Y+20, r25	; 0x14
    4816:	8b 8b       	std	Y+19, r24	; 0x13
    4818:	3f c0       	rjmp	.+126    	; 0x4898 <main+0x34c>
	else if (__tmp > 65535)
    481a:	6d 89       	ldd	r22, Y+21	; 0x15
    481c:	7e 89       	ldd	r23, Y+22	; 0x16
    481e:	8f 89       	ldd	r24, Y+23	; 0x17
    4820:	98 8d       	ldd	r25, Y+24	; 0x18
    4822:	20 e0       	ldi	r18, 0x00	; 0
    4824:	3f ef       	ldi	r19, 0xFF	; 255
    4826:	4f e7       	ldi	r20, 0x7F	; 127
    4828:	57 e4       	ldi	r21, 0x47	; 71
    482a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    482e:	18 16       	cp	r1, r24
    4830:	4c f5       	brge	.+82     	; 0x4884 <main+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4832:	69 8d       	ldd	r22, Y+25	; 0x19
    4834:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4836:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4838:	9c 8d       	ldd	r25, Y+28	; 0x1c
    483a:	20 e0       	ldi	r18, 0x00	; 0
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	40 e2       	ldi	r20, 0x20	; 32
    4840:	51 e4       	ldi	r21, 0x41	; 65
    4842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	bc 01       	movw	r22, r24
    484c:	cd 01       	movw	r24, r26
    484e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	9c 8b       	std	Y+20, r25	; 0x14
    4858:	8b 8b       	std	Y+19, r24	; 0x13
    485a:	0f c0       	rjmp	.+30     	; 0x487a <main+0x32e>
    485c:	88 ec       	ldi	r24, 0xC8	; 200
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	9a 8b       	std	Y+18, r25	; 0x12
    4862:	89 8b       	std	Y+17, r24	; 0x11
    4864:	89 89       	ldd	r24, Y+17	; 0x11
    4866:	9a 89       	ldd	r25, Y+18	; 0x12
    4868:	01 97       	sbiw	r24, 0x01	; 1
    486a:	f1 f7       	brne	.-4      	; 0x4868 <main+0x31c>
    486c:	9a 8b       	std	Y+18, r25	; 0x12
    486e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4870:	8b 89       	ldd	r24, Y+19	; 0x13
    4872:	9c 89       	ldd	r25, Y+20	; 0x14
    4874:	01 97       	sbiw	r24, 0x01	; 1
    4876:	9c 8b       	std	Y+20, r25	; 0x14
    4878:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    487a:	8b 89       	ldd	r24, Y+19	; 0x13
    487c:	9c 89       	ldd	r25, Y+20	; 0x14
    487e:	00 97       	sbiw	r24, 0x00	; 0
    4880:	69 f7       	brne	.-38     	; 0x485c <main+0x310>
    4882:	14 c0       	rjmp	.+40     	; 0x48ac <main+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4884:	6d 89       	ldd	r22, Y+21	; 0x15
    4886:	7e 89       	ldd	r23, Y+22	; 0x16
    4888:	8f 89       	ldd	r24, Y+23	; 0x17
    488a:	98 8d       	ldd	r25, Y+24	; 0x18
    488c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	9c 8b       	std	Y+20, r25	; 0x14
    4896:	8b 8b       	std	Y+19, r24	; 0x13
    4898:	8b 89       	ldd	r24, Y+19	; 0x13
    489a:	9c 89       	ldd	r25, Y+20	; 0x14
    489c:	98 8b       	std	Y+16, r25	; 0x10
    489e:	8f 87       	std	Y+15, r24	; 0x0f
    48a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    48a2:	98 89       	ldd	r25, Y+16	; 0x10
    48a4:	01 97       	sbiw	r24, 0x01	; 1
    48a6:	f1 f7       	brne	.-4      	; 0x48a4 <main+0x358>
    48a8:	98 8b       	std	Y+16, r25	; 0x10
    48aa:	8f 87       	std	Y+15, r24	; 0x0f
        {
            _delay_ms(200);  // small debounce

            // choose function based on key
            switch(key)
    48ac:	89 ad       	ldd	r24, Y+57	; 0x39
    48ae:	e8 2f       	mov	r30, r24
    48b0:	f0 e0       	ldi	r31, 0x00	; 0
    48b2:	23 96       	adiw	r28, 0x03	; 3
    48b4:	ff af       	std	Y+63, r31	; 0x3f
    48b6:	ee af       	std	Y+62, r30	; 0x3e
    48b8:	23 97       	sbiw	r28, 0x03	; 3
    48ba:	23 96       	adiw	r28, 0x03	; 3
    48bc:	2e ad       	ldd	r18, Y+62	; 0x3e
    48be:	3f ad       	ldd	r19, Y+63	; 0x3f
    48c0:	23 97       	sbiw	r28, 0x03	; 3
    48c2:	22 30       	cpi	r18, 0x02	; 2
    48c4:	31 05       	cpc	r19, r1
    48c6:	09 f1       	breq	.+66     	; 0x490a <main+0x3be>
    48c8:	23 96       	adiw	r28, 0x03	; 3
    48ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    48cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    48ce:	23 97       	sbiw	r28, 0x03	; 3
    48d0:	83 30       	cpi	r24, 0x03	; 3
    48d2:	91 05       	cpc	r25, r1
    48d4:	44 f4       	brge	.+16     	; 0x48e6 <main+0x39a>
    48d6:	23 96       	adiw	r28, 0x03	; 3
    48d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    48da:	ff ad       	ldd	r31, Y+63	; 0x3f
    48dc:	23 97       	sbiw	r28, 0x03	; 3
    48de:	e1 30       	cpi	r30, 0x01	; 1
    48e0:	f1 05       	cpc	r31, r1
    48e2:	81 f0       	breq	.+32     	; 0x4904 <main+0x3b8>
    48e4:	1a c0       	rjmp	.+52     	; 0x491a <main+0x3ce>
    48e6:	23 96       	adiw	r28, 0x03	; 3
    48e8:	2e ad       	ldd	r18, Y+62	; 0x3e
    48ea:	3f ad       	ldd	r19, Y+63	; 0x3f
    48ec:	23 97       	sbiw	r28, 0x03	; 3
    48ee:	23 30       	cpi	r18, 0x03	; 3
    48f0:	31 05       	cpc	r19, r1
    48f2:	71 f0       	breq	.+28     	; 0x4910 <main+0x3c4>
    48f4:	23 96       	adiw	r28, 0x03	; 3
    48f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    48f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    48fa:	23 97       	sbiw	r28, 0x03	; 3
    48fc:	84 30       	cpi	r24, 0x04	; 4
    48fe:	91 05       	cpc	r25, r1
    4900:	51 f0       	breq	.+20     	; 0x4916 <main+0x3ca>
    4902:	0b c0       	rjmp	.+22     	; 0x491a <main+0x3ce>
            {
                case 1:
                    StartOperation();
    4904:	0e 94 17 14 	call	0x282e	; 0x282e <StartOperation>
    4908:	08 c0       	rjmp	.+16     	; 0x491a <main+0x3ce>
                    break;

                case 2:
                    DisplayValues();
    490a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <DisplayValues>
    490e:	05 c0       	rjmp	.+10     	; 0x491a <main+0x3ce>
                    break;

                case 3:
                    Retrieve_Faults();
    4910:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <Retrieve_Faults>
    4914:	02 c0       	rjmp	.+4      	; 0x491a <main+0x3ce>
                    break;

                case 4:
                    stop_monitor();
    4916:	0e 94 2c 21 	call	0x4258	; 0x4258 <stop_monitor>
    491a:	80 e0       	ldi	r24, 0x00	; 0
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	a8 ec       	ldi	r26, 0xC8	; 200
    4920:	b2 e4       	ldi	r27, 0x42	; 66
    4922:	8b 87       	std	Y+11, r24	; 0x0b
    4924:	9c 87       	std	Y+12, r25	; 0x0c
    4926:	ad 87       	std	Y+13, r26	; 0x0d
    4928:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    492a:	6b 85       	ldd	r22, Y+11	; 0x0b
    492c:	7c 85       	ldd	r23, Y+12	; 0x0c
    492e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4930:	9e 85       	ldd	r25, Y+14	; 0x0e
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	4a ef       	ldi	r20, 0xFA	; 250
    4938:	54 e4       	ldi	r21, 0x44	; 68
    493a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    493e:	dc 01       	movw	r26, r24
    4940:	cb 01       	movw	r24, r22
    4942:	8f 83       	std	Y+7, r24	; 0x07
    4944:	98 87       	std	Y+8, r25	; 0x08
    4946:	a9 87       	std	Y+9, r26	; 0x09
    4948:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    494a:	6f 81       	ldd	r22, Y+7	; 0x07
    494c:	78 85       	ldd	r23, Y+8	; 0x08
    494e:	89 85       	ldd	r24, Y+9	; 0x09
    4950:	9a 85       	ldd	r25, Y+10	; 0x0a
    4952:	20 e0       	ldi	r18, 0x00	; 0
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	40 e8       	ldi	r20, 0x80	; 128
    4958:	5f e3       	ldi	r21, 0x3F	; 63
    495a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    495e:	88 23       	and	r24, r24
    4960:	2c f4       	brge	.+10     	; 0x496c <main+0x420>
		__ticks = 1;
    4962:	81 e0       	ldi	r24, 0x01	; 1
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	9e 83       	std	Y+6, r25	; 0x06
    4968:	8d 83       	std	Y+5, r24	; 0x05
    496a:	3f c0       	rjmp	.+126    	; 0x49ea <main+0x49e>
	else if (__tmp > 65535)
    496c:	6f 81       	ldd	r22, Y+7	; 0x07
    496e:	78 85       	ldd	r23, Y+8	; 0x08
    4970:	89 85       	ldd	r24, Y+9	; 0x09
    4972:	9a 85       	ldd	r25, Y+10	; 0x0a
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	3f ef       	ldi	r19, 0xFF	; 255
    4978:	4f e7       	ldi	r20, 0x7F	; 127
    497a:	57 e4       	ldi	r21, 0x47	; 71
    497c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4980:	18 16       	cp	r1, r24
    4982:	4c f5       	brge	.+82     	; 0x49d6 <main+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4984:	6b 85       	ldd	r22, Y+11	; 0x0b
    4986:	7c 85       	ldd	r23, Y+12	; 0x0c
    4988:	8d 85       	ldd	r24, Y+13	; 0x0d
    498a:	9e 85       	ldd	r25, Y+14	; 0x0e
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	40 e2       	ldi	r20, 0x20	; 32
    4992:	51 e4       	ldi	r21, 0x41	; 65
    4994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	bc 01       	movw	r22, r24
    499e:	cd 01       	movw	r24, r26
    49a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49a4:	dc 01       	movw	r26, r24
    49a6:	cb 01       	movw	r24, r22
    49a8:	9e 83       	std	Y+6, r25	; 0x06
    49aa:	8d 83       	std	Y+5, r24	; 0x05
    49ac:	0f c0       	rjmp	.+30     	; 0x49cc <main+0x480>
    49ae:	88 ec       	ldi	r24, 0xC8	; 200
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	9c 83       	std	Y+4, r25	; 0x04
    49b4:	8b 83       	std	Y+3, r24	; 0x03
    49b6:	8b 81       	ldd	r24, Y+3	; 0x03
    49b8:	9c 81       	ldd	r25, Y+4	; 0x04
    49ba:	01 97       	sbiw	r24, 0x01	; 1
    49bc:	f1 f7       	brne	.-4      	; 0x49ba <main+0x46e>
    49be:	9c 83       	std	Y+4, r25	; 0x04
    49c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49c2:	8d 81       	ldd	r24, Y+5	; 0x05
    49c4:	9e 81       	ldd	r25, Y+6	; 0x06
    49c6:	01 97       	sbiw	r24, 0x01	; 1
    49c8:	9e 83       	std	Y+6, r25	; 0x06
    49ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49cc:	8d 81       	ldd	r24, Y+5	; 0x05
    49ce:	9e 81       	ldd	r25, Y+6	; 0x06
    49d0:	00 97       	sbiw	r24, 0x00	; 0
    49d2:	69 f7       	brne	.-38     	; 0x49ae <main+0x462>
    49d4:	ec ce       	rjmp	.-552    	; 0x47ae <main+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49d6:	6f 81       	ldd	r22, Y+7	; 0x07
    49d8:	78 85       	ldd	r23, Y+8	; 0x08
    49da:	89 85       	ldd	r24, Y+9	; 0x09
    49dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    49de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49e2:	dc 01       	movw	r26, r24
    49e4:	cb 01       	movw	r24, r22
    49e6:	9e 83       	std	Y+6, r25	; 0x06
    49e8:	8d 83       	std	Y+5, r24	; 0x05
    49ea:	8d 81       	ldd	r24, Y+5	; 0x05
    49ec:	9e 81       	ldd	r25, Y+6	; 0x06
    49ee:	9a 83       	std	Y+2, r25	; 0x02
    49f0:	89 83       	std	Y+1, r24	; 0x01
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	9a 81       	ldd	r25, Y+2	; 0x02
    49f6:	01 97       	sbiw	r24, 0x01	; 1
    49f8:	f1 f7       	brne	.-4      	; 0x49f6 <main+0x4aa>
    49fa:	9a 83       	std	Y+2, r25	; 0x02
    49fc:	89 83       	std	Y+1, r24	; 0x01
    49fe:	d7 ce       	rjmp	.-594    	; 0x47ae <main+0x262>

00004a00 <__udivmodsi4>:
    4a00:	a1 e2       	ldi	r26, 0x21	; 33
    4a02:	1a 2e       	mov	r1, r26
    4a04:	aa 1b       	sub	r26, r26
    4a06:	bb 1b       	sub	r27, r27
    4a08:	fd 01       	movw	r30, r26
    4a0a:	0d c0       	rjmp	.+26     	; 0x4a26 <__udivmodsi4_ep>

00004a0c <__udivmodsi4_loop>:
    4a0c:	aa 1f       	adc	r26, r26
    4a0e:	bb 1f       	adc	r27, r27
    4a10:	ee 1f       	adc	r30, r30
    4a12:	ff 1f       	adc	r31, r31
    4a14:	a2 17       	cp	r26, r18
    4a16:	b3 07       	cpc	r27, r19
    4a18:	e4 07       	cpc	r30, r20
    4a1a:	f5 07       	cpc	r31, r21
    4a1c:	20 f0       	brcs	.+8      	; 0x4a26 <__udivmodsi4_ep>
    4a1e:	a2 1b       	sub	r26, r18
    4a20:	b3 0b       	sbc	r27, r19
    4a22:	e4 0b       	sbc	r30, r20
    4a24:	f5 0b       	sbc	r31, r21

00004a26 <__udivmodsi4_ep>:
    4a26:	66 1f       	adc	r22, r22
    4a28:	77 1f       	adc	r23, r23
    4a2a:	88 1f       	adc	r24, r24
    4a2c:	99 1f       	adc	r25, r25
    4a2e:	1a 94       	dec	r1
    4a30:	69 f7       	brne	.-38     	; 0x4a0c <__udivmodsi4_loop>
    4a32:	60 95       	com	r22
    4a34:	70 95       	com	r23
    4a36:	80 95       	com	r24
    4a38:	90 95       	com	r25
    4a3a:	9b 01       	movw	r18, r22
    4a3c:	ac 01       	movw	r20, r24
    4a3e:	bd 01       	movw	r22, r26
    4a40:	cf 01       	movw	r24, r30
    4a42:	08 95       	ret

00004a44 <__prologue_saves__>:
    4a44:	2f 92       	push	r2
    4a46:	3f 92       	push	r3
    4a48:	4f 92       	push	r4
    4a4a:	5f 92       	push	r5
    4a4c:	6f 92       	push	r6
    4a4e:	7f 92       	push	r7
    4a50:	8f 92       	push	r8
    4a52:	9f 92       	push	r9
    4a54:	af 92       	push	r10
    4a56:	bf 92       	push	r11
    4a58:	cf 92       	push	r12
    4a5a:	df 92       	push	r13
    4a5c:	ef 92       	push	r14
    4a5e:	ff 92       	push	r15
    4a60:	0f 93       	push	r16
    4a62:	1f 93       	push	r17
    4a64:	cf 93       	push	r28
    4a66:	df 93       	push	r29
    4a68:	cd b7       	in	r28, 0x3d	; 61
    4a6a:	de b7       	in	r29, 0x3e	; 62
    4a6c:	ca 1b       	sub	r28, r26
    4a6e:	db 0b       	sbc	r29, r27
    4a70:	0f b6       	in	r0, 0x3f	; 63
    4a72:	f8 94       	cli
    4a74:	de bf       	out	0x3e, r29	; 62
    4a76:	0f be       	out	0x3f, r0	; 63
    4a78:	cd bf       	out	0x3d, r28	; 61
    4a7a:	09 94       	ijmp

00004a7c <__epilogue_restores__>:
    4a7c:	2a 88       	ldd	r2, Y+18	; 0x12
    4a7e:	39 88       	ldd	r3, Y+17	; 0x11
    4a80:	48 88       	ldd	r4, Y+16	; 0x10
    4a82:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a84:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a86:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a88:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a8e:	b9 84       	ldd	r11, Y+9	; 0x09
    4a90:	c8 84       	ldd	r12, Y+8	; 0x08
    4a92:	df 80       	ldd	r13, Y+7	; 0x07
    4a94:	ee 80       	ldd	r14, Y+6	; 0x06
    4a96:	fd 80       	ldd	r15, Y+5	; 0x05
    4a98:	0c 81       	ldd	r16, Y+4	; 0x04
    4a9a:	1b 81       	ldd	r17, Y+3	; 0x03
    4a9c:	aa 81       	ldd	r26, Y+2	; 0x02
    4a9e:	b9 81       	ldd	r27, Y+1	; 0x01
    4aa0:	ce 0f       	add	r28, r30
    4aa2:	d1 1d       	adc	r29, r1
    4aa4:	0f b6       	in	r0, 0x3f	; 63
    4aa6:	f8 94       	cli
    4aa8:	de bf       	out	0x3e, r29	; 62
    4aaa:	0f be       	out	0x3f, r0	; 63
    4aac:	cd bf       	out	0x3d, r28	; 61
    4aae:	ed 01       	movw	r28, r26
    4ab0:	08 95       	ret

00004ab2 <itoa>:
    4ab2:	fb 01       	movw	r30, r22
    4ab4:	9f 01       	movw	r18, r30
    4ab6:	e8 94       	clt
    4ab8:	42 30       	cpi	r20, 0x02	; 2
    4aba:	c4 f0       	brlt	.+48     	; 0x4aec <itoa+0x3a>
    4abc:	45 32       	cpi	r20, 0x25	; 37
    4abe:	b4 f4       	brge	.+44     	; 0x4aec <itoa+0x3a>
    4ac0:	4a 30       	cpi	r20, 0x0A	; 10
    4ac2:	29 f4       	brne	.+10     	; 0x4ace <itoa+0x1c>
    4ac4:	97 fb       	bst	r25, 7
    4ac6:	1e f4       	brtc	.+6      	; 0x4ace <itoa+0x1c>
    4ac8:	90 95       	com	r25
    4aca:	81 95       	neg	r24
    4acc:	9f 4f       	sbci	r25, 0xFF	; 255
    4ace:	64 2f       	mov	r22, r20
    4ad0:	77 27       	eor	r23, r23
    4ad2:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__udivmodhi4>
    4ad6:	80 5d       	subi	r24, 0xD0	; 208
    4ad8:	8a 33       	cpi	r24, 0x3A	; 58
    4ada:	0c f0       	brlt	.+2      	; 0x4ade <itoa+0x2c>
    4adc:	89 5d       	subi	r24, 0xD9	; 217
    4ade:	81 93       	st	Z+, r24
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	00 97       	sbiw	r24, 0x00	; 0
    4ae4:	a1 f7       	brne	.-24     	; 0x4ace <itoa+0x1c>
    4ae6:	16 f4       	brtc	.+4      	; 0x4aec <itoa+0x3a>
    4ae8:	5d e2       	ldi	r21, 0x2D	; 45
    4aea:	51 93       	st	Z+, r21
    4aec:	10 82       	st	Z, r1
    4aee:	c9 01       	movw	r24, r18
    4af0:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <strrev>

00004af4 <strrev>:
    4af4:	dc 01       	movw	r26, r24
    4af6:	fc 01       	movw	r30, r24
    4af8:	67 2f       	mov	r22, r23
    4afa:	71 91       	ld	r23, Z+
    4afc:	77 23       	and	r23, r23
    4afe:	e1 f7       	brne	.-8      	; 0x4af8 <strrev+0x4>
    4b00:	32 97       	sbiw	r30, 0x02	; 2
    4b02:	04 c0       	rjmp	.+8      	; 0x4b0c <strrev+0x18>
    4b04:	7c 91       	ld	r23, X
    4b06:	6d 93       	st	X+, r22
    4b08:	70 83       	st	Z, r23
    4b0a:	62 91       	ld	r22, -Z
    4b0c:	ae 17       	cp	r26, r30
    4b0e:	bf 07       	cpc	r27, r31
    4b10:	c8 f3       	brcs	.-14     	; 0x4b04 <strrev+0x10>
    4b12:	08 95       	ret

00004b14 <__udivmodhi4>:
    4b14:	aa 1b       	sub	r26, r26
    4b16:	bb 1b       	sub	r27, r27
    4b18:	51 e1       	ldi	r21, 0x11	; 17
    4b1a:	07 c0       	rjmp	.+14     	; 0x4b2a <__udivmodhi4_ep>

00004b1c <__udivmodhi4_loop>:
    4b1c:	aa 1f       	adc	r26, r26
    4b1e:	bb 1f       	adc	r27, r27
    4b20:	a6 17       	cp	r26, r22
    4b22:	b7 07       	cpc	r27, r23
    4b24:	10 f0       	brcs	.+4      	; 0x4b2a <__udivmodhi4_ep>
    4b26:	a6 1b       	sub	r26, r22
    4b28:	b7 0b       	sbc	r27, r23

00004b2a <__udivmodhi4_ep>:
    4b2a:	88 1f       	adc	r24, r24
    4b2c:	99 1f       	adc	r25, r25
    4b2e:	5a 95       	dec	r21
    4b30:	a9 f7       	brne	.-22     	; 0x4b1c <__udivmodhi4_loop>
    4b32:	80 95       	com	r24
    4b34:	90 95       	com	r25
    4b36:	bc 01       	movw	r22, r24
    4b38:	cd 01       	movw	r24, r26
    4b3a:	08 95       	ret

00004b3c <_exit>:
    4b3c:	f8 94       	cli

00004b3e <__stop_program>:
    4b3e:	ff cf       	rjmp	.-2      	; 0x4b3e <__stop_program>
