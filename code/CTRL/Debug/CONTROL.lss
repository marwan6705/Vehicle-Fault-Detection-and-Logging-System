
CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  000043b8  0000444c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800174  00800174  00004560  2**0
                  ALLOC
  3 .stab         0000465c  00000000  00000000  00004560  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002130  00000000  00000000  00008bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000acec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ae8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b07e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d489  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f9e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000fe9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001080c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <main>
      8a:	0c 94 da 21 	jmp	0x43b4	; 0x43b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bf 21 	jmp	0x437e	; 0x437e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 af 21 	jmp	0x435e	; 0x435e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 af 21 	jmp	0x435e	; 0x435e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bf 21 	jmp	0x437e	; 0x437e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c7 21 	jmp	0x438e	; 0x438e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 af 21 	jmp	0x435e	; 0x435e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 af 21 	jmp	0x435e	; 0x435e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 af 21 	jmp	0x435e	; 0x435e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 c7 21 	jmp	0x438e	; 0x438e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <PWM_Timer0_Start>:
#include "PWM.h"
#include <avr/io.h>
#include "gpio.h"
void PWM_Timer0_Start(uint8 duty_cycle)
{
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
     e3e:	e2 e5       	ldi	r30, 0x52	; 82
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	10 82       	st	Z, r1
	GPIO_setupPinDirection(PWM_PORT,PWM_PIN,PIN_OUTPUT);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	63 e0       	ldi	r22, 0x03	; 3
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>
	TCCR0 |= (1<<WGM00) |(1<<WGM01) |(1<<COM01) |(1<<CS00) |(1<<CS01);
     e4e:	a3 e5       	ldi	r26, 0x53	; 83
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e3 e5       	ldi	r30, 0x53	; 83
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8b 66       	ori	r24, 0x6B	; 107
     e5a:	8c 93       	st	X, r24
	OCR0 = (uint8)((duty_cycle * 255UL) / 100);
     e5c:	0c e5       	ldi	r16, 0x5C	; 92
     e5e:	10 e0       	ldi	r17, 0x00	; 0
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	2f ef       	ldi	r18, 0xFF	; 255
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 3b 21 	call	0x4276	; 0x4276 <__mulsi3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	24 e6       	ldi	r18, 0x64	; 100
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 81 21 	call	0x4302	; 0x4302 <__udivmodsi4>
     e8e:	da 01       	movw	r26, r20
     e90:	c9 01       	movw	r24, r18
     e92:	f8 01       	movw	r30, r16
     e94:	80 83       	st	Z, r24
}
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	08 95       	ret

00000ea2 <ADC_init>:
#include "../common/common_macros.h"

volatile uint16 g_adcResult = 0;

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <ADC_init+0x6>
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <ADC_init+0x8>
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
    /* Set reference voltage */
    switch(Config_Ptr->ref_volt) {
     eb2:	e9 81       	ldd	r30, Y+1	; 0x01
     eb4:	fa 81       	ldd	r31, Y+2	; 0x02
     eb6:	80 81       	ld	r24, Z
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3c 83       	std	Y+4, r19	; 0x04
     ebe:	2b 83       	std	Y+3, r18	; 0x03
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	91 05       	cpc	r25, r1
     ec8:	89 f0       	breq	.+34     	; 0xeec <ADC_init+0x4a>
     eca:	2b 81       	ldd	r18, Y+3	; 0x03
     ecc:	3c 81       	ldd	r19, Y+4	; 0x04
     ece:	22 30       	cpi	r18, 0x02	; 2
     ed0:	31 05       	cpc	r19, r1
     ed2:	a9 f0       	breq	.+42     	; 0xefe <ADC_init+0x5c>
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	c1 f4       	brne	.+48     	; 0xf0c <ADC_init+0x6a>
        case AREF:
            ADMUX &= ~(1<<REFS1 | 1<<REFS0);
     edc:	a7 e2       	ldi	r26, 0x27	; 39
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e7 e2       	ldi	r30, 0x27	; 39
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8f 73       	andi	r24, 0x3F	; 63
     ee8:	8c 93       	st	X, r24
     eea:	10 c0       	rjmp	.+32     	; 0xf0c <ADC_init+0x6a>
            break;
        case AVCC:
            ADMUX = (ADMUX & ~(1<<REFS1)) | (1<<REFS0);
     eec:	a7 e2       	ldi	r26, 0x27	; 39
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e7 e2       	ldi	r30, 0x27	; 39
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8f 73       	andi	r24, 0x3F	; 63
     ef8:	80 64       	ori	r24, 0x40	; 64
     efa:	8c 93       	st	X, r24
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <ADC_init+0x6a>
            break;
        case INTERNAL:
            ADMUX |= (1<<REFS1 | 1<<REFS0);
     efe:	a7 e2       	ldi	r26, 0x27	; 39
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e7 e2       	ldi	r30, 0x27	; 39
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 6c       	ori	r24, 0xC0	; 192
     f0a:	8c 93       	st	X, r24
            break;
    }

    /* Right adjust result */
    ADMUX &= ~(1<<ADLAR);
     f0c:	a7 e2       	ldi	r26, 0x27	; 39
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e7 e2       	ldi	r30, 0x27	; 39
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8f 7d       	andi	r24, 0xDF	; 223
     f18:	8c 93       	st	X, r24

    /* Enable ADC, disable auto trigger, clear interrupt flag */
    ADCSRA = (1<<ADEN);
     f1a:	e6 e2       	ldi	r30, 0x26	; 38
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	80 83       	st	Z, r24

    /* Set prescaler */
    ADCSRA |= Config_Ptr->prescaler;
     f22:	a6 e2       	ldi	r26, 0x26	; 38
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e6 e2       	ldi	r30, 0x26	; 38
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	90 81       	ld	r25, Z
     f2c:	e9 81       	ldd	r30, Y+1	; 0x01
     f2e:	fa 81       	ldd	r31, Y+2	; 0x02
     f30:	81 81       	ldd	r24, Z+1	; 0x01
     f32:	89 2b       	or	r24, r25
     f34:	8c 93       	st	X, r24
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	89 83       	std	Y+1, r24	; 0x01
    channel_num &= 0x07;
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	87 70       	andi	r24, 0x07	; 7
     f54:	89 83       	std	Y+1, r24	; 0x01
    ADMUX = (ADMUX & 0xE0) | channel_num;
     f56:	a7 e2       	ldi	r26, 0x27	; 39
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e7 e2       	ldi	r30, 0x27	; 39
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	98 2f       	mov	r25, r24
     f62:	90 7e       	andi	r25, 0xE0	; 224
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	89 2b       	or	r24, r25
     f68:	8c 93       	st	X, r24

    SET_BIT(ADCSRA, ADSC);
     f6a:	a6 e2       	ldi	r26, 0x26	; 38
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e6 e2       	ldi	r30, 0x26	; 38
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 64       	ori	r24, 0x40	; 64
     f76:	8c 93       	st	X, r24
    while(BIT_IS_CLEAR(ADCSRA, ADIF));
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	80 71       	andi	r24, 0x10	; 16
     f84:	90 70       	andi	r25, 0x00	; 0
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	b9 f3       	breq	.-18     	; 0xf78 <ADC_readChannel+0x34>
    SET_BIT(ADCSRA, ADIF);
     f8a:	a6 e2       	ldi	r26, 0x26	; 38
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e6 e2       	ldi	r30, 0x26	; 38
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	80 61       	ori	r24, 0x10	; 16
     f96:	8c 93       	st	X, r24

    return ADC;
     f98:	e4 e2       	ldi	r30, 0x24	; 36
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
}
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	00 d0       	rcall	.+0      	; 0xfae <GPIO_setupPinDirection+0x6>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <GPIO_setupPinDirection+0x8>
     fb0:	0f 92       	push	r0
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	6a 83       	std	Y+2, r22	; 0x02
     fba:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	88 30       	cpi	r24, 0x08	; 8
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <GPIO_setupPinDirection+0x1c>
     fc2:	d5 c0       	rjmp	.+426    	; 0x116e <GPIO_setupPinDirection+0x1c6>
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	84 30       	cpi	r24, 0x04	; 4
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <GPIO_setupPinDirection+0x24>
     fca:	d1 c0       	rjmp	.+418    	; 0x116e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3d 83       	std	Y+5, r19	; 0x05
     fd4:	2c 83       	std	Y+4, r18	; 0x04
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	9d 81       	ldd	r25, Y+5	; 0x05
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <GPIO_setupPinDirection+0x3a>
     fe0:	43 c0       	rjmp	.+134    	; 0x1068 <GPIO_setupPinDirection+0xc0>
     fe2:	2c 81       	ldd	r18, Y+4	; 0x04
     fe4:	3d 81       	ldd	r19, Y+5	; 0x05
     fe6:	22 30       	cpi	r18, 0x02	; 2
     fe8:	31 05       	cpc	r19, r1
     fea:	2c f4       	brge	.+10     	; 0xff6 <GPIO_setupPinDirection+0x4e>
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	71 f0       	breq	.+28     	; 0x1010 <GPIO_setupPinDirection+0x68>
     ff4:	bc c0       	rjmp	.+376    	; 0x116e <GPIO_setupPinDirection+0x1c6>
     ff6:	2c 81       	ldd	r18, Y+4	; 0x04
     ff8:	3d 81       	ldd	r19, Y+5	; 0x05
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <GPIO_setupPinDirection+0x5a>
    1000:	5f c0       	rjmp	.+190    	; 0x10c0 <GPIO_setupPinDirection+0x118>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <GPIO_setupPinDirection+0x66>
    100c:	85 c0       	rjmp	.+266    	; 0x1118 <GPIO_setupPinDirection+0x170>
    100e:	af c0       	rjmp	.+350    	; 0x116e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	a1 f4       	brne	.+40     	; 0x103e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1016:	aa e3       	ldi	r26, 0x3A	; 58
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ea e3       	ldi	r30, 0x3A	; 58
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <GPIO_setupPinDirection+0x8c>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <GPIO_setupPinDirection+0x88>
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	98 c0       	rjmp	.+304    	; 0x116e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    103e:	aa e3       	ldi	r26, 0x3A	; 58
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ea e3       	ldi	r30, 0x3A	; 58
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <GPIO_setupPinDirection+0xb4>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <GPIO_setupPinDirection+0xb0>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	83 c0       	rjmp	.+262    	; 0x116e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	a1 f4       	brne	.+40     	; 0x1096 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    106e:	a7 e3       	ldi	r26, 0x37	; 55
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e7 e3       	ldi	r30, 0x37	; 55
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <GPIO_setupPinDirection+0xe4>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <GPIO_setupPinDirection+0xe0>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	6c c0       	rjmp	.+216    	; 0x116e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1096:	a7 e3       	ldi	r26, 0x37	; 55
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e7 e3       	ldi	r30, 0x37	; 55
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <GPIO_setupPinDirection+0x10c>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <GPIO_setupPinDirection+0x108>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	57 c0       	rjmp	.+174    	; 0x116e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	a1 f4       	brne	.+40     	; 0x10ee <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10c6:	a4 e3       	ldi	r26, 0x34	; 52
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e4 e3       	ldi	r30, 0x34	; 52
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_setupPinDirection+0x13c>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_setupPinDirection+0x138>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	40 c0       	rjmp	.+128    	; 0x116e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10ee:	a4 e3       	ldi	r26, 0x34	; 52
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e4 e3       	ldi	r30, 0x34	; 52
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GPIO_setupPinDirection+0x164>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GPIO_setupPinDirection+0x160>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	2b c0       	rjmp	.+86     	; 0x116e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	a1 f4       	brne	.+40     	; 0x1146 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    111e:	a1 e3       	ldi	r26, 0x31	; 49
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e1 e3       	ldi	r30, 0x31	; 49
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <GPIO_setupPinDirection+0x194>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <GPIO_setupPinDirection+0x190>
    1140:	84 2b       	or	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	14 c0       	rjmp	.+40     	; 0x116e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1146:	a1 e3       	ldi	r26, 0x31	; 49
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e1 e3       	ldi	r30, 0x31	; 49
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_setupPinDirection+0x1bc>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_setupPinDirection+0x1b8>
    1168:	80 95       	com	r24
    116a:	84 23       	and	r24, r20
    116c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <GPIO_writePin+0x6>
    1184:	00 d0       	rcall	.+0      	; 0x1186 <GPIO_writePin+0x8>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	6a 83       	std	Y+2, r22	; 0x02
    1190:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	88 30       	cpi	r24, 0x08	; 8
    1196:	08 f0       	brcs	.+2      	; 0x119a <GPIO_writePin+0x1c>
    1198:	d5 c0       	rjmp	.+426    	; 0x1344 <GPIO_writePin+0x1c6>
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <GPIO_writePin+0x24>
    11a0:	d1 c0       	rjmp	.+418    	; 0x1344 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	3d 83       	std	Y+5, r19	; 0x05
    11aa:	2c 83       	std	Y+4, r18	; 0x04
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 05       	cpc	r25, r1
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <GPIO_writePin+0x3a>
    11b6:	43 c0       	rjmp	.+134    	; 0x123e <GPIO_writePin+0xc0>
    11b8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ba:	3d 81       	ldd	r19, Y+5	; 0x05
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	2c f4       	brge	.+10     	; 0x11cc <GPIO_writePin+0x4e>
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	71 f0       	breq	.+28     	; 0x11e6 <GPIO_writePin+0x68>
    11ca:	bc c0       	rjmp	.+376    	; 0x1344 <GPIO_writePin+0x1c6>
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <GPIO_writePin+0x5a>
    11d6:	5f c0       	rjmp	.+190    	; 0x1296 <GPIO_writePin+0x118>
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	9d 81       	ldd	r25, Y+5	; 0x05
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	91 05       	cpc	r25, r1
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <GPIO_writePin+0x66>
    11e2:	85 c0       	rjmp	.+266    	; 0x12ee <GPIO_writePin+0x170>
    11e4:	af c0       	rjmp	.+350    	; 0x1344 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	a1 f4       	brne	.+40     	; 0x1214 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11ec:	ab e3       	ldi	r26, 0x3B	; 59
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	eb e3       	ldi	r30, 0x3B	; 59
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <GPIO_writePin+0x8c>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <GPIO_writePin+0x88>
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	98 c0       	rjmp	.+304    	; 0x1344 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1214:	ab e3       	ldi	r26, 0x3B	; 59
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	eb e3       	ldi	r30, 0x3B	; 59
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <GPIO_writePin+0xb4>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <GPIO_writePin+0xb0>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	83 c0       	rjmp	.+262    	; 0x1344 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	a1 f4       	brne	.+40     	; 0x126c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1244:	a8 e3       	ldi	r26, 0x38	; 56
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e8 e3       	ldi	r30, 0x38	; 56
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <GPIO_writePin+0xe4>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <GPIO_writePin+0xe0>
    1266:	84 2b       	or	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	6c c0       	rjmp	.+216    	; 0x1344 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    126c:	a8 e3       	ldi	r26, 0x38	; 56
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e8 e3       	ldi	r30, 0x38	; 56
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_writePin+0x10c>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_writePin+0x108>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	57 c0       	rjmp	.+174    	; 0x1344 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	a1 f4       	brne	.+40     	; 0x12c4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    129c:	a5 e3       	ldi	r26, 0x35	; 53
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e5 e3       	ldi	r30, 0x35	; 53
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <GPIO_writePin+0x13c>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <GPIO_writePin+0x138>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	40 c0       	rjmp	.+128    	; 0x1344 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12c4:	a5 e3       	ldi	r26, 0x35	; 53
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e5 e3       	ldi	r30, 0x35	; 53
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_writePin+0x164>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_writePin+0x160>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	2b c0       	rjmp	.+86     	; 0x1344 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	a1 f4       	brne	.+40     	; 0x131c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12f4:	a2 e3       	ldi	r26, 0x32	; 50
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e2 e3       	ldi	r30, 0x32	; 50
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <GPIO_writePin+0x194>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <GPIO_writePin+0x190>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    131c:	a2 e3       	ldi	r26, 0x32	; 50
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e2 e3       	ldi	r30, 0x32	; 50
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_writePin+0x1bc>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_writePin+0x1b8>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <GPIO_readPin+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <GPIO_readPin+0x8>
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	8a 83       	std	Y+2, r24	; 0x02
    1364:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1366:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 30       	cpi	r24, 0x08	; 8
    136c:	08 f0       	brcs	.+2      	; 0x1370 <GPIO_readPin+0x1c>
    136e:	84 c0       	rjmp	.+264    	; 0x1478 <GPIO_readPin+0x124>
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	08 f0       	brcs	.+2      	; 0x1378 <GPIO_readPin+0x24>
    1376:	80 c0       	rjmp	.+256    	; 0x1478 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3d 83       	std	Y+5, r19	; 0x05
    1380:	2c 83       	std	Y+4, r18	; 0x04
    1382:	4c 81       	ldd	r20, Y+4	; 0x04
    1384:	5d 81       	ldd	r21, Y+5	; 0x05
    1386:	41 30       	cpi	r20, 0x01	; 1
    1388:	51 05       	cpc	r21, r1
    138a:	79 f1       	breq	.+94     	; 0x13ea <GPIO_readPin+0x96>
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	91 05       	cpc	r25, r1
    1394:	34 f4       	brge	.+12     	; 0x13a2 <GPIO_readPin+0x4e>
    1396:	2c 81       	ldd	r18, Y+4	; 0x04
    1398:	3d 81       	ldd	r19, Y+5	; 0x05
    139a:	21 15       	cp	r18, r1
    139c:	31 05       	cpc	r19, r1
    139e:	69 f0       	breq	.+26     	; 0x13ba <GPIO_readPin+0x66>
    13a0:	6b c0       	rjmp	.+214    	; 0x1478 <GPIO_readPin+0x124>
    13a2:	4c 81       	ldd	r20, Y+4	; 0x04
    13a4:	5d 81       	ldd	r21, Y+5	; 0x05
    13a6:	42 30       	cpi	r20, 0x02	; 2
    13a8:	51 05       	cpc	r21, r1
    13aa:	b9 f1       	breq	.+110    	; 0x141a <GPIO_readPin+0xc6>
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	91 05       	cpc	r25, r1
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <GPIO_readPin+0x64>
    13b6:	49 c0       	rjmp	.+146    	; 0x144a <GPIO_readPin+0xf6>
    13b8:	5f c0       	rjmp	.+190    	; 0x1478 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    13ba:	e9 e3       	ldi	r30, 0x39	; 57
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a9 01       	movw	r20, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_readPin+0x7e>
    13ce:	55 95       	asr	r21
    13d0:	47 95       	ror	r20
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_readPin+0x7a>
    13d6:	ca 01       	movw	r24, r20
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	90 70       	andi	r25, 0x00	; 0
    13dc:	88 23       	and	r24, r24
    13de:	19 f0       	breq	.+6      	; 0x13e6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	49 c0       	rjmp	.+146    	; 0x1478 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13e6:	19 82       	std	Y+1, r1	; 0x01
    13e8:	47 c0       	rjmp	.+142    	; 0x1478 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13ea:	e6 e3       	ldi	r30, 0x36	; 54
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a9 01       	movw	r20, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_readPin+0xae>
    13fe:	55 95       	asr	r21
    1400:	47 95       	ror	r20
    1402:	8a 95       	dec	r24
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_readPin+0xaa>
    1406:	ca 01       	movw	r24, r20
    1408:	81 70       	andi	r24, 0x01	; 1
    140a:	90 70       	andi	r25, 0x00	; 0
    140c:	88 23       	and	r24, r24
    140e:	19 f0       	breq	.+6      	; 0x1416 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	31 c0       	rjmp	.+98     	; 0x1478 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1416:	19 82       	std	Y+1, r1	; 0x01
    1418:	2f c0       	rjmp	.+94     	; 0x1478 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    141a:	e3 e3       	ldi	r30, 0x33	; 51
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a9 01       	movw	r20, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <GPIO_readPin+0xde>
    142e:	55 95       	asr	r21
    1430:	47 95       	ror	r20
    1432:	8a 95       	dec	r24
    1434:	e2 f7       	brpl	.-8      	; 0x142e <GPIO_readPin+0xda>
    1436:	ca 01       	movw	r24, r20
    1438:	81 70       	andi	r24, 0x01	; 1
    143a:	90 70       	andi	r25, 0x00	; 0
    143c:	88 23       	and	r24, r24
    143e:	19 f0       	breq	.+6      	; 0x1446 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	19 c0       	rjmp	.+50     	; 0x1478 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1446:	19 82       	std	Y+1, r1	; 0x01
    1448:	17 c0       	rjmp	.+46     	; 0x1478 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    144a:	e0 e3       	ldi	r30, 0x30	; 48
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	a9 01       	movw	r20, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <GPIO_readPin+0x10e>
    145e:	55 95       	asr	r21
    1460:	47 95       	ror	r20
    1462:	8a 95       	dec	r24
    1464:	e2 f7       	brpl	.-8      	; 0x145e <GPIO_readPin+0x10a>
    1466:	ca 01       	movw	r24, r20
    1468:	81 70       	andi	r24, 0x01	; 1
    146a:	90 70       	andi	r25, 0x00	; 0
    146c:	88 23       	and	r24, r24
    146e:	19 f0       	breq	.+6      	; 0x1476 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1476:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <GPIO_setupPortDirection+0x6>
    1490:	00 d0       	rcall	.+0      	; 0x1492 <GPIO_setupPortDirection+0x8>
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	90 f5       	brcc	.+100    	; 0x1504 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	3c 83       	std	Y+4, r19	; 0x04
    14a8:	2b 83       	std	Y+3, r18	; 0x03
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	91 05       	cpc	r25, r1
    14b2:	d1 f0       	breq	.+52     	; 0x14e8 <GPIO_setupPortDirection+0x5e>
    14b4:	2b 81       	ldd	r18, Y+3	; 0x03
    14b6:	3c 81       	ldd	r19, Y+4	; 0x04
    14b8:	22 30       	cpi	r18, 0x02	; 2
    14ba:	31 05       	cpc	r19, r1
    14bc:	2c f4       	brge	.+10     	; 0x14c8 <GPIO_setupPortDirection+0x3e>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	61 f0       	breq	.+24     	; 0x14de <GPIO_setupPortDirection+0x54>
    14c6:	1e c0       	rjmp	.+60     	; 0x1504 <GPIO_setupPortDirection+0x7a>
    14c8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ca:	3c 81       	ldd	r19, Y+4	; 0x04
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	81 f0       	breq	.+32     	; 0x14f2 <GPIO_setupPortDirection+0x68>
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	83 30       	cpi	r24, 0x03	; 3
    14d8:	91 05       	cpc	r25, r1
    14da:	81 f0       	breq	.+32     	; 0x14fc <GPIO_setupPortDirection+0x72>
    14dc:	13 c0       	rjmp	.+38     	; 0x1504 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14de:	ea e3       	ldi	r30, 0x3A	; 58
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	80 83       	st	Z, r24
    14e6:	0e c0       	rjmp	.+28     	; 0x1504 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14e8:	e7 e3       	ldi	r30, 0x37	; 55
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	80 83       	st	Z, r24
    14f0:	09 c0       	rjmp	.+18     	; 0x1504 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14f2:	e4 e3       	ldi	r30, 0x34	; 52
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	80 83       	st	Z, r24
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14fc:	e1 e3       	ldi	r30, 0x31	; 49
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	80 83       	st	Z, r24
			break;
		}
	}
}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <GPIO_writePort+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <GPIO_writePort+0x8>
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	90 f5       	brcc	.+100    	; 0x158c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	3c 83       	std	Y+4, r19	; 0x04
    1530:	2b 83       	std	Y+3, r18	; 0x03
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	d1 f0       	breq	.+52     	; 0x1570 <GPIO_writePort+0x5e>
    153c:	2b 81       	ldd	r18, Y+3	; 0x03
    153e:	3c 81       	ldd	r19, Y+4	; 0x04
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	2c f4       	brge	.+10     	; 0x1550 <GPIO_writePort+0x3e>
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	61 f0       	breq	.+24     	; 0x1566 <GPIO_writePort+0x54>
    154e:	1e c0       	rjmp	.+60     	; 0x158c <GPIO_writePort+0x7a>
    1550:	2b 81       	ldd	r18, Y+3	; 0x03
    1552:	3c 81       	ldd	r19, Y+4	; 0x04
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	81 f0       	breq	.+32     	; 0x157a <GPIO_writePort+0x68>
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	91 05       	cpc	r25, r1
    1562:	81 f0       	breq	.+32     	; 0x1584 <GPIO_writePort+0x72>
    1564:	13 c0       	rjmp	.+38     	; 0x158c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1566:	eb e3       	ldi	r30, 0x3B	; 59
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	80 83       	st	Z, r24
    156e:	0e c0       	rjmp	.+28     	; 0x158c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1570:	e8 e3       	ldi	r30, 0x38	; 56
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	80 83       	st	Z, r24
    1578:	09 c0       	rjmp	.+18     	; 0x158c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    157a:	e5 e3       	ldi	r30, 0x35	; 53
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	80 83       	st	Z, r24
    1582:	04 c0       	rjmp	.+8      	; 0x158c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1584:	e2 e3       	ldi	r30, 0x32	; 50
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	80 83       	st	Z, r24
			break;
		}
	}
}
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <GPIO_readPort+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <GPIO_readPort+0x8>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15a8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	90 f5       	brcc	.+100    	; 0x1614 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3c 83       	std	Y+4, r19	; 0x04
    15b8:	2b 83       	std	Y+3, r18	; 0x03
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	d1 f0       	breq	.+52     	; 0x15f8 <GPIO_readPort+0x5e>
    15c4:	2b 81       	ldd	r18, Y+3	; 0x03
    15c6:	3c 81       	ldd	r19, Y+4	; 0x04
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <GPIO_readPort+0x3e>
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	61 f0       	breq	.+24     	; 0x15ee <GPIO_readPort+0x54>
    15d6:	1e c0       	rjmp	.+60     	; 0x1614 <GPIO_readPort+0x7a>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	81 f0       	breq	.+32     	; 0x1602 <GPIO_readPort+0x68>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	81 f0       	breq	.+32     	; 0x160c <GPIO_readPort+0x72>
    15ec:	13 c0       	rjmp	.+38     	; 0x1614 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15ee:	e9 e3       	ldi	r30, 0x39	; 57
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	0e c0       	rjmp	.+28     	; 0x1614 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15f8:	e6 e3       	ldi	r30, 0x36	; 54
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	09 c0       	rjmp	.+18     	; 0x1614 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1602:	e3 e3       	ldi	r30, 0x33	; 51
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    160c:	e0 e3       	ldi	r30, 0x30	; 48
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1624:	1f 92       	push	r1
    1626:	0f 92       	push	r0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	0f 92       	push	r0
    162c:	11 24       	eor	r1, r1
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    164e:	80 91 76 01 	lds	r24, 0x0176
    1652:	90 91 77 01 	lds	r25, 0x0177
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	29 f0       	breq	.+10     	; 0x1664 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    165a:	e0 91 76 01 	lds	r30, 0x0176
    165e:	f0 91 77 01 	lds	r31, 0x0177
    1662:	09 95       	icall
	}
}
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	ff 91       	pop	r31
    166a:	ef 91       	pop	r30
    166c:	bf 91       	pop	r27
    166e:	af 91       	pop	r26
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	7f 91       	pop	r23
    1676:	6f 91       	pop	r22
    1678:	5f 91       	pop	r21
    167a:	4f 91       	pop	r20
    167c:	3f 91       	pop	r19
    167e:	2f 91       	pop	r18
    1680:	0f 90       	pop	r0
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	0f 90       	pop	r0
    1686:	1f 90       	pop	r1
    1688:	18 95       	reti

0000168a <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <ICU_init+0x6>
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    1698:	a1 e3       	ldi	r26, 0x31	; 49
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e1 e3       	ldi	r30, 0x31	; 49
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 7b       	andi	r24, 0xBF	; 191
    16a4:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    16a6:	ef e4       	ldi	r30, 0x4F	; 79
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8c e0       	ldi	r24, 0x0C	; 12
    16ac:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    16ae:	ae e4       	ldi	r26, 0x4E	; 78
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ee e4       	ldi	r30, 0x4E	; 78
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	98 2f       	mov	r25, r24
    16ba:	98 7f       	andi	r25, 0xF8	; 248
    16bc:	e9 81       	ldd	r30, Y+1	; 0x01
    16be:	fa 81       	ldd	r31, Y+2	; 0x02
    16c0:	80 81       	ld	r24, Z
    16c2:	89 2b       	or	r24, r25
    16c4:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    16c6:	ae e4       	ldi	r26, 0x4E	; 78
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ee e4       	ldi	r30, 0x4E	; 78
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	2f 7b       	andi	r18, 0xBF	; 191
    16d4:	e9 81       	ldd	r30, Y+1	; 0x01
    16d6:	fa 81       	ldd	r31, Y+2	; 0x02
    16d8:	81 81       	ldd	r24, Z+1	; 0x01
    16da:	88 2f       	mov	r24, r24
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	00 24       	eor	r0, r0
    16e0:	96 95       	lsr	r25
    16e2:	87 95       	ror	r24
    16e4:	07 94       	ror	r0
    16e6:	96 95       	lsr	r25
    16e8:	87 95       	ror	r24
    16ea:	07 94       	ror	r0
    16ec:	98 2f       	mov	r25, r24
    16ee:	80 2d       	mov	r24, r0
    16f0:	82 2b       	or	r24, r18
    16f2:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    16f4:	ec e4       	ldi	r30, 0x4C	; 76
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	11 82       	std	Z+1, r1	; 0x01
    16fa:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    16fc:	e6 e4       	ldi	r30, 0x46	; 70
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	11 82       	std	Z+1, r1	; 0x01
    1702:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1704:	a9 e5       	ldi	r26, 0x59	; 89
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e9 e5       	ldi	r30, 0x59	; 89
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 62       	ori	r24, 0x20	; 32
    1710:	8c 93       	st	X, r24
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <ICU_setCallBack+0x6>
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	9a 81       	ldd	r25, Y+2	; 0x02
    172e:	90 93 77 01 	sts	0x0177, r25
    1732:	80 93 76 01 	sts	0x0176, r24
}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	0f 92       	push	r0
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    174c:	ae e4       	ldi	r26, 0x4E	; 78
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ee e4       	ldi	r30, 0x4E	; 78
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	28 2f       	mov	r18, r24
    1758:	2f 7b       	andi	r18, 0xBF	; 191
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	00 24       	eor	r0, r0
    1762:	96 95       	lsr	r25
    1764:	87 95       	ror	r24
    1766:	07 94       	ror	r0
    1768:	96 95       	lsr	r25
    176a:	87 95       	ror	r24
    176c:	07 94       	ror	r0
    176e:	98 2f       	mov	r25, r24
    1770:	80 2d       	mov	r24, r0
    1772:	82 2b       	or	r24, r18
    1774:	8c 93       	st	X, r24
}
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1786:	e6 e4       	ldi	r30, 0x46	; 70
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    179c:	ec e4       	ldi	r30, 0x4C	; 76
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	11 82       	std	Z+1, r1	; 0x01
    17a2:	10 82       	st	Z, r1
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    17b2:	ef e4       	ldi	r30, 0x4F	; 79
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	10 82       	st	Z, r1
	TCCR1B = 0;
    17b8:	ee e4       	ldi	r30, 0x4E	; 78
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	10 82       	st	Z, r1
	TCNT1 = 0;
    17be:	ec e4       	ldi	r30, 0x4C	; 76
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	11 82       	std	Z+1, r1	; 0x01
    17c4:	10 82       	st	Z, r1
	ICR1 = 0;
    17c6:	e6 e4       	ldi	r30, 0x46	; 70
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	11 82       	std	Z+1, r1	; 0x01
    17cc:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    17ce:	a9 e5       	ldi	r26, 0x59	; 89
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e9 e5       	ldi	r30, 0x59	; 89
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8f 7d       	andi	r24, 0xDF	; 223
    17da:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    17dc:	10 92 77 01 	sts	0x0177, r1
    17e0:	10 92 76 01 	sts	0x0176, r1
}
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <TWI_init>:
#include "twi.h"
#include "../common/common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <TWI_init+0xa>
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
    TWSR = 0x00;
    17fc:	e1 e2       	ldi	r30, 0x21	; 33
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	10 82       	st	Z, r1
    TWBR = (uint8)(((F_CPU / Config_Ptr->bit_rate) - 16) / 2);
    1802:	00 e2       	ldi	r16, 0x20	; 32
    1804:	10 e0       	ldi	r17, 0x00	; 0
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	21 81       	ldd	r18, Z+1	; 0x01
    180c:	32 81       	ldd	r19, Z+2	; 0x02
    180e:	43 81       	ldd	r20, Z+3	; 0x03
    1810:	54 81       	ldd	r21, Z+4	; 0x04
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	92 e1       	ldi	r25, 0x12	; 18
    1816:	aa e7       	ldi	r26, 0x7A	; 122
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 81 21 	call	0x4302	; 0x4302 <__udivmodsi4>
    1822:	da 01       	movw	r26, r20
    1824:	c9 01       	movw	r24, r18
    1826:	40 97       	sbiw	r24, 0x10	; 16
    1828:	a1 09       	sbc	r26, r1
    182a:	b1 09       	sbc	r27, r1
    182c:	b6 95       	lsr	r27
    182e:	a7 95       	ror	r26
    1830:	97 95       	ror	r25
    1832:	87 95       	ror	r24
    1834:	f8 01       	movw	r30, r16
    1836:	80 83       	st	Z, r24
    TWAR = (Config_Ptr->address << 1);
    1838:	a2 e2       	ldi	r26, 0x22	; 34
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e9 81       	ldd	r30, Y+1	; 0x01
    183e:	fa 81       	ldd	r31, Y+2	; 0x02
    1840:	80 81       	ld	r24, Z
    1842:	88 0f       	add	r24, r24
    1844:	8c 93       	st	X, r24
    TWCR = (1 << TWEN);
    1846:	e6 e5       	ldi	r30, 0x56	; 86
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	84 e0       	ldi	r24, 0x04	; 4
    184c:	80 83       	st	Z, r24
}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	08 95       	ret

0000185c <TWI_start>:

void TWI_start(void)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1864:	e6 e5       	ldi	r30, 0x56	; 86
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	84 ea       	ldi	r24, 0xA4	; 164
    186a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    186c:	e6 e5       	ldi	r30, 0x56	; 86
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	88 23       	and	r24, r24
    1874:	dc f7       	brge	.-10     	; 0x186c <TWI_start+0x10>
}
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <TWI_stop>:

void TWI_stop(void)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1884:	e6 e5       	ldi	r30, 0x56	; 86
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	84 e9       	ldi	r24, 0x94	; 148
    188a:	80 83       	st	Z, r24
}
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	0f 92       	push	r0
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    189e:	e3 e2       	ldi	r30, 0x23	; 35
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    18a6:	e6 e5       	ldi	r30, 0x56	; 86
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	84 e8       	ldi	r24, 0x84	; 132
    18ac:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    18ae:	e6 e5       	ldi	r30, 0x56	; 86
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	88 23       	and	r24, r24
    18b6:	dc f7       	brge	.-10     	; 0x18ae <TWI_writeByte+0x1c>
}
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    18c8:	e6 e5       	ldi	r30, 0x56	; 86
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	84 ec       	ldi	r24, 0xC4	; 196
    18ce:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    18d0:	e6 e5       	ldi	r30, 0x56	; 86
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	88 23       	and	r24, r24
    18d8:	dc f7       	brge	.-10     	; 0x18d0 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    18da:	e3 e2       	ldi	r30, 0x23	; 35
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
}
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    18ee:	e6 e5       	ldi	r30, 0x56	; 86
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	84 e8       	ldi	r24, 0x84	; 132
    18f4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    18f6:	e6 e5       	ldi	r30, 0x56	; 86
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	88 23       	and	r24, r24
    18fe:	dc f7       	brge	.-10     	; 0x18f6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1900:	e3 e2       	ldi	r30, 0x23	; 35
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
}
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	0f 92       	push	r0
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1916:	e1 e2       	ldi	r30, 0x21	; 33
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	88 7f       	andi	r24, 0xF8	; 248
    191e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1920:	89 81       	ldd	r24, Y+1	; 0x01
}
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <UART_init+0x6>
    1930:	00 d0       	rcall	.+0      	; 0x1932 <UART_init+0x8>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <UART_init+0xa>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    193c:	1a 82       	std	Y+2, r1	; 0x02
    193e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1940:	eb e2       	ldi	r30, 0x2B	; 43
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1948:	ea e2       	ldi	r30, 0x2A	; 42
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	88 e1       	ldi	r24, 0x18	; 24
    194e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	SET_BIT(UCSRC,URSEL);//The URSEL must be one when writing the UCSRC.
    1950:	a0 e4       	ldi	r26, 0x40	; 64
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e0 e4       	ldi	r30, 0x40	; 64
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	80 68       	ori	r24, 0x80	; 128
    195c:	8c 93       	st	X, r24
	//to set the parity
	if(Config_Ptr->parity==even)
    195e:	eb 81       	ldd	r30, Y+3	; 0x03
    1960:	fc 81       	ldd	r31, Y+4	; 0x04
    1962:	81 81       	ldd	r24, Z+1	; 0x01
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	41 f4       	brne	.+16     	; 0x1978 <UART_init+0x4e>
	{
		SET_BIT(UCSRC,UPM1);
    1968:	a0 e4       	ldi	r26, 0x40	; 64
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e0 e4       	ldi	r30, 0x40	; 64
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	80 62       	ori	r24, 0x20	; 32
    1974:	8c 93       	st	X, r24
    1976:	13 c0       	rjmp	.+38     	; 0x199e <UART_init+0x74>
	}
	else if(Config_Ptr->parity==odd)
    1978:	eb 81       	ldd	r30, Y+3	; 0x03
    197a:	fc 81       	ldd	r31, Y+4	; 0x04
    197c:	81 81       	ldd	r24, Z+1	; 0x01
    197e:	83 30       	cpi	r24, 0x03	; 3
    1980:	71 f4       	brne	.+28     	; 0x199e <UART_init+0x74>
		{
			SET_BIT(UCSRC,UPM1);
    1982:	a0 e4       	ldi	r26, 0x40	; 64
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e0 e4       	ldi	r30, 0x40	; 64
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	80 62       	ori	r24, 0x20	; 32
    198e:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UPM0);
    1990:	a0 e4       	ldi	r26, 0x40	; 64
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e0 e4       	ldi	r30, 0x40	; 64
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	80 61       	ori	r24, 0x10	; 16
    199c:	8c 93       	st	X, r24
		}
	//stop bit select
	if(Config_Ptr->stop_bit==TWO_STOP_BITS)
    199e:	eb 81       	ldd	r30, Y+3	; 0x03
    19a0:	fc 81       	ldd	r31, Y+4	; 0x04
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	39 f4       	brne	.+14     	; 0x19b6 <UART_init+0x8c>
	{
		SET_BIT(UCSRC,USBS);
    19a8:	a0 e4       	ldi	r26, 0x40	; 64
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e0 e4       	ldi	r30, 0x40	; 64
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	88 60       	ori	r24, 0x08	; 8
    19b4:	8c 93       	st	X, r24
	}
	//BIT DATA MODE
	switch(Config_Ptr->bit_data)
    19b6:	eb 81       	ldd	r30, Y+3	; 0x03
    19b8:	fc 81       	ldd	r31, Y+4	; 0x04
    19ba:	80 81       	ld	r24, Z
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	3e 83       	std	Y+6, r19	; 0x06
    19c2:	2d 83       	std	Y+5, r18	; 0x05
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	91 05       	cpc	r25, r1
    19cc:	81 f0       	breq	.+32     	; 0x19ee <UART_init+0xc4>
    19ce:	2d 81       	ldd	r18, Y+5	; 0x05
    19d0:	3e 81       	ldd	r19, Y+6	; 0x06
    19d2:	22 30       	cpi	r18, 0x02	; 2
    19d4:	31 05       	cpc	r19, r1
    19d6:	4c f1       	brlt	.+82     	; 0x1a2a <UART_init+0x100>
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	82 30       	cpi	r24, 0x02	; 2
    19de:	91 05       	cpc	r25, r1
    19e0:	71 f0       	breq	.+28     	; 0x19fe <UART_init+0xd4>
    19e2:	2d 81       	ldd	r18, Y+5	; 0x05
    19e4:	3e 81       	ldd	r19, Y+6	; 0x06
    19e6:	23 30       	cpi	r18, 0x03	; 3
    19e8:	31 05       	cpc	r19, r1
    19ea:	89 f0       	breq	.+34     	; 0x1a0e <UART_init+0xe4>
    19ec:	1e c0       	rjmp	.+60     	; 0x1a2a <UART_init+0x100>
	{
	case UART_5BIT:
		break;
	case UART_6BIT:
		SET_BIT(UCSRC,UCSZ0);
    19ee:	a0 e4       	ldi	r26, 0x40	; 64
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e0 e4       	ldi	r30, 0x40	; 64
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	82 60       	ori	r24, 0x02	; 2
    19fa:	8c 93       	st	X, r24
    19fc:	16 c0       	rjmp	.+44     	; 0x1a2a <UART_init+0x100>
			break;
	case UART_7BIT:
			SET_BIT(UCSRC,UCSZ1);
    19fe:	a0 e4       	ldi	r26, 0x40	; 64
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e0 e4       	ldi	r30, 0x40	; 64
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	84 60       	ori	r24, 0x04	; 4
    1a0a:	8c 93       	st	X, r24
    1a0c:	0e c0       	rjmp	.+28     	; 0x1a2a <UART_init+0x100>
				break;
	case UART_8BIT:
			SET_BIT(UCSRC,UCSZ0);
    1a0e:	a0 e4       	ldi	r26, 0x40	; 64
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e0 e4       	ldi	r30, 0x40	; 64
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	82 60       	ori	r24, 0x02	; 2
    1a1a:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    1a1c:	a0 e4       	ldi	r26, 0x40	; 64
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e0 e4       	ldi	r30, 0x40	; 64
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	84 60       	ori	r24, 0x04	; 4
    1a28:	8c 93       	st	X, r24
				break;
	}
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1a2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a2e:	83 81       	ldd	r24, Z+3	; 0x03
    1a30:	94 81       	ldd	r25, Z+4	; 0x04
    1a32:	a5 81       	ldd	r26, Z+5	; 0x05
    1a34:	b6 81       	ldd	r27, Z+6	; 0x06
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	aa 1f       	adc	r26, r26
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	aa 1f       	adc	r26, r26
    1a44:	bb 1f       	adc	r27, r27
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	bb 1f       	adc	r27, r27
    1a4e:	9c 01       	movw	r18, r24
    1a50:	ad 01       	movw	r20, r26
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	92 e1       	ldi	r25, 0x12	; 18
    1a56:	aa e7       	ldi	r26, 0x7A	; 122
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 81 21 	call	0x4302	; 0x4302 <__udivmodsi4>
    1a62:	da 01       	movw	r26, r20
    1a64:	c9 01       	movw	r24, r18
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value>>8;
    1a6c:	e0 e4       	ldi	r30, 0x40	; 64
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	89 2f       	mov	r24, r25
    1a76:	99 27       	eor	r25, r25
    1a78:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1a7a:	e9 e2       	ldi	r30, 0x29	; 41
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	80 83       	st	Z, r24
	
}
    1a82:	26 96       	adiw	r28, 0x06	; 6
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	0f 92       	push	r0
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1aa0:	eb e2       	ldi	r30, 0x2B	; 43
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	80 72       	andi	r24, 0x20	; 32
    1aac:	90 70       	andi	r25, 0x00	; 0
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	b9 f3       	breq	.-18     	; 0x1aa0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1ab2:	ec e2       	ldi	r30, 0x2C	; 44
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1aca:	eb e2       	ldi	r30, 0x2B	; 43
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 23       	and	r24, r24
    1ad2:	dc f7       	brge	.-10     	; 0x1aca <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1ad4:	ec e2       	ldi	r30, 0x2C	; 44
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <UART_sendString+0x6>
    1ae6:	0f 92       	push	r0
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	9b 83       	std	Y+3, r25	; 0x03
    1aee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1af0:	19 82       	std	Y+1, r1	; 0x01
    1af2:	0e c0       	rjmp	.+28     	; 0x1b10 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	9b 81       	ldd	r25, Y+3	; 0x03
    1afe:	fc 01       	movw	r30, r24
    1b00:	e2 0f       	add	r30, r18
    1b02:	f3 1f       	adc	r31, r19
    1b04:	80 81       	ld	r24, Z
    1b06:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
		i++;
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	e2 0f       	add	r30, r18
    1b1e:	f3 1f       	adc	r31, r19
    1b20:	80 81       	ld	r24, Z
    1b22:	88 23       	and	r24, r24
    1b24:	39 f7       	brne	.-50     	; 0x1af4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <UART_receiveString+0xa>
    1b3c:	0f 92       	push	r0
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	9b 83       	std	Y+3, r25	; 0x03
    1b44:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b46:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	9b 81       	ldd	r25, Y+3	; 0x03
    1b52:	8c 01       	movw	r16, r24
    1b54:	02 0f       	add	r16, r18
    1b56:	13 1f       	adc	r17, r19
    1b58:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <UART_recieveByte>
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	80 83       	st	Z, r24
    1b60:	0f c0       	rjmp	.+30     	; 0x1b80 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	8c 01       	movw	r16, r24
    1b74:	02 0f       	add	r16, r18
    1b76:	13 1f       	adc	r17, r19
    1b78:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <UART_recieveByte>
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	e2 0f       	add	r30, r18
    1b8e:	f3 1f       	adc	r31, r19
    1b90:	80 81       	ld	r24, Z
    1b92:	83 32       	cpi	r24, 0x23	; 35
    1b94:	31 f7       	brne	.-52     	; 0x1b62 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	e2 0f       	add	r30, r18
    1ba4:	f3 1f       	adc	r31, r19
    1ba6:	10 82       	st	Z, r1
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	08 95       	ret

00001bb8 <DcMotor_Init>:

#include "../MCAL/gpio.h"
#include "../MCAL/PWM.h"

void DcMotor_Init(void)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(MOTOR_PORT, IN1, PIN_OUTPUT);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	41 e0       	ldi	r20, 0x01	; 1
    1bc6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT, IN2, PIN_OUTPUT);
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	62 e0       	ldi	r22, 0x02	; 2
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT, ENABLE1, PIN_OUTPUT);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	63 e0       	ldi	r22, 0x03	; 3
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>

    GPIO_writePin(MOTOR_PORT, IN1, LOGIC_LOW);
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT, IN2, LOGIC_LOW);
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	62 e0       	ldi	r22, 0x02	; 2
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

    PWM_Timer0_Start(0);  // Start PWM with 0% duty cycle
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_Timer0_Start>
}
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <DcMotor_Rotate+0x6>
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <DcMotor_Rotate+0x8>
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	6a 83       	std	Y+2, r22	; 0x02
    if (speed > 100) speed = 100;
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	85 36       	cpi	r24, 0x65	; 101
    1c12:	10 f0       	brcs	.+4      	; 0x1c18 <DcMotor_Rotate+0x1a>
    1c14:	84 e6       	ldi	r24, 0x64	; 100
    1c16:	8a 83       	std	Y+2, r24	; 0x02
    OCR0 = (uint8)((speed * 255) / 100);  // Set PWM duty cycle
    1c18:	ec e5       	ldi	r30, 0x5C	; 92
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	48 2f       	mov	r20, r24
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	ca 01       	movw	r24, r20
    1c24:	9c 01       	movw	r18, r24
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	c9 01       	movw	r24, r18
    1c2c:	96 95       	lsr	r25
    1c2e:	98 2f       	mov	r25, r24
    1c30:	88 27       	eor	r24, r24
    1c32:	97 95       	ror	r25
    1c34:	87 95       	ror	r24
    1c36:	82 1b       	sub	r24, r18
    1c38:	93 0b       	sbc	r25, r19
    1c3a:	84 0f       	add	r24, r20
    1c3c:	95 1f       	adc	r25, r21
    1c3e:	24 e6       	ldi	r18, 0x64	; 100
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	b9 01       	movw	r22, r18
    1c44:	0e 94 6e 21 	call	0x42dc	; 0x42dc <__divmodhi4>
    1c48:	cb 01       	movw	r24, r22
    1c4a:	80 83       	st	Z, r24

    switch (state)
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	3c 83       	std	Y+4, r19	; 0x04
    1c54:	2b 83       	std	Y+3, r18	; 0x03
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	a1 f0       	breq	.+40     	; 0x1c88 <DcMotor_Rotate+0x8a>
    1c60:	2b 81       	ldd	r18, Y+3	; 0x03
    1c62:	3c 81       	ldd	r19, Y+4	; 0x04
    1c64:	22 30       	cpi	r18, 0x02	; 2
    1c66:	31 05       	cpc	r19, r1
    1c68:	d1 f0       	breq	.+52     	; 0x1c9e <DcMotor_Rotate+0xa0>
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	09 f5       	brne	.+66     	; 0x1cb4 <DcMotor_Rotate+0xb6>
    {
        case STOP:
            GPIO_writePin(MOTOR_PORT, IN1, LOGIC_LOW);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	61 e0       	ldi	r22, 0x01	; 1
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
            GPIO_writePin(MOTOR_PORT, IN2, LOGIC_LOW);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	62 e0       	ldi	r22, 0x02	; 2
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    1c86:	20 c0       	rjmp	.+64     	; 0x1cc8 <DcMotor_Rotate+0xca>
            break;

        case CW:
            GPIO_writePin(MOTOR_PORT, IN1, LOGIC_HIGH);
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
            GPIO_writePin(MOTOR_PORT, IN2, LOGIC_LOW);
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	62 e0       	ldi	r22, 0x02	; 2
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    1c9c:	15 c0       	rjmp	.+42     	; 0x1cc8 <DcMotor_Rotate+0xca>
            break;

        case A_CW:
            GPIO_writePin(MOTOR_PORT, IN1, LOGIC_LOW);
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	61 e0       	ldi	r22, 0x01	; 1
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
            GPIO_writePin(MOTOR_PORT, IN2, LOGIC_HIGH);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	62 e0       	ldi	r22, 0x02	; 2
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    1cb2:	0a c0       	rjmp	.+20     	; 0x1cc8 <DcMotor_Rotate+0xca>
            break;

        default:
            GPIO_writePin(MOTOR_PORT, IN1, LOGIC_LOW);
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
            GPIO_writePin(MOTOR_PORT, IN2, LOGIC_LOW);
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	62 e0       	ldi	r22, 0x02	; 2
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
            break;
    }
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <Ultrasonic_init>:

volatile uint16 time_high = 0;
volatile uint8 edges_count = 0;

void Ultrasonic_init(void)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <Ultrasonic_init+0x6>
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    ICU_ConfigType icu_initial = {F_CPU_8, RAISING};
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	8a 83       	std	Y+2, r24	; 0x02
    ICU_init(&icu_initial);
    1ce8:	ce 01       	movw	r24, r28
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	0e 94 45 0b 	call	0x168a	; 0x168a <ICU_init>
    ICU_setCallBack(Ultrasonic_edgeProcessing);
    1cf0:	85 e0       	ldi	r24, 0x05	; 5
    1cf2:	90 e1       	ldi	r25, 0x10	; 16
    1cf4:	0e 94 8e 0b 	call	0x171c	; 0x171c <ICU_setCallBack>
    GPIO_setupPinDirection(ULTRA_SONIC_PORT, TRIGGER_PIN, PIN_OUTPUT);
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	67 e0       	ldi	r22, 0x07	; 7
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>
}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	68 97       	sbiw	r28, 0x18	; 24
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    GPIO_writePin(ULTRA_SONIC_PORT, TRIGGER_PIN, LOGIC_HIGH);
    1d20:	83 e0       	ldi	r24, 0x03	; 3
    1d22:	67 e0       	ldi	r22, 0x07	; 7
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a0 e2       	ldi	r26, 0x20	; 32
    1d30:	b1 e4       	ldi	r27, 0x41	; 65
    1d32:	8d 8b       	std	Y+21, r24	; 0x15
    1d34:	9e 8b       	std	Y+22, r25	; 0x16
    1d36:	af 8b       	std	Y+23, r26	; 0x17
    1d38:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d40:	98 8d       	ldd	r25, Y+24	; 0x18
    1d42:	2b ea       	ldi	r18, 0xAB	; 171
    1d44:	3a ea       	ldi	r19, 0xAA	; 170
    1d46:	4a e2       	ldi	r20, 0x2A	; 42
    1d48:	50 e4       	ldi	r21, 0x40	; 64
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	89 8b       	std	Y+17, r24	; 0x11
    1d54:	9a 8b       	std	Y+18, r25	; 0x12
    1d56:	ab 8b       	std	Y+19, r26	; 0x13
    1d58:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d5a:	69 89       	ldd	r22, Y+17	; 0x11
    1d5c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d60:	9c 89       	ldd	r25, Y+20	; 0x14
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	1c f4       	brge	.+6      	; 0x1d78 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	88 8b       	std	Y+16, r24	; 0x10
    1d76:	91 c0       	rjmp	.+290    	; 0x1e9a <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1d78:	69 89       	ldd	r22, Y+17	; 0x11
    1d7a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	53 e4       	ldi	r21, 0x43	; 67
    1d88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	0c f0       	brlt	.+2      	; 0x1d92 <Ultrasonic_Trigger+0x86>
    1d90:	7b c0       	rjmp	.+246    	; 0x1e88 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	54 e4       	ldi	r21, 0x44	; 68
    1da2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8c 87       	std	Y+12, r24	; 0x0c
    1dac:	9d 87       	std	Y+13, r25	; 0x0d
    1dae:	ae 87       	std	Y+14, r26	; 0x0e
    1db0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1db4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1db6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1db8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	88 87       	std	Y+8, r24	; 0x08
    1dcc:	99 87       	std	Y+9, r25	; 0x09
    1dce:	aa 87       	std	Y+10, r26	; 0x0a
    1dd0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dd2:	68 85       	ldd	r22, Y+8	; 0x08
    1dd4:	79 85       	ldd	r23, Y+9	; 0x09
    1dd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9f 83       	std	Y+7, r25	; 0x07
    1df0:	8e 83       	std	Y+6, r24	; 0x06
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1df4:	68 85       	ldd	r22, Y+8	; 0x08
    1df6:	79 85       	ldd	r23, Y+9	; 0x09
    1df8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e10:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e12:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9f 83       	std	Y+7, r25	; 0x07
    1e32:	8e 83       	std	Y+6, r24	; 0x06
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <Ultrasonic_Trigger+0x148>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9d 83       	std	Y+5, r25	; 0x05
    1e3c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <Ultrasonic_Trigger+0x136>
    1e46:	9d 83       	std	Y+5, r25	; 0x05
    1e48:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9f 83       	std	Y+7, r25	; 0x07
    1e52:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8e 81       	ldd	r24, Y+6	; 0x06
    1e56:	9f 81       	ldd	r25, Y+7	; 0x07
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <Ultrasonic_Trigger+0x12a>
    1e5c:	24 c0       	rjmp	.+72     	; 0x1ea6 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	68 85       	ldd	r22, Y+8	; 0x08
    1e60:	79 85       	ldd	r23, Y+9	; 0x09
    1e62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9f 83       	std	Y+7, r25	; 0x07
    1e70:	8e 83       	std	Y+6, r24	; 0x06
    1e72:	8e 81       	ldd	r24, Y+6	; 0x06
    1e74:	9f 81       	ldd	r25, Y+7	; 0x07
    1e76:	9b 83       	std	Y+3, r25	; 0x03
    1e78:	8a 83       	std	Y+2, r24	; 0x02
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <Ultrasonic_Trigger+0x172>
    1e82:	9b 83       	std	Y+3, r25	; 0x03
    1e84:	8a 83       	std	Y+2, r24	; 0x02
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e88:	69 89       	ldd	r22, Y+17	; 0x11
    1e8a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	88 8b       	std	Y+16, r24	; 0x10
    1e9a:	88 89       	ldd	r24, Y+16	; 0x10
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	8a 95       	dec	r24
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <Ultrasonic_Trigger+0x194>
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    GPIO_writePin(ULTRA_SONIC_PORT, TRIGGER_PIN, LOGIC_LOW);
    1ea6:	83 e0       	ldi	r24, 0x03	; 3
    1ea8:	67 e0       	ldi	r22, 0x07	; 7
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
}
    1eb0:	68 96       	adiw	r28, 0x18	; 24
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	60 97       	sbiw	r28, 0x10	; 16
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    uint16 distance = 0;
    1ed6:	18 8a       	std	Y+16, r1	; 0x10
    1ed8:	1f 86       	std	Y+15, r1	; 0x0f

    /* Reset edge counter */
    edges_count = 0;
    1eda:	10 92 7a 01 	sts	0x017A, r1
    time_high = 0;
    1ede:	10 92 79 01 	sts	0x0179, r1
    1ee2:	10 92 78 01 	sts	0x0178, r1

    /* Trigger ultrasonic */
    Ultrasonic_Trigger();
    1ee6:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <Ultrasonic_Trigger>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a8 e4       	ldi	r26, 0x48	; 72
    1ef0:	b2 e4       	ldi	r27, 0x42	; 66
    1ef2:	8b 87       	std	Y+11, r24	; 0x0b
    1ef4:	9c 87       	std	Y+12, r25	; 0x0c
    1ef6:	ad 87       	std	Y+13, r26	; 0x0d
    1ef8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a ef       	ldi	r20, 0xFA	; 250
    1f08:	54 e4       	ldi	r21, 0x44	; 68
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8f 83       	std	Y+7, r24	; 0x07
    1f14:	98 87       	std	Y+8, r25	; 0x08
    1f16:	a9 87       	std	Y+9, r26	; 0x09
    1f18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <Ultrasonic_readDistance+0x7a>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <Ultrasonic_readDistance+0xf8>
	else if (__tmp > 65535)
    1f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3e:	78 85       	ldd	r23, Y+8	; 0x08
    1f40:	89 85       	ldd	r24, Y+9	; 0x09
    1f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <Ultrasonic_readDistance+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <Ultrasonic_readDistance+0xda>
    1f7e:	88 ec       	ldi	r24, 0xC8	; 200
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <Ultrasonic_readDistance+0xc8>
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <Ultrasonic_readDistance+0xbc>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <Ultrasonic_readDistance+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <Ultrasonic_readDistance+0x104>
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
     * With F_CPU/8 prescaler: time in microseconds = time_high
     * Sound speed = 343 m/s = 0.0343 cm/us
     * distance = (time_high * 0.0343) / 2 = time_high / 58.3
     * Using 58 for integer math
     */
    if(time_high > 0)
    1fce:	80 91 78 01 	lds	r24, 0x0178
    1fd2:	90 91 79 01 	lds	r25, 0x0179
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	61 f0       	breq	.+24     	; 0x1ff2 <Ultrasonic_readDistance+0x130>
    {
        distance = time_high / 58;
    1fda:	80 91 78 01 	lds	r24, 0x0178
    1fde:	90 91 79 01 	lds	r25, 0x0179
    1fe2:	2a e3       	ldi	r18, 0x3A	; 58
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	b9 01       	movw	r22, r18
    1fe8:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <__udivmodhi4>
    1fec:	cb 01       	movw	r24, r22
    1fee:	98 8b       	std	Y+16, r25	; 0x10
    1ff0:	8f 87       	std	Y+15, r24	; 0x0f
    }

    return distance+1;
    1ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff4:	98 89       	ldd	r25, Y+16	; 0x10
    1ff6:	01 96       	adiw	r24, 0x01	; 1
}
    1ff8:	60 96       	adiw	r28, 0x10	; 16
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    edges_count++;
    2012:	80 91 7a 01 	lds	r24, 0x017A
    2016:	8f 5f       	subi	r24, 0xFF	; 255
    2018:	80 93 7a 01 	sts	0x017A, r24

    if(edges_count == 1)
    201c:	80 91 7a 01 	lds	r24, 0x017A
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	31 f4       	brne	.+12     	; 0x2030 <Ultrasonic_edgeProcessing+0x26>
    {
        /* First edge (rising) - start counting */
        ICU_clearTimerValue();
    2024:	0e 94 ca 0b 	call	0x1794	; 0x1794 <ICU_clearTimerValue>
        ICU_setEdgeDetectionType(FALLING);
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <ICU_setEdgeDetectionType>
    202e:	0f c0       	rjmp	.+30     	; 0x204e <Ultrasonic_edgeProcessing+0x44>
    }
    else if(edges_count == 2)
    2030:	80 91 7a 01 	lds	r24, 0x017A
    2034:	82 30       	cpi	r24, 0x02	; 2
    2036:	59 f4       	brne	.+22     	; 0x204e <Ultrasonic_edgeProcessing+0x44>
    {
        /* Second edge (falling) - get pulse width */
        time_high = ICU_getInputCaptureValue();
    2038:	0e 94 bf 0b 	call	0x177e	; 0x177e <ICU_getInputCaptureValue>
    203c:	90 93 79 01 	sts	0x0179, r25
    2040:	80 93 78 01 	sts	0x0178, r24
        ICU_setEdgeDetectionType(RAISING);
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	0e 94 a0 0b 	call	0x1740	; 0x1740 <ICU_setEdgeDetectionType>
        edges_count = 0;
    204a:	10 92 7a 01 	sts	0x017A, r1
    }
}
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../MCAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	00 d0       	rcall	.+0      	; 0x205a <EEPROM_writeByte+0x6>
    205a:	00 d0       	rcall	.+0      	; 0x205c <EEPROM_writeByte+0x8>
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2066:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    206a:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_getStatus>
    206e:	88 30       	cpi	r24, 0x08	; 8
    2070:	11 f0       	breq	.+4      	; 0x2076 <EEPROM_writeByte+0x22>
        return ERROR;
    2072:	1c 82       	std	Y+4, r1	; 0x04
    2074:	28 c0       	rjmp	.+80     	; 0x20c6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	80 70       	andi	r24, 0x00	; 0
    207c:	97 70       	andi	r25, 0x07	; 7
    207e:	88 0f       	add	r24, r24
    2080:	89 2f       	mov	r24, r25
    2082:	88 1f       	adc	r24, r24
    2084:	99 0b       	sbc	r25, r25
    2086:	91 95       	neg	r25
    2088:	80 6a       	ori	r24, 0xA0	; 160
    208a:	0e 94 49 0c 	call	0x1892	; 0x1892 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    208e:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_getStatus>
    2092:	88 31       	cpi	r24, 0x18	; 24
    2094:	11 f0       	breq	.+4      	; 0x209a <EEPROM_writeByte+0x46>
        return ERROR; 
    2096:	1c 82       	std	Y+4, r1	; 0x04
    2098:	16 c0       	rjmp	.+44     	; 0x20c6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	0e 94 49 0c 	call	0x1892	; 0x1892 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    20a0:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_getStatus>
    20a4:	88 32       	cpi	r24, 0x28	; 40
    20a6:	11 f0       	breq	.+4      	; 0x20ac <EEPROM_writeByte+0x58>
        return ERROR;
    20a8:	1c 82       	std	Y+4, r1	; 0x04
    20aa:	0d c0       	rjmp	.+26     	; 0x20c6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	0e 94 49 0c 	call	0x1892	; 0x1892 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    20b2:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_getStatus>
    20b6:	88 32       	cpi	r24, 0x28	; 40
    20b8:	11 f0       	breq	.+4      	; 0x20be <EEPROM_writeByte+0x6a>
        return ERROR;
    20ba:	1c 82       	std	Y+4, r1	; 0x04
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    20be:	0e 94 3e 0c 	call	0x187c	; 0x187c <TWI_stop>
	
    return SUCCESS;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	8c 83       	std	Y+4, r24	; 0x04
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <EEPROM_readByte+0x6>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <EEPROM_readByte+0x8>
    20de:	0f 92       	push	r0
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	7c 83       	std	Y+4, r23	; 0x04
    20ea:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    20ec:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    20f0:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_getStatus>
    20f4:	88 30       	cpi	r24, 0x08	; 8
    20f6:	11 f0       	breq	.+4      	; 0x20fc <EEPROM_readByte+0x26>
        return ERROR;
    20f8:	1d 82       	std	Y+5, r1	; 0x05
    20fa:	44 c0       	rjmp	.+136    	; 0x2184 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	80 70       	andi	r24, 0x00	; 0
    2102:	97 70       	andi	r25, 0x07	; 7
    2104:	88 0f       	add	r24, r24
    2106:	89 2f       	mov	r24, r25
    2108:	88 1f       	adc	r24, r24
    210a:	99 0b       	sbc	r25, r25
    210c:	91 95       	neg	r25
    210e:	80 6a       	ori	r24, 0xA0	; 160
    2110:	0e 94 49 0c 	call	0x1892	; 0x1892 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2114:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_getStatus>
    2118:	88 31       	cpi	r24, 0x18	; 24
    211a:	11 f0       	breq	.+4      	; 0x2120 <EEPROM_readByte+0x4a>
        return ERROR;
    211c:	1d 82       	std	Y+5, r1	; 0x05
    211e:	32 c0       	rjmp	.+100    	; 0x2184 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	0e 94 49 0c 	call	0x1892	; 0x1892 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2126:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_getStatus>
    212a:	88 32       	cpi	r24, 0x28	; 40
    212c:	11 f0       	breq	.+4      	; 0x2132 <EEPROM_readByte+0x5c>
        return ERROR;
    212e:	1d 82       	std	Y+5, r1	; 0x05
    2130:	29 c0       	rjmp	.+82     	; 0x2184 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2132:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2136:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_getStatus>
    213a:	80 31       	cpi	r24, 0x10	; 16
    213c:	11 f0       	breq	.+4      	; 0x2142 <EEPROM_readByte+0x6c>
        return ERROR;
    213e:	1d 82       	std	Y+5, r1	; 0x05
    2140:	21 c0       	rjmp	.+66     	; 0x2184 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	9a 81       	ldd	r25, Y+2	; 0x02
    2146:	80 70       	andi	r24, 0x00	; 0
    2148:	97 70       	andi	r25, 0x07	; 7
    214a:	88 0f       	add	r24, r24
    214c:	89 2f       	mov	r24, r25
    214e:	88 1f       	adc	r24, r24
    2150:	99 0b       	sbc	r25, r25
    2152:	91 95       	neg	r25
    2154:	81 6a       	ori	r24, 0xA1	; 161
    2156:	0e 94 49 0c 	call	0x1892	; 0x1892 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    215a:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_getStatus>
    215e:	80 34       	cpi	r24, 0x40	; 64
    2160:	11 f0       	breq	.+4      	; 0x2166 <EEPROM_readByte+0x90>
        return ERROR;
    2162:	1d 82       	std	Y+5, r1	; 0x05
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2166:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <TWI_readByteWithNACK>
    216a:	eb 81       	ldd	r30, Y+3	; 0x03
    216c:	fc 81       	ldd	r31, Y+4	; 0x04
    216e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2170:	0e 94 86 0c 	call	0x190c	; 0x190c <TWI_getStatus>
    2174:	88 35       	cpi	r24, 0x58	; 88
    2176:	11 f0       	breq	.+4      	; 0x217c <EEPROM_readByte+0xa6>
        return ERROR;
    2178:	1d 82       	std	Y+5, r1	; 0x05
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    217c:	0e 94 3e 0c 	call	0x187c	; 0x187c <TWI_stop>

    return SUCCESS;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <LM35_getTemperature+0x6>
    219c:	0f 92       	push	r0
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    21a2:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    21a4:	1a 82       	std	Y+2, r1	; 0x02
    21a6:	19 82       	std	Y+1, r1	; 0x01
   adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	0e 94 a2 07 	call	0xf44	; 0xf44 <ADC_readChannel>
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01


	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	cc 01       	movw	r24, r24
    21b8:	a0 e0       	ldi	r26, 0x00	; 0
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	26 e9       	ldi	r18, 0x96	; 150
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	bc 01       	movw	r22, r24
    21c6:	cd 01       	movw	r24, r26
    21c8:	0e 94 3b 21 	call	0x4276	; 0x4276 <__mulsi3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	bc 01       	movw	r22, r24
    21d2:	cd 01       	movw	r24, r26
    21d4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	2a e0       	ldi	r18, 0x0A	; 10
    21e2:	37 ed       	ldi	r19, 0xD7	; 215
    21e4:	43 e2       	ldi	r20, 0x23	; 35
    21e6:	50 e4       	ldi	r21, 0x40	; 64
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 ed       	ldi	r19, 0xD0	; 208
    21f8:	4f eb       	ldi	r20, 0xBF	; 191
    21fa:	54 e4       	ldi	r21, 0x44	; 68
    21fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <DcMotor_Init2>:
#include <avr/io.h>
#include "../MCAL/gpio.h"
#include "../MCAL/PWM.h"

void DcMotor_Init2(void)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(MOTOR2_PORT, IN21, PIN_OUTPUT);
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	64 e0       	ldi	r22, 0x04	; 4
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR2_PORT, IN22, PIN_OUTPUT);
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	65 e0       	ldi	r22, 0x05	; 5
    2236:	41 e0       	ldi	r20, 0x01	; 1
    2238:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR2_PORT, ENABLE21, PIN_OUTPUT);
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	63 e0       	ldi	r22, 0x03	; 3
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>

    GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_LOW);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	64 e0       	ldi	r22, 0x04	; 4
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_LOW);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	65 e0       	ldi	r22, 0x05	; 5
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

    PWM_Timer0_Start(0);
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_Timer0_Start>
}
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <DcMotor_Rotate2>:

void DcMotor_Rotate2(DcMotor_State2 state, uint8 speed)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <DcMotor_Rotate2+0x6>
    226c:	00 d0       	rcall	.+0      	; 0x226e <DcMotor_Rotate2+0x8>
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	6a 83       	std	Y+2, r22	; 0x02
    if (speed > 100) speed = 100;
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	85 36       	cpi	r24, 0x65	; 101
    227a:	10 f0       	brcs	.+4      	; 0x2280 <DcMotor_Rotate2+0x1a>
    227c:	84 e6       	ldi	r24, 0x64	; 100
    227e:	8a 83       	std	Y+2, r24	; 0x02
    OCR0 = (uint8)((speed * 255) / 100);
    2280:	ec e5       	ldi	r30, 0x5C	; 92
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	48 2f       	mov	r20, r24
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	ca 01       	movw	r24, r20
    228c:	9c 01       	movw	r18, r24
    228e:	22 0f       	add	r18, r18
    2290:	33 1f       	adc	r19, r19
    2292:	c9 01       	movw	r24, r18
    2294:	96 95       	lsr	r25
    2296:	98 2f       	mov	r25, r24
    2298:	88 27       	eor	r24, r24
    229a:	97 95       	ror	r25
    229c:	87 95       	ror	r24
    229e:	82 1b       	sub	r24, r18
    22a0:	93 0b       	sbc	r25, r19
    22a2:	84 0f       	add	r24, r20
    22a4:	95 1f       	adc	r25, r21
    22a6:	24 e6       	ldi	r18, 0x64	; 100
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	b9 01       	movw	r22, r18
    22ac:	0e 94 6e 21 	call	0x42dc	; 0x42dc <__divmodhi4>
    22b0:	cb 01       	movw	r24, r22
    22b2:	80 83       	st	Z, r24

    switch (state)
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	3c 83       	std	Y+4, r19	; 0x04
    22bc:	2b 83       	std	Y+3, r18	; 0x03
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	91 05       	cpc	r25, r1
    22c6:	a1 f0       	breq	.+40     	; 0x22f0 <DcMotor_Rotate2+0x8a>
    22c8:	2b 81       	ldd	r18, Y+3	; 0x03
    22ca:	3c 81       	ldd	r19, Y+4	; 0x04
    22cc:	22 30       	cpi	r18, 0x02	; 2
    22ce:	31 05       	cpc	r19, r1
    22d0:	d1 f0       	breq	.+52     	; 0x2306 <DcMotor_Rotate2+0xa0>
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	09 f5       	brne	.+66     	; 0x231c <DcMotor_Rotate2+0xb6>
    {
    case STOP2:
        GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_LOW);
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	64 e0       	ldi	r22, 0x04	; 4
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_LOW);
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	65 e0       	ldi	r22, 0x05	; 5
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    22ee:	20 c0       	rjmp	.+64     	; 0x2330 <DcMotor_Rotate2+0xca>
        break;

    case CW2:
        GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_HIGH);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	64 e0       	ldi	r22, 0x04	; 4
    22f4:	41 e0       	ldi	r20, 0x01	; 1
    22f6:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_LOW);
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	65 e0       	ldi	r22, 0x05	; 5
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    2304:	15 c0       	rjmp	.+42     	; 0x2330 <DcMotor_Rotate2+0xca>
        break;

    case A_CW2:
        GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_HIGH);
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	65 e0       	ldi	r22, 0x05	; 5
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_LOW);
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	64 e0       	ldi	r22, 0x04	; 4
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    231a:	0a c0       	rjmp	.+20     	; 0x2330 <DcMotor_Rotate2+0xca>
        break;

    default:
        GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_LOW);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	64 e0       	ldi	r22, 0x04	; 4
    2320:	40 e0       	ldi	r20, 0x00	; 0
    2322:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_LOW);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	65 e0       	ldi	r22, 0x05	; 5
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        break;
    }
}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <Control_Windows>:
/*******************************************************************************
 *                      Functions Implementation                               *
 *******************************************************************************/

void Control_Windows(void)
{
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	ec 97       	sbiw	r28, 0x3c	; 60
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    static uint8 win1_close_pressed = 0;
    static uint8 win2_open_pressed = 0;
    static uint8 win2_close_pressed = 0;

    // read button inputs (active LOW)
    uint8 win1_open = GPIO_readPin(WINDOW_PORT, WIN1_OPEN_PIN);
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	62 e0       	ldi	r22, 0x02	; 2
    2356:	0e 94 aa 09 	call	0x1354	; 0x1354 <GPIO_readPin>
    235a:	8c af       	std	Y+60, r24	; 0x3c
    uint8 win1_close = GPIO_readPin(WINDOW_PORT, WIN1_CLOSE_PIN);
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	63 e0       	ldi	r22, 0x03	; 3
    2360:	0e 94 aa 09 	call	0x1354	; 0x1354 <GPIO_readPin>
    2364:	8b af       	std	Y+59, r24	; 0x3b
    uint8 win2_open = GPIO_readPin(WINDOW_PORT, WIN2_OPEN_PIN);
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	64 e0       	ldi	r22, 0x04	; 4
    236a:	0e 94 aa 09 	call	0x1354	; 0x1354 <GPIO_readPin>
    236e:	8a af       	std	Y+58, r24	; 0x3a
    uint8 win2_close = GPIO_readPin(WINDOW_PORT, WIN2_CLOSE_PIN);
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	65 e0       	ldi	r22, 0x05	; 5
    2374:	0e 94 aa 09 	call	0x1354	; 0x1354 <GPIO_readPin>
    2378:	89 af       	std	Y+57, r24	; 0x39

    /* ---- Window 1 ---- */
    if(win1_open == LOGIC_LOW && !win1_open_pressed && g_win1_status == 0)
    237a:	8c ad       	ldd	r24, Y+60	; 0x3c
    237c:	88 23       	and	r24, r24
    237e:	09 f0       	breq	.+2      	; 0x2382 <Control_Windows+0x44>
    2380:	a4 c0       	rjmp	.+328    	; 0x24ca <Control_Windows+0x18c>
    2382:	80 91 81 01 	lds	r24, 0x0181
    2386:	88 23       	and	r24, r24
    2388:	09 f0       	breq	.+2      	; 0x238c <Control_Windows+0x4e>
    238a:	9f c0       	rjmp	.+318    	; 0x24ca <Control_Windows+0x18c>
    238c:	80 91 7b 01 	lds	r24, 0x017B
    2390:	88 23       	and	r24, r24
    2392:	09 f0       	breq	.+2      	; 0x2396 <Control_Windows+0x58>
    2394:	9a c0       	rjmp	.+308    	; 0x24ca <Control_Windows+0x18c>
    {
        win1_open_pressed = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	80 93 81 01 	sts	0x0181, r24

        // stop window 2 just in case both were moving
        GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_LOW);
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	64 e0       	ldi	r22, 0x04	; 4
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_LOW);
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	65 e0       	ldi	r22, 0x05	; 5
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

        // run motor1 to open window 1
        GPIO_writePin(MOTOR_PORT, IN1, LOGIC_HIGH);
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	41 e0       	ldi	r20, 0x01	; 1
    23b6:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT, IN2, LOGIC_LOW);
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	62 e0       	ldi	r22, 0x02	; 2
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        PWM_Timer0_Start(100);
    23c4:	84 e6       	ldi	r24, 0x64	; 100
    23c6:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_Timer0_Start>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	aa ef       	ldi	r26, 0xFA	; 250
    23d0:	b3 e4       	ldi	r27, 0x43	; 67
    23d2:	8d ab       	std	Y+53, r24	; 0x35
    23d4:	9e ab       	std	Y+54, r25	; 0x36
    23d6:	af ab       	std	Y+55, r26	; 0x37
    23d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	6d a9       	ldd	r22, Y+53	; 0x35
    23dc:	7e a9       	ldd	r23, Y+54	; 0x36
    23de:	8f a9       	ldd	r24, Y+55	; 0x37
    23e0:	98 ad       	ldd	r25, Y+56	; 0x38
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a ef       	ldi	r20, 0xFA	; 250
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	89 ab       	std	Y+49, r24	; 0x31
    23f4:	9a ab       	std	Y+50, r25	; 0x32
    23f6:	ab ab       	std	Y+51, r26	; 0x33
    23f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23fa:	69 a9       	ldd	r22, Y+49	; 0x31
    23fc:	7a a9       	ldd	r23, Y+50	; 0x32
    23fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2400:	9c a9       	ldd	r25, Y+52	; 0x34
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <Control_Windows+0xde>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	98 ab       	std	Y+48, r25	; 0x30
    2418:	8f a7       	std	Y+47, r24	; 0x2f
    241a:	3f c0       	rjmp	.+126    	; 0x249a <Control_Windows+0x15c>
	else if (__tmp > 65535)
    241c:	69 a9       	ldd	r22, Y+49	; 0x31
    241e:	7a a9       	ldd	r23, Y+50	; 0x32
    2420:	8b a9       	ldd	r24, Y+51	; 0x33
    2422:	9c a9       	ldd	r25, Y+52	; 0x34
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <Control_Windows+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	6d a9       	ldd	r22, Y+53	; 0x35
    2436:	7e a9       	ldd	r23, Y+54	; 0x36
    2438:	8f a9       	ldd	r24, Y+55	; 0x37
    243a:	98 ad       	ldd	r25, Y+56	; 0x38
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	98 ab       	std	Y+48, r25	; 0x30
    245a:	8f a7       	std	Y+47, r24	; 0x2f
    245c:	0f c0       	rjmp	.+30     	; 0x247c <Control_Windows+0x13e>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9e a7       	std	Y+46, r25	; 0x2e
    2464:	8d a7       	std	Y+45, r24	; 0x2d
    2466:	8d a5       	ldd	r24, Y+45	; 0x2d
    2468:	9e a5       	ldd	r25, Y+46	; 0x2e
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <Control_Windows+0x12c>
    246e:	9e a7       	std	Y+46, r25	; 0x2e
    2470:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8f a5       	ldd	r24, Y+47	; 0x2f
    2474:	98 a9       	ldd	r25, Y+48	; 0x30
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	98 ab       	std	Y+48, r25	; 0x30
    247a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8f a5       	ldd	r24, Y+47	; 0x2f
    247e:	98 a9       	ldd	r25, Y+48	; 0x30
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <Control_Windows+0x120>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <Control_Windows+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	69 a9       	ldd	r22, Y+49	; 0x31
    2488:	7a a9       	ldd	r23, Y+50	; 0x32
    248a:	8b a9       	ldd	r24, Y+51	; 0x33
    248c:	9c a9       	ldd	r25, Y+52	; 0x34
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	98 ab       	std	Y+48, r25	; 0x30
    2498:	8f a7       	std	Y+47, r24	; 0x2f
    249a:	8f a5       	ldd	r24, Y+47	; 0x2f
    249c:	98 a9       	ldd	r25, Y+48	; 0x30
    249e:	9c a7       	std	Y+44, r25	; 0x2c
    24a0:	8b a7       	std	Y+43, r24	; 0x2b
    24a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <Control_Windows+0x168>
    24aa:	9c a7       	std	Y+44, r25	; 0x2c
    24ac:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(500);

        // stop motor after short delay
        GPIO_writePin(MOTOR_PORT, IN1, LOGIC_LOW);
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	61 e0       	ldi	r22, 0x01	; 1
    24b2:	40 e0       	ldi	r20, 0x00	; 0
    24b4:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT, IN2, LOGIC_LOW);
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	62 e0       	ldi	r22, 0x02	; 2
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

        g_win1_status = 1; // mark as open
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	80 93 7b 01 	sts	0x017B, r24
    24c8:	a6 c0       	rjmp	.+332    	; 0x2616 <Control_Windows+0x2d8>
    }
    else if(win1_close == LOGIC_LOW && !win1_close_pressed && g_win1_status == 1)
    24ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    24cc:	88 23       	and	r24, r24
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <Control_Windows+0x194>
    24d0:	a2 c0       	rjmp	.+324    	; 0x2616 <Control_Windows+0x2d8>
    24d2:	80 91 80 01 	lds	r24, 0x0180
    24d6:	88 23       	and	r24, r24
    24d8:	09 f0       	breq	.+2      	; 0x24dc <Control_Windows+0x19e>
    24da:	9d c0       	rjmp	.+314    	; 0x2616 <Control_Windows+0x2d8>
    24dc:	80 91 7b 01 	lds	r24, 0x017B
    24e0:	81 30       	cpi	r24, 0x01	; 1
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <Control_Windows+0x1a8>
    24e4:	98 c0       	rjmp	.+304    	; 0x2616 <Control_Windows+0x2d8>
    {
        win1_close_pressed = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	80 93 80 01 	sts	0x0180, r24

        // stop other motor first
        GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_LOW);
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	64 e0       	ldi	r22, 0x04	; 4
    24f0:	40 e0       	ldi	r20, 0x00	; 0
    24f2:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_LOW);
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	65 e0       	ldi	r22, 0x05	; 5
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

        // reverse motor1 to close window
        GPIO_writePin(MOTOR_PORT, IN1, LOGIC_LOW);
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	61 e0       	ldi	r22, 0x01	; 1
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT, IN2, LOGIC_HIGH);
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	62 e0       	ldi	r22, 0x02	; 2
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        PWM_Timer0_Start(100);
    2514:	84 e6       	ldi	r24, 0x64	; 100
    2516:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_Timer0_Start>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	aa ef       	ldi	r26, 0xFA	; 250
    2520:	b3 e4       	ldi	r27, 0x43	; 67
    2522:	8f a3       	std	Y+39, r24	; 0x27
    2524:	98 a7       	std	Y+40, r25	; 0x28
    2526:	a9 a7       	std	Y+41, r26	; 0x29
    2528:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252a:	6f a1       	ldd	r22, Y+39	; 0x27
    252c:	78 a5       	ldd	r23, Y+40	; 0x28
    252e:	89 a5       	ldd	r24, Y+41	; 0x29
    2530:	9a a5       	ldd	r25, Y+42	; 0x2a
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4a ef       	ldi	r20, 0xFA	; 250
    2538:	54 e4       	ldi	r21, 0x44	; 68
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8b a3       	std	Y+35, r24	; 0x23
    2544:	9c a3       	std	Y+36, r25	; 0x24
    2546:	ad a3       	std	Y+37, r26	; 0x25
    2548:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    254a:	6b a1       	ldd	r22, Y+35	; 0x23
    254c:	7c a1       	ldd	r23, Y+36	; 0x24
    254e:	8d a1       	ldd	r24, Y+37	; 0x25
    2550:	9e a1       	ldd	r25, Y+38	; 0x26
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	2c f4       	brge	.+10     	; 0x256c <Control_Windows+0x22e>
		__ticks = 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9a a3       	std	Y+34, r25	; 0x22
    2568:	89 a3       	std	Y+33, r24	; 0x21
    256a:	3f c0       	rjmp	.+126    	; 0x25ea <Control_Windows+0x2ac>
	else if (__tmp > 65535)
    256c:	6b a1       	ldd	r22, Y+35	; 0x23
    256e:	7c a1       	ldd	r23, Y+36	; 0x24
    2570:	8d a1       	ldd	r24, Y+37	; 0x25
    2572:	9e a1       	ldd	r25, Y+38	; 0x26
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	4c f5       	brge	.+82     	; 0x25d6 <Control_Windows+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	6f a1       	ldd	r22, Y+39	; 0x27
    2586:	78 a5       	ldd	r23, Y+40	; 0x28
    2588:	89 a5       	ldd	r24, Y+41	; 0x29
    258a:	9a a5       	ldd	r25, Y+42	; 0x2a
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9a a3       	std	Y+34, r25	; 0x22
    25aa:	89 a3       	std	Y+33, r24	; 0x21
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <Control_Windows+0x28e>
    25ae:	88 ec       	ldi	r24, 0xC8	; 200
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	98 a3       	std	Y+32, r25	; 0x20
    25b4:	8f 8f       	std	Y+31, r24	; 0x1f
    25b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b8:	98 a1       	ldd	r25, Y+32	; 0x20
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <Control_Windows+0x27c>
    25be:	98 a3       	std	Y+32, r25	; 0x20
    25c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	9a a1       	ldd	r25, Y+34	; 0x22
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	9a a3       	std	Y+34, r25	; 0x22
    25ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	89 a1       	ldd	r24, Y+33	; 0x21
    25ce:	9a a1       	ldd	r25, Y+34	; 0x22
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	69 f7       	brne	.-38     	; 0x25ae <Control_Windows+0x270>
    25d4:	14 c0       	rjmp	.+40     	; 0x25fe <Control_Windows+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	6b a1       	ldd	r22, Y+35	; 0x23
    25d8:	7c a1       	ldd	r23, Y+36	; 0x24
    25da:	8d a1       	ldd	r24, Y+37	; 0x25
    25dc:	9e a1       	ldd	r25, Y+38	; 0x26
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9a a3       	std	Y+34, r25	; 0x22
    25e8:	89 a3       	std	Y+33, r24	; 0x21
    25ea:	89 a1       	ldd	r24, Y+33	; 0x21
    25ec:	9a a1       	ldd	r25, Y+34	; 0x22
    25ee:	9e 8f       	std	Y+30, r25	; 0x1e
    25f0:	8d 8f       	std	Y+29, r24	; 0x1d
    25f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <Control_Windows+0x2b8>
    25fa:	9e 8f       	std	Y+30, r25	; 0x1e
    25fc:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(500);

        // stop again
        GPIO_writePin(MOTOR_PORT, IN1, LOGIC_LOW);
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	61 e0       	ldi	r22, 0x01	; 1
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT, IN2, LOGIC_LOW);
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	62 e0       	ldi	r22, 0x02	; 2
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

        g_win1_status = 0; // now closed
    2612:	10 92 7b 01 	sts	0x017B, r1
    }

    // release button flags when button is up
    if(win1_open == LOGIC_HIGH) win1_open_pressed = 0;
    2616:	8c ad       	ldd	r24, Y+60	; 0x3c
    2618:	81 30       	cpi	r24, 0x01	; 1
    261a:	11 f4       	brne	.+4      	; 0x2620 <Control_Windows+0x2e2>
    261c:	10 92 81 01 	sts	0x0181, r1
    if(win1_close == LOGIC_HIGH) win1_close_pressed = 0;
    2620:	8b ad       	ldd	r24, Y+59	; 0x3b
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	11 f4       	brne	.+4      	; 0x262a <Control_Windows+0x2ec>
    2626:	10 92 80 01 	sts	0x0180, r1

    /* ---- Window 2 ---- */
    if(win2_open == LOGIC_LOW && !win2_open_pressed && g_win2_status == 0)
    262a:	8a ad       	ldd	r24, Y+58	; 0x3a
    262c:	88 23       	and	r24, r24
    262e:	09 f0       	breq	.+2      	; 0x2632 <Control_Windows+0x2f4>
    2630:	a4 c0       	rjmp	.+328    	; 0x277a <Control_Windows+0x43c>
    2632:	80 91 7f 01 	lds	r24, 0x017F
    2636:	88 23       	and	r24, r24
    2638:	09 f0       	breq	.+2      	; 0x263c <Control_Windows+0x2fe>
    263a:	9f c0       	rjmp	.+318    	; 0x277a <Control_Windows+0x43c>
    263c:	80 91 7c 01 	lds	r24, 0x017C
    2640:	88 23       	and	r24, r24
    2642:	09 f0       	breq	.+2      	; 0x2646 <Control_Windows+0x308>
    2644:	9a c0       	rjmp	.+308    	; 0x277a <Control_Windows+0x43c>
    {
        win2_open_pressed = 1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	80 93 7f 01 	sts	0x017F, r24

        // stop motor1 before using motor2
        GPIO_writePin(MOTOR_PORT, IN1, LOGIC_LOW);
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	61 e0       	ldi	r22, 0x01	; 1
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT, IN2, LOGIC_LOW);
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	62 e0       	ldi	r22, 0x02	; 2
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

        // open window 2
        GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_HIGH);
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	64 e0       	ldi	r22, 0x04	; 4
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_LOW);
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	65 e0       	ldi	r22, 0x05	; 5
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        PWM_Timer0_Start(100);
    2674:	84 e6       	ldi	r24, 0x64	; 100
    2676:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_Timer0_Start>
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	aa ef       	ldi	r26, 0xFA	; 250
    2680:	b3 e4       	ldi	r27, 0x43	; 67
    2682:	89 8f       	std	Y+25, r24	; 0x19
    2684:	9a 8f       	std	Y+26, r25	; 0x1a
    2686:	ab 8f       	std	Y+27, r26	; 0x1b
    2688:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268a:	69 8d       	ldd	r22, Y+25	; 0x19
    268c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    268e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2690:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	4a ef       	ldi	r20, 0xFA	; 250
    2698:	54 e4       	ldi	r21, 0x44	; 68
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	8d 8b       	std	Y+21, r24	; 0x15
    26a4:	9e 8b       	std	Y+22, r25	; 0x16
    26a6:	af 8b       	std	Y+23, r26	; 0x17
    26a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26aa:	6d 89       	ldd	r22, Y+21	; 0x15
    26ac:	7e 89       	ldd	r23, Y+22	; 0x16
    26ae:	8f 89       	ldd	r24, Y+23	; 0x17
    26b0:	98 8d       	ldd	r25, Y+24	; 0x18
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5f e3       	ldi	r21, 0x3F	; 63
    26ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26be:	88 23       	and	r24, r24
    26c0:	2c f4       	brge	.+10     	; 0x26cc <Control_Windows+0x38e>
		__ticks = 1;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9c 8b       	std	Y+20, r25	; 0x14
    26c8:	8b 8b       	std	Y+19, r24	; 0x13
    26ca:	3f c0       	rjmp	.+126    	; 0x274a <Control_Windows+0x40c>
	else if (__tmp > 65535)
    26cc:	6d 89       	ldd	r22, Y+21	; 0x15
    26ce:	7e 89       	ldd	r23, Y+22	; 0x16
    26d0:	8f 89       	ldd	r24, Y+23	; 0x17
    26d2:	98 8d       	ldd	r25, Y+24	; 0x18
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	3f ef       	ldi	r19, 0xFF	; 255
    26d8:	4f e7       	ldi	r20, 0x7F	; 127
    26da:	57 e4       	ldi	r21, 0x47	; 71
    26dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e0:	18 16       	cp	r1, r24
    26e2:	4c f5       	brge	.+82     	; 0x2736 <Control_Windows+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e4:	69 8d       	ldd	r22, Y+25	; 0x19
    26e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e2       	ldi	r20, 0x20	; 32
    26f2:	51 e4       	ldi	r21, 0x41	; 65
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9c 8b       	std	Y+20, r25	; 0x14
    270a:	8b 8b       	std	Y+19, r24	; 0x13
    270c:	0f c0       	rjmp	.+30     	; 0x272c <Control_Windows+0x3ee>
    270e:	88 ec       	ldi	r24, 0xC8	; 200
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9a 8b       	std	Y+18, r25	; 0x12
    2714:	89 8b       	std	Y+17, r24	; 0x11
    2716:	89 89       	ldd	r24, Y+17	; 0x11
    2718:	9a 89       	ldd	r25, Y+18	; 0x12
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <Control_Windows+0x3dc>
    271e:	9a 8b       	std	Y+18, r25	; 0x12
    2720:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2722:	8b 89       	ldd	r24, Y+19	; 0x13
    2724:	9c 89       	ldd	r25, Y+20	; 0x14
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	9c 8b       	std	Y+20, r25	; 0x14
    272a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272c:	8b 89       	ldd	r24, Y+19	; 0x13
    272e:	9c 89       	ldd	r25, Y+20	; 0x14
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	69 f7       	brne	.-38     	; 0x270e <Control_Windows+0x3d0>
    2734:	14 c0       	rjmp	.+40     	; 0x275e <Control_Windows+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2736:	6d 89       	ldd	r22, Y+21	; 0x15
    2738:	7e 89       	ldd	r23, Y+22	; 0x16
    273a:	8f 89       	ldd	r24, Y+23	; 0x17
    273c:	98 8d       	ldd	r25, Y+24	; 0x18
    273e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9c 8b       	std	Y+20, r25	; 0x14
    2748:	8b 8b       	std	Y+19, r24	; 0x13
    274a:	8b 89       	ldd	r24, Y+19	; 0x13
    274c:	9c 89       	ldd	r25, Y+20	; 0x14
    274e:	98 8b       	std	Y+16, r25	; 0x10
    2750:	8f 87       	std	Y+15, r24	; 0x0f
    2752:	8f 85       	ldd	r24, Y+15	; 0x0f
    2754:	98 89       	ldd	r25, Y+16	; 0x10
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <Control_Windows+0x418>
    275a:	98 8b       	std	Y+16, r25	; 0x10
    275c:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(500);

        // stop it
        GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_LOW);
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	64 e0       	ldi	r22, 0x04	; 4
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_LOW);
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	65 e0       	ldi	r22, 0x05	; 5
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

        g_win2_status = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	80 93 7c 01 	sts	0x017C, r24
    2778:	a6 c0       	rjmp	.+332    	; 0x28c6 <Control_Windows+0x588>
    }
    else if(win2_close == LOGIC_LOW && !win2_close_pressed && g_win2_status == 1)
    277a:	89 ad       	ldd	r24, Y+57	; 0x39
    277c:	88 23       	and	r24, r24
    277e:	09 f0       	breq	.+2      	; 0x2782 <Control_Windows+0x444>
    2780:	a2 c0       	rjmp	.+324    	; 0x28c6 <Control_Windows+0x588>
    2782:	80 91 7e 01 	lds	r24, 0x017E
    2786:	88 23       	and	r24, r24
    2788:	09 f0       	breq	.+2      	; 0x278c <Control_Windows+0x44e>
    278a:	9d c0       	rjmp	.+314    	; 0x28c6 <Control_Windows+0x588>
    278c:	80 91 7c 01 	lds	r24, 0x017C
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	09 f0       	breq	.+2      	; 0x2796 <Control_Windows+0x458>
    2794:	98 c0       	rjmp	.+304    	; 0x28c6 <Control_Windows+0x588>
    {
        win2_close_pressed = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	80 93 7e 01 	sts	0x017E, r24

        // stop motor1 first
        GPIO_writePin(MOTOR_PORT, IN1, LOGIC_LOW);
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	61 e0       	ldi	r22, 0x01	; 1
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT, IN2, LOGIC_LOW);
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	62 e0       	ldi	r22, 0x02	; 2
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

        // reverse motor2 to close window
        GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_LOW);
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	64 e0       	ldi	r22, 0x04	; 4
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_HIGH);
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	65 e0       	ldi	r22, 0x05	; 5
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        PWM_Timer0_Start(100);
    27c4:	84 e6       	ldi	r24, 0x64	; 100
    27c6:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_Timer0_Start>
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	aa ef       	ldi	r26, 0xFA	; 250
    27d0:	b3 e4       	ldi	r27, 0x43	; 67
    27d2:	8b 87       	std	Y+11, r24	; 0x0b
    27d4:	9c 87       	std	Y+12, r25	; 0x0c
    27d6:	ad 87       	std	Y+13, r26	; 0x0d
    27d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27da:	6b 85       	ldd	r22, Y+11	; 0x0b
    27dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27de:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4a ef       	ldi	r20, 0xFA	; 250
    27e8:	54 e4       	ldi	r21, 0x44	; 68
    27ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	8f 83       	std	Y+7, r24	; 0x07
    27f4:	98 87       	std	Y+8, r25	; 0x08
    27f6:	a9 87       	std	Y+9, r26	; 0x09
    27f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27fa:	6f 81       	ldd	r22, Y+7	; 0x07
    27fc:	78 85       	ldd	r23, Y+8	; 0x08
    27fe:	89 85       	ldd	r24, Y+9	; 0x09
    2800:	9a 85       	ldd	r25, Y+10	; 0x0a
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e8       	ldi	r20, 0x80	; 128
    2808:	5f e3       	ldi	r21, 0x3F	; 63
    280a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    280e:	88 23       	and	r24, r24
    2810:	2c f4       	brge	.+10     	; 0x281c <Control_Windows+0x4de>
		__ticks = 1;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9e 83       	std	Y+6, r25	; 0x06
    2818:	8d 83       	std	Y+5, r24	; 0x05
    281a:	3f c0       	rjmp	.+126    	; 0x289a <Control_Windows+0x55c>
	else if (__tmp > 65535)
    281c:	6f 81       	ldd	r22, Y+7	; 0x07
    281e:	78 85       	ldd	r23, Y+8	; 0x08
    2820:	89 85       	ldd	r24, Y+9	; 0x09
    2822:	9a 85       	ldd	r25, Y+10	; 0x0a
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	3f ef       	ldi	r19, 0xFF	; 255
    2828:	4f e7       	ldi	r20, 0x7F	; 127
    282a:	57 e4       	ldi	r21, 0x47	; 71
    282c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2830:	18 16       	cp	r1, r24
    2832:	4c f5       	brge	.+82     	; 0x2886 <Control_Windows+0x548>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2834:	6b 85       	ldd	r22, Y+11	; 0x0b
    2836:	7c 85       	ldd	r23, Y+12	; 0x0c
    2838:	8d 85       	ldd	r24, Y+13	; 0x0d
    283a:	9e 85       	ldd	r25, Y+14	; 0x0e
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e2       	ldi	r20, 0x20	; 32
    2842:	51 e4       	ldi	r21, 0x41	; 65
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	0f c0       	rjmp	.+30     	; 0x287c <Control_Windows+0x53e>
    285e:	88 ec       	ldi	r24, 0xC8	; 200
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9c 83       	std	Y+4, r25	; 0x04
    2864:	8b 83       	std	Y+3, r24	; 0x03
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <Control_Windows+0x52c>
    286e:	9c 83       	std	Y+4, r25	; 0x04
    2870:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	9e 81       	ldd	r25, Y+6	; 0x06
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	9e 83       	std	Y+6, r25	; 0x06
    287a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	9e 81       	ldd	r25, Y+6	; 0x06
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	69 f7       	brne	.-38     	; 0x285e <Control_Windows+0x520>
    2884:	14 c0       	rjmp	.+40     	; 0x28ae <Control_Windows+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2886:	6f 81       	ldd	r22, Y+7	; 0x07
    2888:	78 85       	ldd	r23, Y+8	; 0x08
    288a:	89 85       	ldd	r24, Y+9	; 0x09
    288c:	9a 85       	ldd	r25, Y+10	; 0x0a
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
    289c:	9e 81       	ldd	r25, Y+6	; 0x06
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <Control_Windows+0x568>
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);

        // stop after move
        GPIO_writePin(MOTOR2_PORT, IN21, LOGIC_LOW);
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	64 e0       	ldi	r22, 0x04	; 4
    28b2:	40 e0       	ldi	r20, 0x00	; 0
    28b4:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
        GPIO_writePin(MOTOR2_PORT, IN22, LOGIC_LOW);
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	65 e0       	ldi	r22, 0x05	; 5
    28bc:	40 e0       	ldi	r20, 0x00	; 0
    28be:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

        g_win2_status = 0;
    28c2:	10 92 7c 01 	sts	0x017C, r1
    }

    // release press flags
    if(win2_open == LOGIC_HIGH) win2_open_pressed = 0;
    28c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    28c8:	81 30       	cpi	r24, 0x01	; 1
    28ca:	11 f4       	brne	.+4      	; 0x28d0 <Control_Windows+0x592>
    28cc:	10 92 7f 01 	sts	0x017F, r1
    if(win2_close == LOGIC_HIGH) win2_close_pressed = 0;
    28d0:	89 ad       	ldd	r24, Y+57	; 0x39
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	11 f4       	brne	.+4      	; 0x28da <Control_Windows+0x59c>
    28d6:	10 92 7e 01 	sts	0x017E, r1
}
    28da:	ec 96       	adiw	r28, 0x3c	; 60
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <start_monitor>:

void start_monitor(void)
{
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	c5 58       	subi	r28, 0x85	; 133
    28fa:	d0 40       	sbci	r29, 0x00	; 0
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    uint8 temp = 0;
    2906:	fe 01       	movw	r30, r28
    2908:	eb 57       	subi	r30, 0x7B	; 123
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	10 82       	st	Z, r1
    uint16 distance = 0;
    290e:	fe 01       	movw	r30, r28
    2910:	ed 57       	subi	r30, 0x7D	; 125
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	11 82       	std	Z+1, r1	; 0x01
    2916:	10 82       	st	Z, r1
    uint8 fault_distance_logged = 0;
    2918:	fe 01       	movw	r30, r28
    291a:	ee 57       	subi	r30, 0x7E	; 126
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	10 82       	st	Z, r1
    uint8 fault_temp_logged = 0;
    2920:	fe 01       	movw	r30, r28
    2922:	ef 57       	subi	r30, 0x7F	; 127
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	10 82       	st	Z, r1

    g_monitoring_active = 1; // mark system as active
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	80 93 7d 01 	sts	0x017D, r24

    for(uint8 i = 0; i < 10; i++) // loop for 10 readings
    292e:	fe 01       	movw	r30, r28
    2930:	e0 58       	subi	r30, 0x80	; 128
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	10 82       	st	Z, r1
    2936:	b1 c5       	rjmp	.+2914   	; 0x349a <start_monitor+0xbae>
    {
        temp = LM35_getTemperature();
    2938:	0e 94 cb 10 	call	0x2196	; 0x2196 <LM35_getTemperature>
    293c:	fe 01       	movw	r30, r28
    293e:	eb 57       	subi	r30, 0x7B	; 123
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 83       	st	Z, r24
        distance = Ultrasonic_readDistance();
    2944:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <Ultrasonic_readDistance>
    2948:	fe 01       	movw	r30, r28
    294a:	ed 57       	subi	r30, 0x7D	; 125
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24

        Control_Windows(); // handle manual button actions
    2952:	0e 94 9f 11 	call	0x233e	; 0x233e <Control_Windows>

        // send temp and distance to HMI ECU
        UART_sendByte(temp);
    2956:	fe 01       	movw	r30, r28
    2958:	eb 57       	subi	r30, 0x7B	; 123
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	80 81       	ld	r24, Z
    295e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
    2962:	fe 01       	movw	r30, r28
    2964:	e5 58       	subi	r30, 0x85	; 133
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	a0 e2       	ldi	r26, 0x20	; 32
    296e:	b1 e4       	ldi	r27, 0x41	; 65
    2970:	80 83       	st	Z, r24
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	a2 83       	std	Z+2, r26	; 0x02
    2976:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2978:	8e 01       	movw	r16, r28
    297a:	09 58       	subi	r16, 0x89	; 137
    297c:	1f 4f       	sbci	r17, 0xFF	; 255
    297e:	fe 01       	movw	r30, r28
    2980:	e5 58       	subi	r30, 0x85	; 133
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a ef       	ldi	r20, 0xFA	; 250
    2992:	54 e4       	ldi	r21, 0x44	; 68
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	f8 01       	movw	r30, r16
    299e:	80 83       	st	Z, r24
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	a2 83       	std	Z+2, r26	; 0x02
    29a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a6:	fe 01       	movw	r30, r28
    29a8:	e9 58       	subi	r30, 0x89	; 137
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e8       	ldi	r20, 0x80	; 128
    29ba:	5f e3       	ldi	r21, 0x3F	; 63
    29bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c0:	88 23       	and	r24, r24
    29c2:	44 f4       	brge	.+16     	; 0x29d4 <start_monitor+0xe8>
		__ticks = 1;
    29c4:	fe 01       	movw	r30, r28
    29c6:	eb 58       	subi	r30, 0x8B	; 139
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
    29d2:	64 c0       	rjmp	.+200    	; 0x2a9c <start_monitor+0x1b0>
	else if (__tmp > 65535)
    29d4:	fe 01       	movw	r30, r28
    29d6:	e9 58       	subi	r30, 0x89	; 137
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	3f ef       	ldi	r19, 0xFF	; 255
    29e6:	4f e7       	ldi	r20, 0x7F	; 127
    29e8:	57 e4       	ldi	r21, 0x47	; 71
    29ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ee:	18 16       	cp	r1, r24
    29f0:	0c f0       	brlt	.+2      	; 0x29f4 <start_monitor+0x108>
    29f2:	43 c0       	rjmp	.+134    	; 0x2a7a <start_monitor+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f4:	fe 01       	movw	r30, r28
    29f6:	e5 58       	subi	r30, 0x85	; 133
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	60 81       	ld	r22, Z
    29fc:	71 81       	ldd	r23, Z+1	; 0x01
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	8e 01       	movw	r16, r28
    2a14:	0b 58       	subi	r16, 0x8B	; 139
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	f8 01       	movw	r30, r16
    2a26:	91 83       	std	Z+1, r25	; 0x01
    2a28:	80 83       	st	Z, r24
    2a2a:	1f c0       	rjmp	.+62     	; 0x2a6a <start_monitor+0x17e>
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	ed 58       	subi	r30, 0x8D	; 141
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	88 ec       	ldi	r24, 0xC8	; 200
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	ed 58       	subi	r30, 0x8D	; 141
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <start_monitor+0x158>
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ed 58       	subi	r30, 0x8D	; 141
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	de 01       	movw	r26, r28
    2a54:	ab 58       	subi	r26, 0x8B	; 139
    2a56:	bf 4f       	sbci	r27, 0xFF	; 255
    2a58:	fe 01       	movw	r30, r28
    2a5a:	eb 58       	subi	r30, 0x8B	; 139
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 81       	ld	r24, Z
    2a60:	91 81       	ldd	r25, Z+1	; 0x01
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	11 96       	adiw	r26, 0x01	; 1
    2a66:	9c 93       	st	X, r25
    2a68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	eb 58       	subi	r30, 0x8B	; 139
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	d1 f6       	brne	.-76     	; 0x2a2c <start_monitor+0x140>
    2a78:	27 c0       	rjmp	.+78     	; 0x2ac8 <start_monitor+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7a:	8e 01       	movw	r16, r28
    2a7c:	0b 58       	subi	r16, 0x8B	; 139
    2a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a80:	fe 01       	movw	r30, r28
    2a82:	e9 58       	subi	r30, 0x89	; 137
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	f8 01       	movw	r30, r16
    2a98:	91 83       	std	Z+1, r25	; 0x01
    2a9a:	80 83       	st	Z, r24
    2a9c:	de 01       	movw	r26, r28
    2a9e:	af 58       	subi	r26, 0x8F	; 143
    2aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	eb 58       	subi	r30, 0x8B	; 139
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	80 81       	ld	r24, Z
    2aaa:	91 81       	ldd	r25, Z+1	; 0x01
    2aac:	8d 93       	st	X+, r24
    2aae:	9c 93       	st	X, r25
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ef 58       	subi	r30, 0x8F	; 143
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	80 81       	ld	r24, Z
    2ab8:	91 81       	ldd	r25, Z+1	; 0x01
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <start_monitor+0x1ce>
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ef 58       	subi	r30, 0x8F	; 143
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	80 83       	st	Z, r24
        _delay_ms(10);
        UART_sendByte((uint8)(distance >> 8));
    2ac8:	fe 01       	movw	r30, r28
    2aca:	ed 57       	subi	r30, 0x7D	; 125
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	80 81       	ld	r24, Z
    2ad0:	91 81       	ldd	r25, Z+1	; 0x01
    2ad2:	89 2f       	mov	r24, r25
    2ad4:	99 27       	eor	r25, r25
    2ad6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
    2ada:	fe 01       	movw	r30, r28
    2adc:	e3 59       	subi	r30, 0x93	; 147
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 e2       	ldi	r26, 0x20	; 32
    2ae6:	b1 e4       	ldi	r27, 0x41	; 65
    2ae8:	80 83       	st	Z, r24
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	a2 83       	std	Z+2, r26	; 0x02
    2aee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	8e 01       	movw	r16, r28
    2af2:	07 59       	subi	r16, 0x97	; 151
    2af4:	1f 4f       	sbci	r17, 0xFF	; 255
    2af6:	fe 01       	movw	r30, r28
    2af8:	e3 59       	subi	r30, 0x93	; 147
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a ef       	ldi	r20, 0xFA	; 250
    2b0a:	54 e4       	ldi	r21, 0x44	; 68
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	f8 01       	movw	r30, r16
    2b16:	80 83       	st	Z, r24
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	a2 83       	std	Z+2, r26	; 0x02
    2b1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e7 59       	subi	r30, 0x97	; 151
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e8       	ldi	r20, 0x80	; 128
    2b32:	5f e3       	ldi	r21, 0x3F	; 63
    2b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b38:	88 23       	and	r24, r24
    2b3a:	44 f4       	brge	.+16     	; 0x2b4c <start_monitor+0x260>
		__ticks = 1;
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e9 59       	subi	r30, 0x99	; 153
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
    2b4a:	64 c0       	rjmp	.+200    	; 0x2c14 <start_monitor+0x328>
	else if (__tmp > 65535)
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e7 59       	subi	r30, 0x97	; 151
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	3f ef       	ldi	r19, 0xFF	; 255
    2b5e:	4f e7       	ldi	r20, 0x7F	; 127
    2b60:	57 e4       	ldi	r21, 0x47	; 71
    2b62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b66:	18 16       	cp	r1, r24
    2b68:	0c f0       	brlt	.+2      	; 0x2b6c <start_monitor+0x280>
    2b6a:	43 c0       	rjmp	.+134    	; 0x2bf2 <start_monitor+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e3 59       	subi	r30, 0x93	; 147
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	60 81       	ld	r22, Z
    2b74:	71 81       	ldd	r23, Z+1	; 0x01
    2b76:	82 81       	ldd	r24, Z+2	; 0x02
    2b78:	93 81       	ldd	r25, Z+3	; 0x03
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e2       	ldi	r20, 0x20	; 32
    2b80:	51 e4       	ldi	r21, 0x41	; 65
    2b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	8e 01       	movw	r16, r28
    2b8c:	09 59       	subi	r16, 0x99	; 153
    2b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b90:	bc 01       	movw	r22, r24
    2b92:	cd 01       	movw	r24, r26
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	f8 01       	movw	r30, r16
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	80 83       	st	Z, r24
    2ba2:	1f c0       	rjmp	.+62     	; 0x2be2 <start_monitor+0x2f6>
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	eb 59       	subi	r30, 0x9B	; 155
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	88 ec       	ldi	r24, 0xC8	; 200
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	91 83       	std	Z+1, r25	; 0x01
    2bb0:	80 83       	st	Z, r24
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	eb 59       	subi	r30, 0x9B	; 155
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <start_monitor+0x2d0>
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	eb 59       	subi	r30, 0x9B	; 155
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bca:	de 01       	movw	r26, r28
    2bcc:	a9 59       	subi	r26, 0x99	; 153
    2bce:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e9 59       	subi	r30, 0x99	; 153
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	11 96       	adiw	r26, 0x01	; 1
    2bde:	9c 93       	st	X, r25
    2be0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be2:	fe 01       	movw	r30, r28
    2be4:	e9 59       	subi	r30, 0x99	; 153
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	91 81       	ldd	r25, Z+1	; 0x01
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	d1 f6       	brne	.-76     	; 0x2ba4 <start_monitor+0x2b8>
    2bf0:	27 c0       	rjmp	.+78     	; 0x2c40 <start_monitor+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf2:	8e 01       	movw	r16, r28
    2bf4:	09 59       	subi	r16, 0x99	; 153
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	e7 59       	subi	r30, 0x97	; 151
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	60 81       	ld	r22, Z
    2c00:	71 81       	ldd	r23, Z+1	; 0x01
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	f8 01       	movw	r30, r16
    2c10:	91 83       	std	Z+1, r25	; 0x01
    2c12:	80 83       	st	Z, r24
    2c14:	de 01       	movw	r26, r28
    2c16:	ad 59       	subi	r26, 0x9D	; 157
    2c18:	bf 4f       	sbci	r27, 0xFF	; 255
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e9 59       	subi	r30, 0x99	; 153
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 81       	ld	r24, Z
    2c22:	91 81       	ldd	r25, Z+1	; 0x01
    2c24:	8d 93       	st	X+, r24
    2c26:	9c 93       	st	X, r25
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ed 59       	subi	r30, 0x9D	; 157
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 81       	ld	r24, Z
    2c30:	91 81       	ldd	r25, Z+1	; 0x01
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <start_monitor+0x346>
    2c36:	fe 01       	movw	r30, r28
    2c38:	ed 59       	subi	r30, 0x9D	; 157
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	80 83       	st	Z, r24
        _delay_ms(10);
        UART_sendByte((uint8)distance);
    2c40:	fe 01       	movw	r30, r28
    2c42:	ed 57       	subi	r30, 0x7D	; 125
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 81       	ld	r24, Z
    2c48:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e1 5a       	subi	r30, 0xA1	; 161
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	a0 e2       	ldi	r26, 0x20	; 32
    2c58:	b1 e4       	ldi	r27, 0x41	; 65
    2c5a:	80 83       	st	Z, r24
    2c5c:	91 83       	std	Z+1, r25	; 0x01
    2c5e:	a2 83       	std	Z+2, r26	; 0x02
    2c60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c62:	8e 01       	movw	r16, r28
    2c64:	05 5a       	subi	r16, 0xA5	; 165
    2c66:	1f 4f       	sbci	r17, 0xFF	; 255
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e1 5a       	subi	r30, 0xA1	; 161
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	60 81       	ld	r22, Z
    2c70:	71 81       	ldd	r23, Z+1	; 0x01
    2c72:	82 81       	ldd	r24, Z+2	; 0x02
    2c74:	93 81       	ldd	r25, Z+3	; 0x03
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	4a ef       	ldi	r20, 0xFA	; 250
    2c7c:	54 e4       	ldi	r21, 0x44	; 68
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	f8 01       	movw	r30, r16
    2c88:	80 83       	st	Z, r24
    2c8a:	91 83       	std	Z+1, r25	; 0x01
    2c8c:	a2 83       	std	Z+2, r26	; 0x02
    2c8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c90:	fe 01       	movw	r30, r28
    2c92:	e5 5a       	subi	r30, 0xA5	; 165
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	60 81       	ld	r22, Z
    2c98:	71 81       	ldd	r23, Z+1	; 0x01
    2c9a:	82 81       	ldd	r24, Z+2	; 0x02
    2c9c:	93 81       	ldd	r25, Z+3	; 0x03
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e8       	ldi	r20, 0x80	; 128
    2ca4:	5f e3       	ldi	r21, 0x3F	; 63
    2ca6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2caa:	88 23       	and	r24, r24
    2cac:	44 f4       	brge	.+16     	; 0x2cbe <start_monitor+0x3d2>
		__ticks = 1;
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e7 5a       	subi	r30, 0xA7	; 167
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	91 83       	std	Z+1, r25	; 0x01
    2cba:	80 83       	st	Z, r24
    2cbc:	64 c0       	rjmp	.+200    	; 0x2d86 <start_monitor+0x49a>
	else if (__tmp > 65535)
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e5 5a       	subi	r30, 0xA5	; 165
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	60 81       	ld	r22, Z
    2cc6:	71 81       	ldd	r23, Z+1	; 0x01
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	3f ef       	ldi	r19, 0xFF	; 255
    2cd0:	4f e7       	ldi	r20, 0x7F	; 127
    2cd2:	57 e4       	ldi	r21, 0x47	; 71
    2cd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cd8:	18 16       	cp	r1, r24
    2cda:	0c f0       	brlt	.+2      	; 0x2cde <start_monitor+0x3f2>
    2cdc:	43 c0       	rjmp	.+134    	; 0x2d64 <start_monitor+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e1 5a       	subi	r30, 0xA1	; 161
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	60 81       	ld	r22, Z
    2ce6:	71 81       	ldd	r23, Z+1	; 0x01
    2ce8:	82 81       	ldd	r24, Z+2	; 0x02
    2cea:	93 81       	ldd	r25, Z+3	; 0x03
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e2       	ldi	r20, 0x20	; 32
    2cf2:	51 e4       	ldi	r21, 0x41	; 65
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	8e 01       	movw	r16, r28
    2cfe:	07 5a       	subi	r16, 0xA7	; 167
    2d00:	1f 4f       	sbci	r17, 0xFF	; 255
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	f8 01       	movw	r30, r16
    2d10:	91 83       	std	Z+1, r25	; 0x01
    2d12:	80 83       	st	Z, r24
    2d14:	1f c0       	rjmp	.+62     	; 0x2d54 <start_monitor+0x468>
    2d16:	fe 01       	movw	r30, r28
    2d18:	e9 5a       	subi	r30, 0xA9	; 169
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	88 ec       	ldi	r24, 0xC8	; 200
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
    2d24:	fe 01       	movw	r30, r28
    2d26:	e9 5a       	subi	r30, 0xA9	; 169
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 81       	ld	r24, Z
    2d2c:	91 81       	ldd	r25, Z+1	; 0x01
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	f1 f7       	brne	.-4      	; 0x2d2e <start_monitor+0x442>
    2d32:	fe 01       	movw	r30, r28
    2d34:	e9 5a       	subi	r30, 0xA9	; 169
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	91 83       	std	Z+1, r25	; 0x01
    2d3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3c:	de 01       	movw	r26, r28
    2d3e:	a7 5a       	subi	r26, 0xA7	; 167
    2d40:	bf 4f       	sbci	r27, 0xFF	; 255
    2d42:	fe 01       	movw	r30, r28
    2d44:	e7 5a       	subi	r30, 0xA7	; 167
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	91 81       	ldd	r25, Z+1	; 0x01
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	11 96       	adiw	r26, 0x01	; 1
    2d50:	9c 93       	st	X, r25
    2d52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d54:	fe 01       	movw	r30, r28
    2d56:	e7 5a       	subi	r30, 0xA7	; 167
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 81       	ld	r24, Z
    2d5c:	91 81       	ldd	r25, Z+1	; 0x01
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	d1 f6       	brne	.-76     	; 0x2d16 <start_monitor+0x42a>
    2d62:	27 c0       	rjmp	.+78     	; 0x2db2 <start_monitor+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d64:	8e 01       	movw	r16, r28
    2d66:	07 5a       	subi	r16, 0xA7	; 167
    2d68:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e5 5a       	subi	r30, 0xA5	; 165
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	60 81       	ld	r22, Z
    2d72:	71 81       	ldd	r23, Z+1	; 0x01
    2d74:	82 81       	ldd	r24, Z+2	; 0x02
    2d76:	93 81       	ldd	r25, Z+3	; 0x03
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	f8 01       	movw	r30, r16
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	80 83       	st	Z, r24
    2d86:	de 01       	movw	r26, r28
    2d88:	ab 5a       	subi	r26, 0xAB	; 171
    2d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e7 5a       	subi	r30, 0xA7	; 167
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	8d 93       	st	X+, r24
    2d98:	9c 93       	st	X, r25
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	eb 5a       	subi	r30, 0xAB	; 171
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	91 81       	ldd	r25, Z+1	; 0x01
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <start_monitor+0x4b8>
    2da8:	fe 01       	movw	r30, r28
    2daa:	eb 5a       	subi	r30, 0xAB	; 171
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
        _delay_ms(10);

        // combine both window states into one byte
        uint8 window_states = (g_win2_status << 1) | g_win1_status;
    2db2:	80 91 7c 01 	lds	r24, 0x017C
    2db6:	88 2f       	mov	r24, r24
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	98 2f       	mov	r25, r24
    2dc0:	80 91 7b 01 	lds	r24, 0x017B
    2dc4:	89 2b       	or	r24, r25
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e1 58       	subi	r30, 0x81	; 129
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 83       	st	Z, r24
        UART_sendByte(window_states);
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e1 58       	subi	r30, 0x81	; 129
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
    2dda:	fe 01       	movw	r30, r28
    2ddc:	ef 5a       	subi	r30, 0xAF	; 175
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	a0 e2       	ldi	r26, 0x20	; 32
    2de6:	b1 e4       	ldi	r27, 0x41	; 65
    2de8:	80 83       	st	Z, r24
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	a2 83       	std	Z+2, r26	; 0x02
    2dee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df0:	8e 01       	movw	r16, r28
    2df2:	03 5b       	subi	r16, 0xB3	; 179
    2df4:	1f 4f       	sbci	r17, 0xFF	; 255
    2df6:	fe 01       	movw	r30, r28
    2df8:	ef 5a       	subi	r30, 0xAF	; 175
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	60 81       	ld	r22, Z
    2dfe:	71 81       	ldd	r23, Z+1	; 0x01
    2e00:	82 81       	ldd	r24, Z+2	; 0x02
    2e02:	93 81       	ldd	r25, Z+3	; 0x03
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	4a ef       	ldi	r20, 0xFA	; 250
    2e0a:	54 e4       	ldi	r21, 0x44	; 68
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	f8 01       	movw	r30, r16
    2e16:	80 83       	st	Z, r24
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	a2 83       	std	Z+2, r26	; 0x02
    2e1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e3 5b       	subi	r30, 0xB3	; 179
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e8       	ldi	r20, 0x80	; 128
    2e32:	5f e3       	ldi	r21, 0x3F	; 63
    2e34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e38:	88 23       	and	r24, r24
    2e3a:	44 f4       	brge	.+16     	; 0x2e4c <start_monitor+0x560>
		__ticks = 1;
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e5 5b       	subi	r30, 0xB5	; 181
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	91 83       	std	Z+1, r25	; 0x01
    2e48:	80 83       	st	Z, r24
    2e4a:	64 c0       	rjmp	.+200    	; 0x2f14 <start_monitor+0x628>
	else if (__tmp > 65535)
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e3 5b       	subi	r30, 0xB3	; 179
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	60 81       	ld	r22, Z
    2e54:	71 81       	ldd	r23, Z+1	; 0x01
    2e56:	82 81       	ldd	r24, Z+2	; 0x02
    2e58:	93 81       	ldd	r25, Z+3	; 0x03
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	3f ef       	ldi	r19, 0xFF	; 255
    2e5e:	4f e7       	ldi	r20, 0x7F	; 127
    2e60:	57 e4       	ldi	r21, 0x47	; 71
    2e62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e66:	18 16       	cp	r1, r24
    2e68:	0c f0       	brlt	.+2      	; 0x2e6c <start_monitor+0x580>
    2e6a:	43 c0       	rjmp	.+134    	; 0x2ef2 <start_monitor+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	ef 5a       	subi	r30, 0xAF	; 175
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	60 81       	ld	r22, Z
    2e74:	71 81       	ldd	r23, Z+1	; 0x01
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e2       	ldi	r20, 0x20	; 32
    2e80:	51 e4       	ldi	r21, 0x41	; 65
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	8e 01       	movw	r16, r28
    2e8c:	05 5b       	subi	r16, 0xB5	; 181
    2e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	91 83       	std	Z+1, r25	; 0x01
    2ea0:	80 83       	st	Z, r24
    2ea2:	1f c0       	rjmp	.+62     	; 0x2ee2 <start_monitor+0x5f6>
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	e7 5b       	subi	r30, 0xB7	; 183
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	88 ec       	ldi	r24, 0xC8	; 200
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	91 83       	std	Z+1, r25	; 0x01
    2eb0:	80 83       	st	Z, r24
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e7 5b       	subi	r30, 0xB7	; 183
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <start_monitor+0x5d0>
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e7 5b       	subi	r30, 0xB7	; 183
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	91 83       	std	Z+1, r25	; 0x01
    2ec8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eca:	de 01       	movw	r26, r28
    2ecc:	a5 5b       	subi	r26, 0xB5	; 181
    2ece:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	e5 5b       	subi	r30, 0xB5	; 181
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 81       	ld	r24, Z
    2ed8:	91 81       	ldd	r25, Z+1	; 0x01
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	11 96       	adiw	r26, 0x01	; 1
    2ede:	9c 93       	st	X, r25
    2ee0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e5 5b       	subi	r30, 0xB5	; 181
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	d1 f6       	brne	.-76     	; 0x2ea4 <start_monitor+0x5b8>
    2ef0:	28 c0       	rjmp	.+80     	; 0x2f42 <start_monitor+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef2:	8e 01       	movw	r16, r28
    2ef4:	05 5b       	subi	r16, 0xB5	; 181
    2ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef8:	fe 01       	movw	r30, r28
    2efa:	e3 5b       	subi	r30, 0xB3	; 179
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	60 81       	ld	r22, Z
    2f00:	71 81       	ldd	r23, Z+1	; 0x01
    2f02:	82 81       	ldd	r24, Z+2	; 0x02
    2f04:	93 81       	ldd	r25, Z+3	; 0x03
    2f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	f8 01       	movw	r30, r16
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	80 83       	st	Z, r24
    2f14:	de 01       	movw	r26, r28
    2f16:	a9 5b       	subi	r26, 0xB9	; 185
    2f18:	bf 4f       	sbci	r27, 0xFF	; 255
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e5 5b       	subi	r30, 0xB5	; 181
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	80 81       	ld	r24, Z
    2f22:	91 81       	ldd	r25, Z+1	; 0x01
    2f24:	11 96       	adiw	r26, 0x01	; 1
    2f26:	9c 93       	st	X, r25
    2f28:	8e 93       	st	-X, r24
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e9 5b       	subi	r30, 0xB9	; 185
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <start_monitor+0x648>
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e9 5b       	subi	r30, 0xB9	; 185
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	80 83       	st	Z, r24
        _delay_ms(10);

        // --- Fault check section ---
        if(distance < ALLOWABLE_DISTANCE && !fault_distance_logged)
    2f42:	fe 01       	movw	r30, r28
    2f44:	ed 57       	subi	r30, 0x7D	; 125
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	8a 30       	cpi	r24, 0x0A	; 10
    2f4e:	91 05       	cpc	r25, r1
    2f50:	08 f0       	brcs	.+2      	; 0x2f54 <start_monitor+0x668>
    2f52:	97 c0       	rjmp	.+302    	; 0x3082 <start_monitor+0x796>
    2f54:	fe 01       	movw	r30, r28
    2f56:	ee 57       	subi	r30, 0x7E	; 126
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	80 81       	ld	r24, Z
    2f5c:	88 23       	and	r24, r24
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <start_monitor+0x676>
    2f60:	90 c0       	rjmp	.+288    	; 0x3082 <start_monitor+0x796>
        {
            EEPROM_writeByte(0x0000, 12);  // log distance fault (P001)
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	6c e0       	ldi	r22, 0x0C	; 12
    2f68:	0e 94 2a 10 	call	0x2054	; 0x2054 <EEPROM_writeByte>
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	ed 5b       	subi	r30, 0xBD	; 189
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	a0 e2       	ldi	r26, 0x20	; 32
    2f78:	b1 e4       	ldi	r27, 0x41	; 65
    2f7a:	80 83       	st	Z, r24
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	a2 83       	std	Z+2, r26	; 0x02
    2f80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f82:	8e 01       	movw	r16, r28
    2f84:	01 5c       	subi	r16, 0xC1	; 193
    2f86:	1f 4f       	sbci	r17, 0xFF	; 255
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ed 5b       	subi	r30, 0xBD	; 189
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	60 81       	ld	r22, Z
    2f90:	71 81       	ldd	r23, Z+1	; 0x01
    2f92:	82 81       	ldd	r24, Z+2	; 0x02
    2f94:	93 81       	ldd	r25, Z+3	; 0x03
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	4a ef       	ldi	r20, 0xFA	; 250
    2f9c:	54 e4       	ldi	r21, 0x44	; 68
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	f8 01       	movw	r30, r16
    2fa8:	80 83       	st	Z, r24
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	a2 83       	std	Z+2, r26	; 0x02
    2fae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	ff 96       	adiw	r30, 0x3f	; 63
    2fb4:	60 81       	ld	r22, Z
    2fb6:	71 81       	ldd	r23, Z+1	; 0x01
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e8       	ldi	r20, 0x80	; 128
    2fc2:	5f e3       	ldi	r21, 0x3F	; 63
    2fc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc8:	88 23       	and	r24, r24
    2fca:	2c f4       	brge	.+10     	; 0x2fd6 <start_monitor+0x6ea>
		__ticks = 1;
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	9e af       	std	Y+62, r25	; 0x3e
    2fd2:	8d af       	std	Y+61, r24	; 0x3d
    2fd4:	46 c0       	rjmp	.+140    	; 0x3062 <start_monitor+0x776>
	else if (__tmp > 65535)
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	ff 96       	adiw	r30, 0x3f	; 63
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	64 f5       	brge	.+88     	; 0x304a <start_monitor+0x75e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	ed 5b       	subi	r30, 0xBD	; 189
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	60 81       	ld	r22, Z
    2ffa:	71 81       	ldd	r23, Z+1	; 0x01
    2ffc:	82 81       	ldd	r24, Z+2	; 0x02
    2ffe:	93 81       	ldd	r25, Z+3	; 0x03
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e2       	ldi	r20, 0x20	; 32
    3006:	51 e4       	ldi	r21, 0x41	; 65
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9e af       	std	Y+62, r25	; 0x3e
    301e:	8d af       	std	Y+61, r24	; 0x3d
    3020:	0f c0       	rjmp	.+30     	; 0x3040 <start_monitor+0x754>
    3022:	88 ec       	ldi	r24, 0xC8	; 200
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	9c af       	std	Y+60, r25	; 0x3c
    3028:	8b af       	std	Y+59, r24	; 0x3b
    302a:	8b ad       	ldd	r24, Y+59	; 0x3b
    302c:	9c ad       	ldd	r25, Y+60	; 0x3c
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <start_monitor+0x742>
    3032:	9c af       	std	Y+60, r25	; 0x3c
    3034:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3036:	8d ad       	ldd	r24, Y+61	; 0x3d
    3038:	9e ad       	ldd	r25, Y+62	; 0x3e
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	9e af       	std	Y+62, r25	; 0x3e
    303e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3040:	8d ad       	ldd	r24, Y+61	; 0x3d
    3042:	9e ad       	ldd	r25, Y+62	; 0x3e
    3044:	00 97       	sbiw	r24, 0x00	; 0
    3046:	69 f7       	brne	.-38     	; 0x3022 <start_monitor+0x736>
    3048:	16 c0       	rjmp	.+44     	; 0x3076 <start_monitor+0x78a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304a:	fe 01       	movw	r30, r28
    304c:	ff 96       	adiw	r30, 0x3f	; 63
    304e:	60 81       	ld	r22, Z
    3050:	71 81       	ldd	r23, Z+1	; 0x01
    3052:	82 81       	ldd	r24, Z+2	; 0x02
    3054:	93 81       	ldd	r25, Z+3	; 0x03
    3056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	9e af       	std	Y+62, r25	; 0x3e
    3060:	8d af       	std	Y+61, r24	; 0x3d
    3062:	8d ad       	ldd	r24, Y+61	; 0x3d
    3064:	9e ad       	ldd	r25, Y+62	; 0x3e
    3066:	9a af       	std	Y+58, r25	; 0x3a
    3068:	89 af       	std	Y+57, r24	; 0x39
    306a:	89 ad       	ldd	r24, Y+57	; 0x39
    306c:	9a ad       	ldd	r25, Y+58	; 0x3a
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <start_monitor+0x782>
    3072:	9a af       	std	Y+58, r25	; 0x3a
    3074:	89 af       	std	Y+57, r24	; 0x39
            _delay_ms(10);
            fault_distance_logged = 1;
    3076:	fe 01       	movw	r30, r28
    3078:	ee 57       	subi	r30, 0x7E	; 126
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	80 83       	st	Z, r24
    3080:	84 c0       	rjmp	.+264    	; 0x318a <start_monitor+0x89e>
        }
        else if(distance >= ALLOWABLE_DISTANCE)
    3082:	fe 01       	movw	r30, r28
    3084:	ed 57       	subi	r30, 0x7D	; 125
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	8a 30       	cpi	r24, 0x0A	; 10
    308e:	91 05       	cpc	r25, r1
    3090:	08 f4       	brcc	.+2      	; 0x3094 <start_monitor+0x7a8>
    3092:	7b c0       	rjmp	.+246    	; 0x318a <start_monitor+0x89e>
        {
            EEPROM_writeByte(0x0000, 14);  // no fault
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	6e e0       	ldi	r22, 0x0E	; 14
    309a:	0e 94 2a 10 	call	0x2054	; 0x2054 <EEPROM_writeByte>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	a0 e2       	ldi	r26, 0x20	; 32
    30a4:	b1 e4       	ldi	r27, 0x41	; 65
    30a6:	8d ab       	std	Y+53, r24	; 0x35
    30a8:	9e ab       	std	Y+54, r25	; 0x36
    30aa:	af ab       	std	Y+55, r26	; 0x37
    30ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ae:	6d a9       	ldd	r22, Y+53	; 0x35
    30b0:	7e a9       	ldd	r23, Y+54	; 0x36
    30b2:	8f a9       	ldd	r24, Y+55	; 0x37
    30b4:	98 ad       	ldd	r25, Y+56	; 0x38
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	4a ef       	ldi	r20, 0xFA	; 250
    30bc:	54 e4       	ldi	r21, 0x44	; 68
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	89 ab       	std	Y+49, r24	; 0x31
    30c8:	9a ab       	std	Y+50, r25	; 0x32
    30ca:	ab ab       	std	Y+51, r26	; 0x33
    30cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30ce:	69 a9       	ldd	r22, Y+49	; 0x31
    30d0:	7a a9       	ldd	r23, Y+50	; 0x32
    30d2:	8b a9       	ldd	r24, Y+51	; 0x33
    30d4:	9c a9       	ldd	r25, Y+52	; 0x34
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e8       	ldi	r20, 0x80	; 128
    30dc:	5f e3       	ldi	r21, 0x3F	; 63
    30de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e2:	88 23       	and	r24, r24
    30e4:	2c f4       	brge	.+10     	; 0x30f0 <start_monitor+0x804>
		__ticks = 1;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	98 ab       	std	Y+48, r25	; 0x30
    30ec:	8f a7       	std	Y+47, r24	; 0x2f
    30ee:	3f c0       	rjmp	.+126    	; 0x316e <start_monitor+0x882>
	else if (__tmp > 65535)
    30f0:	69 a9       	ldd	r22, Y+49	; 0x31
    30f2:	7a a9       	ldd	r23, Y+50	; 0x32
    30f4:	8b a9       	ldd	r24, Y+51	; 0x33
    30f6:	9c a9       	ldd	r25, Y+52	; 0x34
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	3f ef       	ldi	r19, 0xFF	; 255
    30fc:	4f e7       	ldi	r20, 0x7F	; 127
    30fe:	57 e4       	ldi	r21, 0x47	; 71
    3100:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3104:	18 16       	cp	r1, r24
    3106:	4c f5       	brge	.+82     	; 0x315a <start_monitor+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3108:	6d a9       	ldd	r22, Y+53	; 0x35
    310a:	7e a9       	ldd	r23, Y+54	; 0x36
    310c:	8f a9       	ldd	r24, Y+55	; 0x37
    310e:	98 ad       	ldd	r25, Y+56	; 0x38
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e2       	ldi	r20, 0x20	; 32
    3116:	51 e4       	ldi	r21, 0x41	; 65
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	bc 01       	movw	r22, r24
    3122:	cd 01       	movw	r24, r26
    3124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	98 ab       	std	Y+48, r25	; 0x30
    312e:	8f a7       	std	Y+47, r24	; 0x2f
    3130:	0f c0       	rjmp	.+30     	; 0x3150 <start_monitor+0x864>
    3132:	88 ec       	ldi	r24, 0xC8	; 200
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	9e a7       	std	Y+46, r25	; 0x2e
    3138:	8d a7       	std	Y+45, r24	; 0x2d
    313a:	8d a5       	ldd	r24, Y+45	; 0x2d
    313c:	9e a5       	ldd	r25, Y+46	; 0x2e
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	f1 f7       	brne	.-4      	; 0x313e <start_monitor+0x852>
    3142:	9e a7       	std	Y+46, r25	; 0x2e
    3144:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3146:	8f a5       	ldd	r24, Y+47	; 0x2f
    3148:	98 a9       	ldd	r25, Y+48	; 0x30
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	98 ab       	std	Y+48, r25	; 0x30
    314e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3150:	8f a5       	ldd	r24, Y+47	; 0x2f
    3152:	98 a9       	ldd	r25, Y+48	; 0x30
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	69 f7       	brne	.-38     	; 0x3132 <start_monitor+0x846>
    3158:	14 c0       	rjmp	.+40     	; 0x3182 <start_monitor+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315a:	69 a9       	ldd	r22, Y+49	; 0x31
    315c:	7a a9       	ldd	r23, Y+50	; 0x32
    315e:	8b a9       	ldd	r24, Y+51	; 0x33
    3160:	9c a9       	ldd	r25, Y+52	; 0x34
    3162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	98 ab       	std	Y+48, r25	; 0x30
    316c:	8f a7       	std	Y+47, r24	; 0x2f
    316e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3170:	98 a9       	ldd	r25, Y+48	; 0x30
    3172:	9c a7       	std	Y+44, r25	; 0x2c
    3174:	8b a7       	std	Y+43, r24	; 0x2b
    3176:	8b a5       	ldd	r24, Y+43	; 0x2b
    3178:	9c a5       	ldd	r25, Y+44	; 0x2c
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <start_monitor+0x88e>
    317e:	9c a7       	std	Y+44, r25	; 0x2c
    3180:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(10);
            fault_distance_logged = 0;
    3182:	fe 01       	movw	r30, r28
    3184:	ee 57       	subi	r30, 0x7E	; 126
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	10 82       	st	Z, r1
        }

        if(temp > MAX_TEMP && !fault_temp_logged)
    318a:	fe 01       	movw	r30, r28
    318c:	eb 57       	subi	r30, 0x7B	; 123
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	80 81       	ld	r24, Z
    3192:	8b 35       	cpi	r24, 0x5B	; 91
    3194:	08 f4       	brcc	.+2      	; 0x3198 <start_monitor+0x8ac>
    3196:	84 c0       	rjmp	.+264    	; 0x32a0 <start_monitor+0x9b4>
    3198:	fe 01       	movw	r30, r28
    319a:	ef 57       	subi	r30, 0x7F	; 127
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 81       	ld	r24, Z
    31a0:	88 23       	and	r24, r24
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <start_monitor+0x8ba>
    31a4:	7d c0       	rjmp	.+250    	; 0x32a0 <start_monitor+0x9b4>
        {
            EEPROM_writeByte(0x0001, 13);  // log temp fault (P002)
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	6d e0       	ldi	r22, 0x0D	; 13
    31ac:	0e 94 2a 10 	call	0x2054	; 0x2054 <EEPROM_writeByte>
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	a0 e2       	ldi	r26, 0x20	; 32
    31b6:	b1 e4       	ldi	r27, 0x41	; 65
    31b8:	8f a3       	std	Y+39, r24	; 0x27
    31ba:	98 a7       	std	Y+40, r25	; 0x28
    31bc:	a9 a7       	std	Y+41, r26	; 0x29
    31be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c0:	6f a1       	ldd	r22, Y+39	; 0x27
    31c2:	78 a5       	ldd	r23, Y+40	; 0x28
    31c4:	89 a5       	ldd	r24, Y+41	; 0x29
    31c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	4a ef       	ldi	r20, 0xFA	; 250
    31ce:	54 e4       	ldi	r21, 0x44	; 68
    31d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	8b a3       	std	Y+35, r24	; 0x23
    31da:	9c a3       	std	Y+36, r25	; 0x24
    31dc:	ad a3       	std	Y+37, r26	; 0x25
    31de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31e0:	6b a1       	ldd	r22, Y+35	; 0x23
    31e2:	7c a1       	ldd	r23, Y+36	; 0x24
    31e4:	8d a1       	ldd	r24, Y+37	; 0x25
    31e6:	9e a1       	ldd	r25, Y+38	; 0x26
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e8       	ldi	r20, 0x80	; 128
    31ee:	5f e3       	ldi	r21, 0x3F	; 63
    31f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f4:	88 23       	and	r24, r24
    31f6:	2c f4       	brge	.+10     	; 0x3202 <start_monitor+0x916>
		__ticks = 1;
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	9a a3       	std	Y+34, r25	; 0x22
    31fe:	89 a3       	std	Y+33, r24	; 0x21
    3200:	3f c0       	rjmp	.+126    	; 0x3280 <start_monitor+0x994>
	else if (__tmp > 65535)
    3202:	6b a1       	ldd	r22, Y+35	; 0x23
    3204:	7c a1       	ldd	r23, Y+36	; 0x24
    3206:	8d a1       	ldd	r24, Y+37	; 0x25
    3208:	9e a1       	ldd	r25, Y+38	; 0x26
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	3f ef       	ldi	r19, 0xFF	; 255
    320e:	4f e7       	ldi	r20, 0x7F	; 127
    3210:	57 e4       	ldi	r21, 0x47	; 71
    3212:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3216:	18 16       	cp	r1, r24
    3218:	4c f5       	brge	.+82     	; 0x326c <start_monitor+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321a:	6f a1       	ldd	r22, Y+39	; 0x27
    321c:	78 a5       	ldd	r23, Y+40	; 0x28
    321e:	89 a5       	ldd	r24, Y+41	; 0x29
    3220:	9a a5       	ldd	r25, Y+42	; 0x2a
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e2       	ldi	r20, 0x20	; 32
    3228:	51 e4       	ldi	r21, 0x41	; 65
    322a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	bc 01       	movw	r22, r24
    3234:	cd 01       	movw	r24, r26
    3236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	9a a3       	std	Y+34, r25	; 0x22
    3240:	89 a3       	std	Y+33, r24	; 0x21
    3242:	0f c0       	rjmp	.+30     	; 0x3262 <start_monitor+0x976>
    3244:	88 ec       	ldi	r24, 0xC8	; 200
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	98 a3       	std	Y+32, r25	; 0x20
    324a:	8f 8f       	std	Y+31, r24	; 0x1f
    324c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    324e:	98 a1       	ldd	r25, Y+32	; 0x20
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	f1 f7       	brne	.-4      	; 0x3250 <start_monitor+0x964>
    3254:	98 a3       	std	Y+32, r25	; 0x20
    3256:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3258:	89 a1       	ldd	r24, Y+33	; 0x21
    325a:	9a a1       	ldd	r25, Y+34	; 0x22
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	9a a3       	std	Y+34, r25	; 0x22
    3260:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3262:	89 a1       	ldd	r24, Y+33	; 0x21
    3264:	9a a1       	ldd	r25, Y+34	; 0x22
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	69 f7       	brne	.-38     	; 0x3244 <start_monitor+0x958>
    326a:	14 c0       	rjmp	.+40     	; 0x3294 <start_monitor+0x9a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326c:	6b a1       	ldd	r22, Y+35	; 0x23
    326e:	7c a1       	ldd	r23, Y+36	; 0x24
    3270:	8d a1       	ldd	r24, Y+37	; 0x25
    3272:	9e a1       	ldd	r25, Y+38	; 0x26
    3274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	9a a3       	std	Y+34, r25	; 0x22
    327e:	89 a3       	std	Y+33, r24	; 0x21
    3280:	89 a1       	ldd	r24, Y+33	; 0x21
    3282:	9a a1       	ldd	r25, Y+34	; 0x22
    3284:	9e 8f       	std	Y+30, r25	; 0x1e
    3286:	8d 8f       	std	Y+29, r24	; 0x1d
    3288:	8d 8d       	ldd	r24, Y+29	; 0x1d
    328a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <start_monitor+0x9a0>
    3290:	9e 8f       	std	Y+30, r25	; 0x1e
    3292:	8d 8f       	std	Y+29, r24	; 0x1d
            _delay_ms(10);
            fault_temp_logged = 1;
    3294:	fe 01       	movw	r30, r28
    3296:	ef 57       	subi	r30, 0x7F	; 127
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	80 83       	st	Z, r24
    329e:	82 c0       	rjmp	.+260    	; 0x33a4 <start_monitor+0xab8>
        }
        else if(temp <= MAX_TEMP)
    32a0:	fe 01       	movw	r30, r28
    32a2:	eb 57       	subi	r30, 0x7B	; 123
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 81       	ld	r24, Z
    32a8:	8b 35       	cpi	r24, 0x5B	; 91
    32aa:	08 f0       	brcs	.+2      	; 0x32ae <start_monitor+0x9c2>
    32ac:	7b c0       	rjmp	.+246    	; 0x33a4 <start_monitor+0xab8>
        {
            EEPROM_writeByte(0x0001, 15);  // no fault
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	6f e0       	ldi	r22, 0x0F	; 15
    32b4:	0e 94 2a 10 	call	0x2054	; 0x2054 <EEPROM_writeByte>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	a0 e2       	ldi	r26, 0x20	; 32
    32be:	b1 e4       	ldi	r27, 0x41	; 65
    32c0:	89 8f       	std	Y+25, r24	; 0x19
    32c2:	9a 8f       	std	Y+26, r25	; 0x1a
    32c4:	ab 8f       	std	Y+27, r26	; 0x1b
    32c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c8:	69 8d       	ldd	r22, Y+25	; 0x19
    32ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	4a ef       	ldi	r20, 0xFA	; 250
    32d6:	54 e4       	ldi	r21, 0x44	; 68
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	8d 8b       	std	Y+21, r24	; 0x15
    32e2:	9e 8b       	std	Y+22, r25	; 0x16
    32e4:	af 8b       	std	Y+23, r26	; 0x17
    32e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32e8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ea:	7e 89       	ldd	r23, Y+22	; 0x16
    32ec:	8f 89       	ldd	r24, Y+23	; 0x17
    32ee:	98 8d       	ldd	r25, Y+24	; 0x18
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e8       	ldi	r20, 0x80	; 128
    32f6:	5f e3       	ldi	r21, 0x3F	; 63
    32f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32fc:	88 23       	and	r24, r24
    32fe:	2c f4       	brge	.+10     	; 0x330a <start_monitor+0xa1e>
		__ticks = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	9c 8b       	std	Y+20, r25	; 0x14
    3306:	8b 8b       	std	Y+19, r24	; 0x13
    3308:	3f c0       	rjmp	.+126    	; 0x3388 <start_monitor+0xa9c>
	else if (__tmp > 65535)
    330a:	6d 89       	ldd	r22, Y+21	; 0x15
    330c:	7e 89       	ldd	r23, Y+22	; 0x16
    330e:	8f 89       	ldd	r24, Y+23	; 0x17
    3310:	98 8d       	ldd	r25, Y+24	; 0x18
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	3f ef       	ldi	r19, 0xFF	; 255
    3316:	4f e7       	ldi	r20, 0x7F	; 127
    3318:	57 e4       	ldi	r21, 0x47	; 71
    331a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331e:	18 16       	cp	r1, r24
    3320:	4c f5       	brge	.+82     	; 0x3374 <start_monitor+0xa88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3322:	69 8d       	ldd	r22, Y+25	; 0x19
    3324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e2       	ldi	r20, 0x20	; 32
    3330:	51 e4       	ldi	r21, 0x41	; 65
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	9c 8b       	std	Y+20, r25	; 0x14
    3348:	8b 8b       	std	Y+19, r24	; 0x13
    334a:	0f c0       	rjmp	.+30     	; 0x336a <start_monitor+0xa7e>
    334c:	88 ec       	ldi	r24, 0xC8	; 200
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	9a 8b       	std	Y+18, r25	; 0x12
    3352:	89 8b       	std	Y+17, r24	; 0x11
    3354:	89 89       	ldd	r24, Y+17	; 0x11
    3356:	9a 89       	ldd	r25, Y+18	; 0x12
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <start_monitor+0xa6c>
    335c:	9a 8b       	std	Y+18, r25	; 0x12
    335e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3360:	8b 89       	ldd	r24, Y+19	; 0x13
    3362:	9c 89       	ldd	r25, Y+20	; 0x14
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	9c 8b       	std	Y+20, r25	; 0x14
    3368:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336a:	8b 89       	ldd	r24, Y+19	; 0x13
    336c:	9c 89       	ldd	r25, Y+20	; 0x14
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	69 f7       	brne	.-38     	; 0x334c <start_monitor+0xa60>
    3372:	14 c0       	rjmp	.+40     	; 0x339c <start_monitor+0xab0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3374:	6d 89       	ldd	r22, Y+21	; 0x15
    3376:	7e 89       	ldd	r23, Y+22	; 0x16
    3378:	8f 89       	ldd	r24, Y+23	; 0x17
    337a:	98 8d       	ldd	r25, Y+24	; 0x18
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9c 8b       	std	Y+20, r25	; 0x14
    3386:	8b 8b       	std	Y+19, r24	; 0x13
    3388:	8b 89       	ldd	r24, Y+19	; 0x13
    338a:	9c 89       	ldd	r25, Y+20	; 0x14
    338c:	98 8b       	std	Y+16, r25	; 0x10
    338e:	8f 87       	std	Y+15, r24	; 0x0f
    3390:	8f 85       	ldd	r24, Y+15	; 0x0f
    3392:	98 89       	ldd	r25, Y+16	; 0x10
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	f1 f7       	brne	.-4      	; 0x3394 <start_monitor+0xaa8>
    3398:	98 8b       	std	Y+16, r25	; 0x10
    339a:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(10);
            fault_temp_logged = 0;
    339c:	fe 01       	movw	r30, r28
    339e:	ef 57       	subi	r30, 0x7F	; 127
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	10 82       	st	Z, r1
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	a1 e6       	ldi	r26, 0x61	; 97
    33aa:	b4 e4       	ldi	r27, 0x44	; 68
    33ac:	8b 87       	std	Y+11, r24	; 0x0b
    33ae:	9c 87       	std	Y+12, r25	; 0x0c
    33b0:	ad 87       	std	Y+13, r26	; 0x0d
    33b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	4a ef       	ldi	r20, 0xFA	; 250
    33c2:	54 e4       	ldi	r21, 0x44	; 68
    33c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	8f 83       	std	Y+7, r24	; 0x07
    33ce:	98 87       	std	Y+8, r25	; 0x08
    33d0:	a9 87       	std	Y+9, r26	; 0x09
    33d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d4:	6f 81       	ldd	r22, Y+7	; 0x07
    33d6:	78 85       	ldd	r23, Y+8	; 0x08
    33d8:	89 85       	ldd	r24, Y+9	; 0x09
    33da:	9a 85       	ldd	r25, Y+10	; 0x0a
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e8       	ldi	r20, 0x80	; 128
    33e2:	5f e3       	ldi	r21, 0x3F	; 63
    33e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33e8:	88 23       	and	r24, r24
    33ea:	2c f4       	brge	.+10     	; 0x33f6 <start_monitor+0xb0a>
		__ticks = 1;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9e 83       	std	Y+6, r25	; 0x06
    33f2:	8d 83       	std	Y+5, r24	; 0x05
    33f4:	3f c0       	rjmp	.+126    	; 0x3474 <start_monitor+0xb88>
	else if (__tmp > 65535)
    33f6:	6f 81       	ldd	r22, Y+7	; 0x07
    33f8:	78 85       	ldd	r23, Y+8	; 0x08
    33fa:	89 85       	ldd	r24, Y+9	; 0x09
    33fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	3f ef       	ldi	r19, 0xFF	; 255
    3402:	4f e7       	ldi	r20, 0x7F	; 127
    3404:	57 e4       	ldi	r21, 0x47	; 71
    3406:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    340a:	18 16       	cp	r1, r24
    340c:	4c f5       	brge	.+82     	; 0x3460 <start_monitor+0xb74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3410:	7c 85       	ldd	r23, Y+12	; 0x0c
    3412:	8d 85       	ldd	r24, Y+13	; 0x0d
    3414:	9e 85       	ldd	r25, Y+14	; 0x0e
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e2       	ldi	r20, 0x20	; 32
    341c:	51 e4       	ldi	r21, 0x41	; 65
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9e 83       	std	Y+6, r25	; 0x06
    3434:	8d 83       	std	Y+5, r24	; 0x05
    3436:	0f c0       	rjmp	.+30     	; 0x3456 <start_monitor+0xb6a>
    3438:	88 ec       	ldi	r24, 0xC8	; 200
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9c 83       	std	Y+4, r25	; 0x04
    343e:	8b 83       	std	Y+3, r24	; 0x03
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	9c 81       	ldd	r25, Y+4	; 0x04
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <start_monitor+0xb58>
    3448:	9c 83       	std	Y+4, r25	; 0x04
    344a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	9e 81       	ldd	r25, Y+6	; 0x06
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	00 97       	sbiw	r24, 0x00	; 0
    345c:	69 f7       	brne	.-38     	; 0x3438 <start_monitor+0xb4c>
    345e:	14 c0       	rjmp	.+40     	; 0x3488 <start_monitor+0xb9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3460:	6f 81       	ldd	r22, Y+7	; 0x07
    3462:	78 85       	ldd	r23, Y+8	; 0x08
    3464:	89 85       	ldd	r24, Y+9	; 0x09
    3466:	9a 85       	ldd	r25, Y+10	; 0x0a
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	9a 83       	std	Y+2, r25	; 0x02
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <start_monitor+0xb94>
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	89 83       	std	Y+1, r24	; 0x01
    uint8 fault_distance_logged = 0;
    uint8 fault_temp_logged = 0;

    g_monitoring_active = 1; // mark system as active

    for(uint8 i = 0; i < 10; i++) // loop for 10 readings
    3488:	de 01       	movw	r26, r28
    348a:	a0 58       	subi	r26, 0x80	; 128
    348c:	bf 4f       	sbci	r27, 0xFF	; 255
    348e:	fe 01       	movw	r30, r28
    3490:	e0 58       	subi	r30, 0x80	; 128
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	80 81       	ld	r24, Z
    3496:	8f 5f       	subi	r24, 0xFF	; 255
    3498:	8c 93       	st	X, r24
    349a:	fe 01       	movw	r30, r28
    349c:	e0 58       	subi	r30, 0x80	; 128
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	80 81       	ld	r24, Z
    34a2:	8a 30       	cpi	r24, 0x0A	; 10
    34a4:	08 f4       	brcc	.+2      	; 0x34a8 <start_monitor+0xbbc>
    34a6:	48 ca       	rjmp	.-2928   	; 0x2938 <start_monitor+0x4c>
            fault_temp_logged = 0;
        }

        _delay_ms(900);  // wait around 1 second between cycles
    }
}
    34a8:	cb 57       	subi	r28, 0x7B	; 123
    34aa:	df 4f       	sbci	r29, 0xFF	; 255
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	cf 91       	pop	r28
    34b8:	df 91       	pop	r29
    34ba:	1f 91       	pop	r17
    34bc:	0f 91       	pop	r16
    34be:	08 95       	ret

000034c0 <display_val>:

void display_val(void)
{
    34c0:	df 93       	push	r29
    34c2:	cf 93       	push	r28
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	ec 97       	sbiw	r28, 0x3c	; 60
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    uint8 temp = LM35_getTemperature();
    34d4:	0e 94 cb 10 	call	0x2196	; 0x2196 <LM35_getTemperature>
    34d8:	8c af       	std	Y+60, r24	; 0x3c
    uint16 distance = Ultrasonic_readDistance();
    34da:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <Ultrasonic_readDistance>
    34de:	9b af       	std	Y+59, r25	; 0x3b
    34e0:	8a af       	std	Y+58, r24	; 0x3a

    Control_Windows(); // still allow manual control
    34e2:	0e 94 9f 11 	call	0x233e	; 0x233e <Control_Windows>

    // send latest readings
    UART_sendByte(temp);
    34e6:	8c ad       	ldd	r24, Y+60	; 0x3c
    34e8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	a0 e2       	ldi	r26, 0x20	; 32
    34f2:	b1 e4       	ldi	r27, 0x41	; 65
    34f4:	8d ab       	std	Y+53, r24	; 0x35
    34f6:	9e ab       	std	Y+54, r25	; 0x36
    34f8:	af ab       	std	Y+55, r26	; 0x37
    34fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fc:	6d a9       	ldd	r22, Y+53	; 0x35
    34fe:	7e a9       	ldd	r23, Y+54	; 0x36
    3500:	8f a9       	ldd	r24, Y+55	; 0x37
    3502:	98 ad       	ldd	r25, Y+56	; 0x38
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	4a ef       	ldi	r20, 0xFA	; 250
    350a:	54 e4       	ldi	r21, 0x44	; 68
    350c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	89 ab       	std	Y+49, r24	; 0x31
    3516:	9a ab       	std	Y+50, r25	; 0x32
    3518:	ab ab       	std	Y+51, r26	; 0x33
    351a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    351c:	69 a9       	ldd	r22, Y+49	; 0x31
    351e:	7a a9       	ldd	r23, Y+50	; 0x32
    3520:	8b a9       	ldd	r24, Y+51	; 0x33
    3522:	9c a9       	ldd	r25, Y+52	; 0x34
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e8       	ldi	r20, 0x80	; 128
    352a:	5f e3       	ldi	r21, 0x3F	; 63
    352c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3530:	88 23       	and	r24, r24
    3532:	2c f4       	brge	.+10     	; 0x353e <display_val+0x7e>
		__ticks = 1;
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	98 ab       	std	Y+48, r25	; 0x30
    353a:	8f a7       	std	Y+47, r24	; 0x2f
    353c:	3f c0       	rjmp	.+126    	; 0x35bc <display_val+0xfc>
	else if (__tmp > 65535)
    353e:	69 a9       	ldd	r22, Y+49	; 0x31
    3540:	7a a9       	ldd	r23, Y+50	; 0x32
    3542:	8b a9       	ldd	r24, Y+51	; 0x33
    3544:	9c a9       	ldd	r25, Y+52	; 0x34
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	4f e7       	ldi	r20, 0x7F	; 127
    354c:	57 e4       	ldi	r21, 0x47	; 71
    354e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3552:	18 16       	cp	r1, r24
    3554:	4c f5       	brge	.+82     	; 0x35a8 <display_val+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3556:	6d a9       	ldd	r22, Y+53	; 0x35
    3558:	7e a9       	ldd	r23, Y+54	; 0x36
    355a:	8f a9       	ldd	r24, Y+55	; 0x37
    355c:	98 ad       	ldd	r25, Y+56	; 0x38
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e2       	ldi	r20, 0x20	; 32
    3564:	51 e4       	ldi	r21, 0x41	; 65
    3566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	98 ab       	std	Y+48, r25	; 0x30
    357c:	8f a7       	std	Y+47, r24	; 0x2f
    357e:	0f c0       	rjmp	.+30     	; 0x359e <display_val+0xde>
    3580:	88 ec       	ldi	r24, 0xC8	; 200
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	9e a7       	std	Y+46, r25	; 0x2e
    3586:	8d a7       	std	Y+45, r24	; 0x2d
    3588:	8d a5       	ldd	r24, Y+45	; 0x2d
    358a:	9e a5       	ldd	r25, Y+46	; 0x2e
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	f1 f7       	brne	.-4      	; 0x358c <display_val+0xcc>
    3590:	9e a7       	std	Y+46, r25	; 0x2e
    3592:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3594:	8f a5       	ldd	r24, Y+47	; 0x2f
    3596:	98 a9       	ldd	r25, Y+48	; 0x30
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	98 ab       	std	Y+48, r25	; 0x30
    359c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359e:	8f a5       	ldd	r24, Y+47	; 0x2f
    35a0:	98 a9       	ldd	r25, Y+48	; 0x30
    35a2:	00 97       	sbiw	r24, 0x00	; 0
    35a4:	69 f7       	brne	.-38     	; 0x3580 <display_val+0xc0>
    35a6:	14 c0       	rjmp	.+40     	; 0x35d0 <display_val+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a8:	69 a9       	ldd	r22, Y+49	; 0x31
    35aa:	7a a9       	ldd	r23, Y+50	; 0x32
    35ac:	8b a9       	ldd	r24, Y+51	; 0x33
    35ae:	9c a9       	ldd	r25, Y+52	; 0x34
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	98 ab       	std	Y+48, r25	; 0x30
    35ba:	8f a7       	std	Y+47, r24	; 0x2f
    35bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    35be:	98 a9       	ldd	r25, Y+48	; 0x30
    35c0:	9c a7       	std	Y+44, r25	; 0x2c
    35c2:	8b a7       	std	Y+43, r24	; 0x2b
    35c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    35c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <display_val+0x108>
    35cc:	9c a7       	std	Y+44, r25	; 0x2c
    35ce:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
    UART_sendByte((uint8)(distance >> 8));
    35d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    35d2:	9b ad       	ldd	r25, Y+59	; 0x3b
    35d4:	89 2f       	mov	r24, r25
    35d6:	99 27       	eor	r25, r25
    35d8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	a0 e2       	ldi	r26, 0x20	; 32
    35e2:	b1 e4       	ldi	r27, 0x41	; 65
    35e4:	8f a3       	std	Y+39, r24	; 0x27
    35e6:	98 a7       	std	Y+40, r25	; 0x28
    35e8:	a9 a7       	std	Y+41, r26	; 0x29
    35ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ec:	6f a1       	ldd	r22, Y+39	; 0x27
    35ee:	78 a5       	ldd	r23, Y+40	; 0x28
    35f0:	89 a5       	ldd	r24, Y+41	; 0x29
    35f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	4a ef       	ldi	r20, 0xFA	; 250
    35fa:	54 e4       	ldi	r21, 0x44	; 68
    35fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	8b a3       	std	Y+35, r24	; 0x23
    3606:	9c a3       	std	Y+36, r25	; 0x24
    3608:	ad a3       	std	Y+37, r26	; 0x25
    360a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    360c:	6b a1       	ldd	r22, Y+35	; 0x23
    360e:	7c a1       	ldd	r23, Y+36	; 0x24
    3610:	8d a1       	ldd	r24, Y+37	; 0x25
    3612:	9e a1       	ldd	r25, Y+38	; 0x26
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3620:	88 23       	and	r24, r24
    3622:	2c f4       	brge	.+10     	; 0x362e <display_val+0x16e>
		__ticks = 1;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	9a a3       	std	Y+34, r25	; 0x22
    362a:	89 a3       	std	Y+33, r24	; 0x21
    362c:	3f c0       	rjmp	.+126    	; 0x36ac <display_val+0x1ec>
	else if (__tmp > 65535)
    362e:	6b a1       	ldd	r22, Y+35	; 0x23
    3630:	7c a1       	ldd	r23, Y+36	; 0x24
    3632:	8d a1       	ldd	r24, Y+37	; 0x25
    3634:	9e a1       	ldd	r25, Y+38	; 0x26
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	3f ef       	ldi	r19, 0xFF	; 255
    363a:	4f e7       	ldi	r20, 0x7F	; 127
    363c:	57 e4       	ldi	r21, 0x47	; 71
    363e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3642:	18 16       	cp	r1, r24
    3644:	4c f5       	brge	.+82     	; 0x3698 <display_val+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3646:	6f a1       	ldd	r22, Y+39	; 0x27
    3648:	78 a5       	ldd	r23, Y+40	; 0x28
    364a:	89 a5       	ldd	r24, Y+41	; 0x29
    364c:	9a a5       	ldd	r25, Y+42	; 0x2a
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e2       	ldi	r20, 0x20	; 32
    3654:	51 e4       	ldi	r21, 0x41	; 65
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	bc 01       	movw	r22, r24
    3660:	cd 01       	movw	r24, r26
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	9a a3       	std	Y+34, r25	; 0x22
    366c:	89 a3       	std	Y+33, r24	; 0x21
    366e:	0f c0       	rjmp	.+30     	; 0x368e <display_val+0x1ce>
    3670:	88 ec       	ldi	r24, 0xC8	; 200
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	98 a3       	std	Y+32, r25	; 0x20
    3676:	8f 8f       	std	Y+31, r24	; 0x1f
    3678:	8f 8d       	ldd	r24, Y+31	; 0x1f
    367a:	98 a1       	ldd	r25, Y+32	; 0x20
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	f1 f7       	brne	.-4      	; 0x367c <display_val+0x1bc>
    3680:	98 a3       	std	Y+32, r25	; 0x20
    3682:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3684:	89 a1       	ldd	r24, Y+33	; 0x21
    3686:	9a a1       	ldd	r25, Y+34	; 0x22
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	9a a3       	std	Y+34, r25	; 0x22
    368c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368e:	89 a1       	ldd	r24, Y+33	; 0x21
    3690:	9a a1       	ldd	r25, Y+34	; 0x22
    3692:	00 97       	sbiw	r24, 0x00	; 0
    3694:	69 f7       	brne	.-38     	; 0x3670 <display_val+0x1b0>
    3696:	14 c0       	rjmp	.+40     	; 0x36c0 <display_val+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3698:	6b a1       	ldd	r22, Y+35	; 0x23
    369a:	7c a1       	ldd	r23, Y+36	; 0x24
    369c:	8d a1       	ldd	r24, Y+37	; 0x25
    369e:	9e a1       	ldd	r25, Y+38	; 0x26
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	9a a3       	std	Y+34, r25	; 0x22
    36aa:	89 a3       	std	Y+33, r24	; 0x21
    36ac:	89 a1       	ldd	r24, Y+33	; 0x21
    36ae:	9a a1       	ldd	r25, Y+34	; 0x22
    36b0:	9e 8f       	std	Y+30, r25	; 0x1e
    36b2:	8d 8f       	std	Y+29, r24	; 0x1d
    36b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <display_val+0x1f8>
    36bc:	9e 8f       	std	Y+30, r25	; 0x1e
    36be:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
    UART_sendByte((uint8)distance);
    36c0:	8a ad       	ldd	r24, Y+58	; 0x3a
    36c2:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	a0 e2       	ldi	r26, 0x20	; 32
    36cc:	b1 e4       	ldi	r27, 0x41	; 65
    36ce:	89 8f       	std	Y+25, r24	; 0x19
    36d0:	9a 8f       	std	Y+26, r25	; 0x1a
    36d2:	ab 8f       	std	Y+27, r26	; 0x1b
    36d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d6:	69 8d       	ldd	r22, Y+25	; 0x19
    36d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	4a ef       	ldi	r20, 0xFA	; 250
    36e4:	54 e4       	ldi	r21, 0x44	; 68
    36e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	8d 8b       	std	Y+21, r24	; 0x15
    36f0:	9e 8b       	std	Y+22, r25	; 0x16
    36f2:	af 8b       	std	Y+23, r26	; 0x17
    36f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36f6:	6d 89       	ldd	r22, Y+21	; 0x15
    36f8:	7e 89       	ldd	r23, Y+22	; 0x16
    36fa:	8f 89       	ldd	r24, Y+23	; 0x17
    36fc:	98 8d       	ldd	r25, Y+24	; 0x18
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	40 e8       	ldi	r20, 0x80	; 128
    3704:	5f e3       	ldi	r21, 0x3F	; 63
    3706:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370a:	88 23       	and	r24, r24
    370c:	2c f4       	brge	.+10     	; 0x3718 <display_val+0x258>
		__ticks = 1;
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	9c 8b       	std	Y+20, r25	; 0x14
    3714:	8b 8b       	std	Y+19, r24	; 0x13
    3716:	3f c0       	rjmp	.+126    	; 0x3796 <display_val+0x2d6>
	else if (__tmp > 65535)
    3718:	6d 89       	ldd	r22, Y+21	; 0x15
    371a:	7e 89       	ldd	r23, Y+22	; 0x16
    371c:	8f 89       	ldd	r24, Y+23	; 0x17
    371e:	98 8d       	ldd	r25, Y+24	; 0x18
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	3f ef       	ldi	r19, 0xFF	; 255
    3724:	4f e7       	ldi	r20, 0x7F	; 127
    3726:	57 e4       	ldi	r21, 0x47	; 71
    3728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    372c:	18 16       	cp	r1, r24
    372e:	4c f5       	brge	.+82     	; 0x3782 <display_val+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3730:	69 8d       	ldd	r22, Y+25	; 0x19
    3732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	40 e2       	ldi	r20, 0x20	; 32
    373e:	51 e4       	ldi	r21, 0x41	; 65
    3740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	9c 8b       	std	Y+20, r25	; 0x14
    3756:	8b 8b       	std	Y+19, r24	; 0x13
    3758:	0f c0       	rjmp	.+30     	; 0x3778 <display_val+0x2b8>
    375a:	88 ec       	ldi	r24, 0xC8	; 200
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	9a 8b       	std	Y+18, r25	; 0x12
    3760:	89 8b       	std	Y+17, r24	; 0x11
    3762:	89 89       	ldd	r24, Y+17	; 0x11
    3764:	9a 89       	ldd	r25, Y+18	; 0x12
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <display_val+0x2a6>
    376a:	9a 8b       	std	Y+18, r25	; 0x12
    376c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376e:	8b 89       	ldd	r24, Y+19	; 0x13
    3770:	9c 89       	ldd	r25, Y+20	; 0x14
    3772:	01 97       	sbiw	r24, 0x01	; 1
    3774:	9c 8b       	std	Y+20, r25	; 0x14
    3776:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3778:	8b 89       	ldd	r24, Y+19	; 0x13
    377a:	9c 89       	ldd	r25, Y+20	; 0x14
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	69 f7       	brne	.-38     	; 0x375a <display_val+0x29a>
    3780:	14 c0       	rjmp	.+40     	; 0x37aa <display_val+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3782:	6d 89       	ldd	r22, Y+21	; 0x15
    3784:	7e 89       	ldd	r23, Y+22	; 0x16
    3786:	8f 89       	ldd	r24, Y+23	; 0x17
    3788:	98 8d       	ldd	r25, Y+24	; 0x18
    378a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	9c 8b       	std	Y+20, r25	; 0x14
    3794:	8b 8b       	std	Y+19, r24	; 0x13
    3796:	8b 89       	ldd	r24, Y+19	; 0x13
    3798:	9c 89       	ldd	r25, Y+20	; 0x14
    379a:	98 8b       	std	Y+16, r25	; 0x10
    379c:	8f 87       	std	Y+15, r24	; 0x0f
    379e:	8f 85       	ldd	r24, Y+15	; 0x0f
    37a0:	98 89       	ldd	r25, Y+16	; 0x10
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <display_val+0x2e2>
    37a6:	98 8b       	std	Y+16, r25	; 0x10
    37a8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);

    // pack window status and send
    uint8 window_states = (g_win2_status << 1) | g_win1_status;
    37aa:	80 91 7c 01 	lds	r24, 0x017C
    37ae:	88 2f       	mov	r24, r24
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	88 0f       	add	r24, r24
    37b4:	99 1f       	adc	r25, r25
    37b6:	98 2f       	mov	r25, r24
    37b8:	80 91 7b 01 	lds	r24, 0x017B
    37bc:	89 2b       	or	r24, r25
    37be:	89 af       	std	Y+57, r24	; 0x39
    UART_sendByte(window_states);
    37c0:	89 ad       	ldd	r24, Y+57	; 0x39
    37c2:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a0 e2       	ldi	r26, 0x20	; 32
    37cc:	b1 e4       	ldi	r27, 0x41	; 65
    37ce:	8b 87       	std	Y+11, r24	; 0x0b
    37d0:	9c 87       	std	Y+12, r25	; 0x0c
    37d2:	ad 87       	std	Y+13, r26	; 0x0d
    37d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37da:	8d 85       	ldd	r24, Y+13	; 0x0d
    37dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a ef       	ldi	r20, 0xFA	; 250
    37e4:	54 e4       	ldi	r21, 0x44	; 68
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	8f 83       	std	Y+7, r24	; 0x07
    37f0:	98 87       	std	Y+8, r25	; 0x08
    37f2:	a9 87       	std	Y+9, r26	; 0x09
    37f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37f6:	6f 81       	ldd	r22, Y+7	; 0x07
    37f8:	78 85       	ldd	r23, Y+8	; 0x08
    37fa:	89 85       	ldd	r24, Y+9	; 0x09
    37fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e8       	ldi	r20, 0x80	; 128
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    380a:	88 23       	and	r24, r24
    380c:	2c f4       	brge	.+10     	; 0x3818 <display_val+0x358>
		__ticks = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
    3816:	3f c0       	rjmp	.+126    	; 0x3896 <display_val+0x3d6>
	else if (__tmp > 65535)
    3818:	6f 81       	ldd	r22, Y+7	; 0x07
    381a:	78 85       	ldd	r23, Y+8	; 0x08
    381c:	89 85       	ldd	r24, Y+9	; 0x09
    381e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	4c f5       	brge	.+82     	; 0x3882 <display_val+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	6b 85       	ldd	r22, Y+11	; 0x0b
    3832:	7c 85       	ldd	r23, Y+12	; 0x0c
    3834:	8d 85       	ldd	r24, Y+13	; 0x0d
    3836:	9e 85       	ldd	r25, Y+14	; 0x0e
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9e 83       	std	Y+6, r25	; 0x06
    3856:	8d 83       	std	Y+5, r24	; 0x05
    3858:	0f c0       	rjmp	.+30     	; 0x3878 <display_val+0x3b8>
    385a:	88 ec       	ldi	r24, 0xC8	; 200
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9c 83       	std	Y+4, r25	; 0x04
    3860:	8b 83       	std	Y+3, r24	; 0x03
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	9c 81       	ldd	r25, Y+4	; 0x04
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <display_val+0x3a6>
    386a:	9c 83       	std	Y+4, r25	; 0x04
    386c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	9e 81       	ldd	r25, Y+6	; 0x06
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	9e 83       	std	Y+6, r25	; 0x06
    3876:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3878:	8d 81       	ldd	r24, Y+5	; 0x05
    387a:	9e 81       	ldd	r25, Y+6	; 0x06
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	69 f7       	brne	.-38     	; 0x385a <display_val+0x39a>
    3880:	14 c0       	rjmp	.+40     	; 0x38aa <display_val+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	6f 81       	ldd	r22, Y+7	; 0x07
    3884:	78 85       	ldd	r23, Y+8	; 0x08
    3886:	89 85       	ldd	r24, Y+9	; 0x09
    3888:	9a 85       	ldd	r25, Y+10	; 0x0a
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	9e 81       	ldd	r25, Y+6	; 0x06
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <display_val+0x3e2>
    38a6:	9a 83       	std	Y+2, r25	; 0x02
    38a8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    38aa:	ec 96       	adiw	r28, 0x3c	; 60
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	f8 94       	cli
    38b0:	de bf       	out	0x3e, r29	; 62
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	cd bf       	out	0x3d, r28	; 61
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	08 95       	ret

000038bc <retrieveFaults>:

void retrieveFaults(void)
{
    38bc:	df 93       	push	r29
    38be:	cf 93       	push	r28
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
    38c4:	ea 97       	sbiw	r28, 0x3a	; 58
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	f8 94       	cli
    38ca:	de bf       	out	0x3e, r29	; 62
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	cd bf       	out	0x3d, r28	; 61
    uint8 fault_distance = 0;
    38d0:	19 ae       	std	Y+57, r1	; 0x39
    uint8 fault_temp = 0;
    38d2:	1a ae       	std	Y+58, r1	; 0x3a

    // read saved fault codes
    EEPROM_readByte(0x0000, &fault_distance);
    38d4:	9e 01       	movw	r18, r28
    38d6:	27 5c       	subi	r18, 0xC7	; 199
    38d8:	3f 4f       	sbci	r19, 0xFF	; 255
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	b9 01       	movw	r22, r18
    38e0:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <EEPROM_readByte>
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	a0 e2       	ldi	r26, 0x20	; 32
    38ea:	b1 e4       	ldi	r27, 0x41	; 65
    38ec:	8d ab       	std	Y+53, r24	; 0x35
    38ee:	9e ab       	std	Y+54, r25	; 0x36
    38f0:	af ab       	std	Y+55, r26	; 0x37
    38f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f4:	6d a9       	ldd	r22, Y+53	; 0x35
    38f6:	7e a9       	ldd	r23, Y+54	; 0x36
    38f8:	8f a9       	ldd	r24, Y+55	; 0x37
    38fa:	98 ad       	ldd	r25, Y+56	; 0x38
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	4a ef       	ldi	r20, 0xFA	; 250
    3902:	54 e4       	ldi	r21, 0x44	; 68
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	89 ab       	std	Y+49, r24	; 0x31
    390e:	9a ab       	std	Y+50, r25	; 0x32
    3910:	ab ab       	std	Y+51, r26	; 0x33
    3912:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3914:	69 a9       	ldd	r22, Y+49	; 0x31
    3916:	7a a9       	ldd	r23, Y+50	; 0x32
    3918:	8b a9       	ldd	r24, Y+51	; 0x33
    391a:	9c a9       	ldd	r25, Y+52	; 0x34
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e8       	ldi	r20, 0x80	; 128
    3922:	5f e3       	ldi	r21, 0x3F	; 63
    3924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3928:	88 23       	and	r24, r24
    392a:	2c f4       	brge	.+10     	; 0x3936 <retrieveFaults+0x7a>
		__ticks = 1;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	98 ab       	std	Y+48, r25	; 0x30
    3932:	8f a7       	std	Y+47, r24	; 0x2f
    3934:	3f c0       	rjmp	.+126    	; 0x39b4 <retrieveFaults+0xf8>
	else if (__tmp > 65535)
    3936:	69 a9       	ldd	r22, Y+49	; 0x31
    3938:	7a a9       	ldd	r23, Y+50	; 0x32
    393a:	8b a9       	ldd	r24, Y+51	; 0x33
    393c:	9c a9       	ldd	r25, Y+52	; 0x34
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	3f ef       	ldi	r19, 0xFF	; 255
    3942:	4f e7       	ldi	r20, 0x7F	; 127
    3944:	57 e4       	ldi	r21, 0x47	; 71
    3946:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    394a:	18 16       	cp	r1, r24
    394c:	4c f5       	brge	.+82     	; 0x39a0 <retrieveFaults+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    394e:	6d a9       	ldd	r22, Y+53	; 0x35
    3950:	7e a9       	ldd	r23, Y+54	; 0x36
    3952:	8f a9       	ldd	r24, Y+55	; 0x37
    3954:	98 ad       	ldd	r25, Y+56	; 0x38
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e2       	ldi	r20, 0x20	; 32
    395c:	51 e4       	ldi	r21, 0x41	; 65
    395e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	bc 01       	movw	r22, r24
    3968:	cd 01       	movw	r24, r26
    396a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	98 ab       	std	Y+48, r25	; 0x30
    3974:	8f a7       	std	Y+47, r24	; 0x2f
    3976:	0f c0       	rjmp	.+30     	; 0x3996 <retrieveFaults+0xda>
    3978:	88 ec       	ldi	r24, 0xC8	; 200
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	9e a7       	std	Y+46, r25	; 0x2e
    397e:	8d a7       	std	Y+45, r24	; 0x2d
    3980:	8d a5       	ldd	r24, Y+45	; 0x2d
    3982:	9e a5       	ldd	r25, Y+46	; 0x2e
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	f1 f7       	brne	.-4      	; 0x3984 <retrieveFaults+0xc8>
    3988:	9e a7       	std	Y+46, r25	; 0x2e
    398a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398c:	8f a5       	ldd	r24, Y+47	; 0x2f
    398e:	98 a9       	ldd	r25, Y+48	; 0x30
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	98 ab       	std	Y+48, r25	; 0x30
    3994:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3996:	8f a5       	ldd	r24, Y+47	; 0x2f
    3998:	98 a9       	ldd	r25, Y+48	; 0x30
    399a:	00 97       	sbiw	r24, 0x00	; 0
    399c:	69 f7       	brne	.-38     	; 0x3978 <retrieveFaults+0xbc>
    399e:	14 c0       	rjmp	.+40     	; 0x39c8 <retrieveFaults+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a0:	69 a9       	ldd	r22, Y+49	; 0x31
    39a2:	7a a9       	ldd	r23, Y+50	; 0x32
    39a4:	8b a9       	ldd	r24, Y+51	; 0x33
    39a6:	9c a9       	ldd	r25, Y+52	; 0x34
    39a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	98 ab       	std	Y+48, r25	; 0x30
    39b2:	8f a7       	std	Y+47, r24	; 0x2f
    39b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    39b6:	98 a9       	ldd	r25, Y+48	; 0x30
    39b8:	9c a7       	std	Y+44, r25	; 0x2c
    39ba:	8b a7       	std	Y+43, r24	; 0x2b
    39bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    39be:	9c a5       	ldd	r25, Y+44	; 0x2c
    39c0:	01 97       	sbiw	r24, 0x01	; 1
    39c2:	f1 f7       	brne	.-4      	; 0x39c0 <retrieveFaults+0x104>
    39c4:	9c a7       	std	Y+44, r25	; 0x2c
    39c6:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
    EEPROM_readByte(0x0001, &fault_temp);
    39c8:	9e 01       	movw	r18, r28
    39ca:	26 5c       	subi	r18, 0xC6	; 198
    39cc:	3f 4f       	sbci	r19, 0xFF	; 255
    39ce:	81 e0       	ldi	r24, 0x01	; 1
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	b9 01       	movw	r22, r18
    39d4:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <EEPROM_readByte>
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	a0 e2       	ldi	r26, 0x20	; 32
    39de:	b1 e4       	ldi	r27, 0x41	; 65
    39e0:	8f a3       	std	Y+39, r24	; 0x27
    39e2:	98 a7       	std	Y+40, r25	; 0x28
    39e4:	a9 a7       	std	Y+41, r26	; 0x29
    39e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e8:	6f a1       	ldd	r22, Y+39	; 0x27
    39ea:	78 a5       	ldd	r23, Y+40	; 0x28
    39ec:	89 a5       	ldd	r24, Y+41	; 0x29
    39ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	4a ef       	ldi	r20, 0xFA	; 250
    39f6:	54 e4       	ldi	r21, 0x44	; 68
    39f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	8b a3       	std	Y+35, r24	; 0x23
    3a02:	9c a3       	std	Y+36, r25	; 0x24
    3a04:	ad a3       	std	Y+37, r26	; 0x25
    3a06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a08:	6b a1       	ldd	r22, Y+35	; 0x23
    3a0a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a0c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a0e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e8       	ldi	r20, 0x80	; 128
    3a16:	5f e3       	ldi	r21, 0x3F	; 63
    3a18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a1c:	88 23       	and	r24, r24
    3a1e:	2c f4       	brge	.+10     	; 0x3a2a <retrieveFaults+0x16e>
		__ticks = 1;
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	9a a3       	std	Y+34, r25	; 0x22
    3a26:	89 a3       	std	Y+33, r24	; 0x21
    3a28:	3f c0       	rjmp	.+126    	; 0x3aa8 <retrieveFaults+0x1ec>
	else if (__tmp > 65535)
    3a2a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a2c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a2e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a30:	9e a1       	ldd	r25, Y+38	; 0x26
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	3f ef       	ldi	r19, 0xFF	; 255
    3a36:	4f e7       	ldi	r20, 0x7F	; 127
    3a38:	57 e4       	ldi	r21, 0x47	; 71
    3a3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a3e:	18 16       	cp	r1, r24
    3a40:	4c f5       	brge	.+82     	; 0x3a94 <retrieveFaults+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a42:	6f a1       	ldd	r22, Y+39	; 0x27
    3a44:	78 a5       	ldd	r23, Y+40	; 0x28
    3a46:	89 a5       	ldd	r24, Y+41	; 0x29
    3a48:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e2       	ldi	r20, 0x20	; 32
    3a50:	51 e4       	ldi	r21, 0x41	; 65
    3a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	9a a3       	std	Y+34, r25	; 0x22
    3a68:	89 a3       	std	Y+33, r24	; 0x21
    3a6a:	0f c0       	rjmp	.+30     	; 0x3a8a <retrieveFaults+0x1ce>
    3a6c:	88 ec       	ldi	r24, 0xC8	; 200
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	98 a3       	std	Y+32, r25	; 0x20
    3a72:	8f 8f       	std	Y+31, r24	; 0x1f
    3a74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a76:	98 a1       	ldd	r25, Y+32	; 0x20
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	f1 f7       	brne	.-4      	; 0x3a78 <retrieveFaults+0x1bc>
    3a7c:	98 a3       	std	Y+32, r25	; 0x20
    3a7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a80:	89 a1       	ldd	r24, Y+33	; 0x21
    3a82:	9a a1       	ldd	r25, Y+34	; 0x22
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	9a a3       	std	Y+34, r25	; 0x22
    3a88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a8c:	9a a1       	ldd	r25, Y+34	; 0x22
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	69 f7       	brne	.-38     	; 0x3a6c <retrieveFaults+0x1b0>
    3a92:	14 c0       	rjmp	.+40     	; 0x3abc <retrieveFaults+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a94:	6b a1       	ldd	r22, Y+35	; 0x23
    3a96:	7c a1       	ldd	r23, Y+36	; 0x24
    3a98:	8d a1       	ldd	r24, Y+37	; 0x25
    3a9a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	9a a3       	std	Y+34, r25	; 0x22
    3aa6:	89 a3       	std	Y+33, r24	; 0x21
    3aa8:	89 a1       	ldd	r24, Y+33	; 0x21
    3aaa:	9a a1       	ldd	r25, Y+34	; 0x22
    3aac:	9e 8f       	std	Y+30, r25	; 0x1e
    3aae:	8d 8f       	std	Y+29, r24	; 0x1d
    3ab0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ab2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	f1 f7       	brne	.-4      	; 0x3ab4 <retrieveFaults+0x1f8>
    3ab8:	9e 8f       	std	Y+30, r25	; 0x1e
    3aba:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);

    // send them to HMI ECU
    UART_sendByte(fault_distance);
    3abc:	89 ad       	ldd	r24, Y+57	; 0x39
    3abe:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	a0 e2       	ldi	r26, 0x20	; 32
    3ac8:	b1 e4       	ldi	r27, 0x41	; 65
    3aca:	89 8f       	std	Y+25, r24	; 0x19
    3acc:	9a 8f       	std	Y+26, r25	; 0x1a
    3ace:	ab 8f       	std	Y+27, r26	; 0x1b
    3ad0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ad4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ad6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ad8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	4a ef       	ldi	r20, 0xFA	; 250
    3ae0:	54 e4       	ldi	r21, 0x44	; 68
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	8d 8b       	std	Y+21, r24	; 0x15
    3aec:	9e 8b       	std	Y+22, r25	; 0x16
    3aee:	af 8b       	std	Y+23, r26	; 0x17
    3af0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3af2:	6d 89       	ldd	r22, Y+21	; 0x15
    3af4:	7e 89       	ldd	r23, Y+22	; 0x16
    3af6:	8f 89       	ldd	r24, Y+23	; 0x17
    3af8:	98 8d       	ldd	r25, Y+24	; 0x18
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	40 e8       	ldi	r20, 0x80	; 128
    3b00:	5f e3       	ldi	r21, 0x3F	; 63
    3b02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b06:	88 23       	and	r24, r24
    3b08:	2c f4       	brge	.+10     	; 0x3b14 <retrieveFaults+0x258>
		__ticks = 1;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	9c 8b       	std	Y+20, r25	; 0x14
    3b10:	8b 8b       	std	Y+19, r24	; 0x13
    3b12:	3f c0       	rjmp	.+126    	; 0x3b92 <retrieveFaults+0x2d6>
	else if (__tmp > 65535)
    3b14:	6d 89       	ldd	r22, Y+21	; 0x15
    3b16:	7e 89       	ldd	r23, Y+22	; 0x16
    3b18:	8f 89       	ldd	r24, Y+23	; 0x17
    3b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	3f ef       	ldi	r19, 0xFF	; 255
    3b20:	4f e7       	ldi	r20, 0x7F	; 127
    3b22:	57 e4       	ldi	r21, 0x47	; 71
    3b24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b28:	18 16       	cp	r1, r24
    3b2a:	4c f5       	brge	.+82     	; 0x3b7e <retrieveFaults+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e2       	ldi	r20, 0x20	; 32
    3b3a:	51 e4       	ldi	r21, 0x41	; 65
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	9c 8b       	std	Y+20, r25	; 0x14
    3b52:	8b 8b       	std	Y+19, r24	; 0x13
    3b54:	0f c0       	rjmp	.+30     	; 0x3b74 <retrieveFaults+0x2b8>
    3b56:	88 ec       	ldi	r24, 0xC8	; 200
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	9a 8b       	std	Y+18, r25	; 0x12
    3b5c:	89 8b       	std	Y+17, r24	; 0x11
    3b5e:	89 89       	ldd	r24, Y+17	; 0x11
    3b60:	9a 89       	ldd	r25, Y+18	; 0x12
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	f1 f7       	brne	.-4      	; 0x3b62 <retrieveFaults+0x2a6>
    3b66:	9a 8b       	std	Y+18, r25	; 0x12
    3b68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	9c 8b       	std	Y+20, r25	; 0x14
    3b72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b74:	8b 89       	ldd	r24, Y+19	; 0x13
    3b76:	9c 89       	ldd	r25, Y+20	; 0x14
    3b78:	00 97       	sbiw	r24, 0x00	; 0
    3b7a:	69 f7       	brne	.-38     	; 0x3b56 <retrieveFaults+0x29a>
    3b7c:	14 c0       	rjmp	.+40     	; 0x3ba6 <retrieveFaults+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b80:	7e 89       	ldd	r23, Y+22	; 0x16
    3b82:	8f 89       	ldd	r24, Y+23	; 0x17
    3b84:	98 8d       	ldd	r25, Y+24	; 0x18
    3b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	9c 8b       	std	Y+20, r25	; 0x14
    3b90:	8b 8b       	std	Y+19, r24	; 0x13
    3b92:	8b 89       	ldd	r24, Y+19	; 0x13
    3b94:	9c 89       	ldd	r25, Y+20	; 0x14
    3b96:	98 8b       	std	Y+16, r25	; 0x10
    3b98:	8f 87       	std	Y+15, r24	; 0x0f
    3b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b9c:	98 89       	ldd	r25, Y+16	; 0x10
    3b9e:	01 97       	sbiw	r24, 0x01	; 1
    3ba0:	f1 f7       	brne	.-4      	; 0x3b9e <retrieveFaults+0x2e2>
    3ba2:	98 8b       	std	Y+16, r25	; 0x10
    3ba4:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    UART_sendByte(fault_temp);
    3ba6:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ba8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <UART_sendByte>
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	a0 e2       	ldi	r26, 0x20	; 32
    3bb2:	b1 e4       	ldi	r27, 0x41	; 65
    3bb4:	8b 87       	std	Y+11, r24	; 0x0b
    3bb6:	9c 87       	std	Y+12, r25	; 0x0c
    3bb8:	ad 87       	std	Y+13, r26	; 0x0d
    3bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	4a ef       	ldi	r20, 0xFA	; 250
    3bca:	54 e4       	ldi	r21, 0x44	; 68
    3bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	8f 83       	std	Y+7, r24	; 0x07
    3bd6:	98 87       	std	Y+8, r25	; 0x08
    3bd8:	a9 87       	std	Y+9, r26	; 0x09
    3bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bde:	78 85       	ldd	r23, Y+8	; 0x08
    3be0:	89 85       	ldd	r24, Y+9	; 0x09
    3be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e8       	ldi	r20, 0x80	; 128
    3bea:	5f e3       	ldi	r21, 0x3F	; 63
    3bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf0:	88 23       	and	r24, r24
    3bf2:	2c f4       	brge	.+10     	; 0x3bfe <retrieveFaults+0x342>
		__ticks = 1;
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	9e 83       	std	Y+6, r25	; 0x06
    3bfa:	8d 83       	std	Y+5, r24	; 0x05
    3bfc:	3f c0       	rjmp	.+126    	; 0x3c7c <retrieveFaults+0x3c0>
	else if (__tmp > 65535)
    3bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    3c00:	78 85       	ldd	r23, Y+8	; 0x08
    3c02:	89 85       	ldd	r24, Y+9	; 0x09
    3c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	3f ef       	ldi	r19, 0xFF	; 255
    3c0a:	4f e7       	ldi	r20, 0x7F	; 127
    3c0c:	57 e4       	ldi	r21, 0x47	; 71
    3c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c12:	18 16       	cp	r1, r24
    3c14:	4c f5       	brge	.+82     	; 0x3c68 <retrieveFaults+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e2       	ldi	r20, 0x20	; 32
    3c24:	51 e4       	ldi	r21, 0x41	; 65
    3c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	bc 01       	movw	r22, r24
    3c30:	cd 01       	movw	r24, r26
    3c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	9e 83       	std	Y+6, r25	; 0x06
    3c3c:	8d 83       	std	Y+5, r24	; 0x05
    3c3e:	0f c0       	rjmp	.+30     	; 0x3c5e <retrieveFaults+0x3a2>
    3c40:	88 ec       	ldi	r24, 0xC8	; 200
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9c 83       	std	Y+4, r25	; 0x04
    3c46:	8b 83       	std	Y+3, r24	; 0x03
    3c48:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <retrieveFaults+0x390>
    3c50:	9c 83       	std	Y+4, r25	; 0x04
    3c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c54:	8d 81       	ldd	r24, Y+5	; 0x05
    3c56:	9e 81       	ldd	r25, Y+6	; 0x06
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	9e 83       	std	Y+6, r25	; 0x06
    3c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c60:	9e 81       	ldd	r25, Y+6	; 0x06
    3c62:	00 97       	sbiw	r24, 0x00	; 0
    3c64:	69 f7       	brne	.-38     	; 0x3c40 <retrieveFaults+0x384>
    3c66:	14 c0       	rjmp	.+40     	; 0x3c90 <retrieveFaults+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c68:	6f 81       	ldd	r22, Y+7	; 0x07
    3c6a:	78 85       	ldd	r23, Y+8	; 0x08
    3c6c:	89 85       	ldd	r24, Y+9	; 0x09
    3c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	9e 83       	std	Y+6, r25	; 0x06
    3c7a:	8d 83       	std	Y+5, r24	; 0x05
    3c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c80:	9a 83       	std	Y+2, r25	; 0x02
    3c82:	89 83       	std	Y+1, r24	; 0x01
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	9a 81       	ldd	r25, Y+2	; 0x02
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	f1 f7       	brne	.-4      	; 0x3c88 <retrieveFaults+0x3cc>
    3c8c:	9a 83       	std	Y+2, r25	; 0x02
    3c8e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    3c90:	ea 96       	adiw	r28, 0x3a	; 58
    3c92:	0f b6       	in	r0, 0x3f	; 63
    3c94:	f8 94       	cli
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	cf 91       	pop	r28
    3c9e:	df 91       	pop	r29
    3ca0:	08 95       	ret

00003ca2 <stopMonitoring>:

void stopMonitoring(void)
{
    3ca2:	df 93       	push	r29
    3ca4:	cf 93       	push	r28
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
    g_monitoring_active = 0;
    3caa:	10 92 7d 01 	sts	0x017D, r1
    // stop both motors
    DcMotor_Rotate(STOP, 0);
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	60 e0       	ldi	r22, 0x00	; 0
    3cb2:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <DcMotor_Rotate>
    DcMotor_Rotate2(STOP2, 0);
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	60 e0       	ldi	r22, 0x00	; 0
    3cba:	0e 94 33 11 	call	0x2266	; 0x2266 <DcMotor_Rotate2>
    g_win1_status = 0;
    3cbe:	10 92 7b 01 	sts	0x017B, r1
    g_win2_status = 0;
    3cc2:	10 92 7c 01 	sts	0x017C, r1
}
    3cc6:	cf 91       	pop	r28
    3cc8:	df 91       	pop	r29
    3cca:	08 95       	ret

00003ccc <main>:

/*******************************************************************************
 *                   Main Function                                             *
 *******************************************************************************/
int main(void)
{
    3ccc:	df 93       	push	r29
    3cce:	cf 93       	push	r28
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
    3cd4:	c3 55       	subi	r28, 0x53	; 83
    3cd6:	d0 40       	sbci	r29, 0x00	; 0
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    uint8 command = 0;
    3ce2:	19 ae       	std	Y+57, r1	; 0x39

    // init UART
    UART_ConfigType uartConfig = {UART_8BIT, disabled, ONE_STOP_BIT, 9600};
    3ce4:	9e 01       	movw	r18, r28
    3ce6:	26 5c       	subi	r18, 0xC6	; 198
    3ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cea:	2c 96       	adiw	r28, 0x0c	; 12
    3cec:	3f af       	std	Y+63, r19	; 0x3f
    3cee:	2e af       	std	Y+62, r18	; 0x3e
    3cf0:	2c 97       	sbiw	r28, 0x0c	; 12
    3cf2:	8d e6       	ldi	r24, 0x6D	; 109
    3cf4:	91 e0       	ldi	r25, 0x01	; 1
    3cf6:	2e 96       	adiw	r28, 0x0e	; 14
    3cf8:	9f af       	std	Y+63, r25	; 0x3f
    3cfa:	8e af       	std	Y+62, r24	; 0x3e
    3cfc:	2e 97       	sbiw	r28, 0x0e	; 14
    3cfe:	97 e0       	ldi	r25, 0x07	; 7
    3d00:	2f 96       	adiw	r28, 0x0f	; 15
    3d02:	9f af       	std	Y+63, r25	; 0x3f
    3d04:	2f 97       	sbiw	r28, 0x0f	; 15
    3d06:	2e 96       	adiw	r28, 0x0e	; 14
    3d08:	ee ad       	ldd	r30, Y+62	; 0x3e
    3d0a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d0c:	2e 97       	sbiw	r28, 0x0e	; 14
    3d0e:	00 80       	ld	r0, Z
    3d10:	2e 96       	adiw	r28, 0x0e	; 14
    3d12:	2e ad       	ldd	r18, Y+62	; 0x3e
    3d14:	3f ad       	ldd	r19, Y+63	; 0x3f
    3d16:	2e 97       	sbiw	r28, 0x0e	; 14
    3d18:	2f 5f       	subi	r18, 0xFF	; 255
    3d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1c:	2e 96       	adiw	r28, 0x0e	; 14
    3d1e:	3f af       	std	Y+63, r19	; 0x3f
    3d20:	2e af       	std	Y+62, r18	; 0x3e
    3d22:	2e 97       	sbiw	r28, 0x0e	; 14
    3d24:	2c 96       	adiw	r28, 0x0c	; 12
    3d26:	ee ad       	ldd	r30, Y+62	; 0x3e
    3d28:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d2a:	2c 97       	sbiw	r28, 0x0c	; 12
    3d2c:	00 82       	st	Z, r0
    3d2e:	2c 96       	adiw	r28, 0x0c	; 12
    3d30:	2e ad       	ldd	r18, Y+62	; 0x3e
    3d32:	3f ad       	ldd	r19, Y+63	; 0x3f
    3d34:	2c 97       	sbiw	r28, 0x0c	; 12
    3d36:	2f 5f       	subi	r18, 0xFF	; 255
    3d38:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3a:	2c 96       	adiw	r28, 0x0c	; 12
    3d3c:	3f af       	std	Y+63, r19	; 0x3f
    3d3e:	2e af       	std	Y+62, r18	; 0x3e
    3d40:	2c 97       	sbiw	r28, 0x0c	; 12
    3d42:	2f 96       	adiw	r28, 0x0f	; 15
    3d44:	3f ad       	ldd	r19, Y+63	; 0x3f
    3d46:	2f 97       	sbiw	r28, 0x0f	; 15
    3d48:	31 50       	subi	r19, 0x01	; 1
    3d4a:	2f 96       	adiw	r28, 0x0f	; 15
    3d4c:	3f af       	std	Y+63, r19	; 0x3f
    3d4e:	2f 97       	sbiw	r28, 0x0f	; 15
    3d50:	2f 96       	adiw	r28, 0x0f	; 15
    3d52:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d54:	2f 97       	sbiw	r28, 0x0f	; 15
    3d56:	88 23       	and	r24, r24
    3d58:	b1 f6       	brne	.-84     	; 0x3d06 <main+0x3a>
    UART_init(&uartConfig);
    3d5a:	ce 01       	movw	r24, r28
    3d5c:	ca 96       	adiw	r24, 0x3a	; 58
    3d5e:	0e 94 95 0c 	call	0x192a	; 0x192a <UART_init>
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	a8 e4       	ldi	r26, 0x48	; 72
    3d68:	b2 e4       	ldi	r27, 0x42	; 66
    3d6a:	8d ab       	std	Y+53, r24	; 0x35
    3d6c:	9e ab       	std	Y+54, r25	; 0x36
    3d6e:	af ab       	std	Y+55, r26	; 0x37
    3d70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d72:	6d a9       	ldd	r22, Y+53	; 0x35
    3d74:	7e a9       	ldd	r23, Y+54	; 0x36
    3d76:	8f a9       	ldd	r24, Y+55	; 0x37
    3d78:	98 ad       	ldd	r25, Y+56	; 0x38
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	4a ef       	ldi	r20, 0xFA	; 250
    3d80:	54 e4       	ldi	r21, 0x44	; 68
    3d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	89 ab       	std	Y+49, r24	; 0x31
    3d8c:	9a ab       	std	Y+50, r25	; 0x32
    3d8e:	ab ab       	std	Y+51, r26	; 0x33
    3d90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d92:	69 a9       	ldd	r22, Y+49	; 0x31
    3d94:	7a a9       	ldd	r23, Y+50	; 0x32
    3d96:	8b a9       	ldd	r24, Y+51	; 0x33
    3d98:	9c a9       	ldd	r25, Y+52	; 0x34
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	40 e8       	ldi	r20, 0x80	; 128
    3da0:	5f e3       	ldi	r21, 0x3F	; 63
    3da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3da6:	88 23       	and	r24, r24
    3da8:	2c f4       	brge	.+10     	; 0x3db4 <main+0xe8>
		__ticks = 1;
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	98 ab       	std	Y+48, r25	; 0x30
    3db0:	8f a7       	std	Y+47, r24	; 0x2f
    3db2:	3f c0       	rjmp	.+126    	; 0x3e32 <main+0x166>
	else if (__tmp > 65535)
    3db4:	69 a9       	ldd	r22, Y+49	; 0x31
    3db6:	7a a9       	ldd	r23, Y+50	; 0x32
    3db8:	8b a9       	ldd	r24, Y+51	; 0x33
    3dba:	9c a9       	ldd	r25, Y+52	; 0x34
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	3f ef       	ldi	r19, 0xFF	; 255
    3dc0:	4f e7       	ldi	r20, 0x7F	; 127
    3dc2:	57 e4       	ldi	r21, 0x47	; 71
    3dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dc8:	18 16       	cp	r1, r24
    3dca:	4c f5       	brge	.+82     	; 0x3e1e <main+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dcc:	6d a9       	ldd	r22, Y+53	; 0x35
    3dce:	7e a9       	ldd	r23, Y+54	; 0x36
    3dd0:	8f a9       	ldd	r24, Y+55	; 0x37
    3dd2:	98 ad       	ldd	r25, Y+56	; 0x38
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e2       	ldi	r20, 0x20	; 32
    3dda:	51 e4       	ldi	r21, 0x41	; 65
    3ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	bc 01       	movw	r22, r24
    3de6:	cd 01       	movw	r24, r26
    3de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	98 ab       	std	Y+48, r25	; 0x30
    3df2:	8f a7       	std	Y+47, r24	; 0x2f
    3df4:	0f c0       	rjmp	.+30     	; 0x3e14 <main+0x148>
    3df6:	88 ec       	ldi	r24, 0xC8	; 200
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	9e a7       	std	Y+46, r25	; 0x2e
    3dfc:	8d a7       	std	Y+45, r24	; 0x2d
    3dfe:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e00:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <main+0x136>
    3e06:	9e a7       	std	Y+46, r25	; 0x2e
    3e08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e0c:	98 a9       	ldd	r25, Y+48	; 0x30
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	98 ab       	std	Y+48, r25	; 0x30
    3e12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e14:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e16:	98 a9       	ldd	r25, Y+48	; 0x30
    3e18:	00 97       	sbiw	r24, 0x00	; 0
    3e1a:	69 f7       	brne	.-38     	; 0x3df6 <main+0x12a>
    3e1c:	14 c0       	rjmp	.+40     	; 0x3e46 <main+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1e:	69 a9       	ldd	r22, Y+49	; 0x31
    3e20:	7a a9       	ldd	r23, Y+50	; 0x32
    3e22:	8b a9       	ldd	r24, Y+51	; 0x33
    3e24:	9c a9       	ldd	r25, Y+52	; 0x34
    3e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	98 ab       	std	Y+48, r25	; 0x30
    3e30:	8f a7       	std	Y+47, r24	; 0x2f
    3e32:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e34:	98 a9       	ldd	r25, Y+48	; 0x30
    3e36:	9c a7       	std	Y+44, r25	; 0x2c
    3e38:	8b a7       	std	Y+43, r24	; 0x2b
    3e3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	f1 f7       	brne	.-4      	; 0x3e3e <main+0x172>
    3e42:	9c a7       	std	Y+44, r25	; 0x2c
    3e44:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(50);

    // init ADC for LM35
    ADC_ConfigType adc_config = {INTERNAL, FCPU_128};
    3e46:	fe 01       	movw	r30, r28
    3e48:	ef 5b       	subi	r30, 0xBF	; 191
    3e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4c:	82 e0       	ldi	r24, 0x02	; 2
    3e4e:	80 83       	st	Z, r24
    3e50:	fe 01       	movw	r30, r28
    3e52:	ef 5b       	subi	r30, 0xBF	; 191
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	87 e0       	ldi	r24, 0x07	; 7
    3e58:	81 83       	std	Z+1, r24	; 0x01
    ADC_init(&adc_config);
    3e5a:	ce 01       	movw	r24, r28
    3e5c:	8f 5b       	subi	r24, 0xBF	; 191
    3e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e60:	0e 94 51 07 	call	0xea2	; 0xea2 <ADC_init>
    3e64:	80 e0       	ldi	r24, 0x00	; 0
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	a8 e4       	ldi	r26, 0x48	; 72
    3e6a:	b2 e4       	ldi	r27, 0x42	; 66
    3e6c:	8f a3       	std	Y+39, r24	; 0x27
    3e6e:	98 a7       	std	Y+40, r25	; 0x28
    3e70:	a9 a7       	std	Y+41, r26	; 0x29
    3e72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e74:	6f a1       	ldd	r22, Y+39	; 0x27
    3e76:	78 a5       	ldd	r23, Y+40	; 0x28
    3e78:	89 a5       	ldd	r24, Y+41	; 0x29
    3e7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	4a ef       	ldi	r20, 0xFA	; 250
    3e82:	54 e4       	ldi	r21, 0x44	; 68
    3e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e88:	dc 01       	movw	r26, r24
    3e8a:	cb 01       	movw	r24, r22
    3e8c:	8b a3       	std	Y+35, r24	; 0x23
    3e8e:	9c a3       	std	Y+36, r25	; 0x24
    3e90:	ad a3       	std	Y+37, r26	; 0x25
    3e92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e94:	6b a1       	ldd	r22, Y+35	; 0x23
    3e96:	7c a1       	ldd	r23, Y+36	; 0x24
    3e98:	8d a1       	ldd	r24, Y+37	; 0x25
    3e9a:	9e a1       	ldd	r25, Y+38	; 0x26
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	40 e8       	ldi	r20, 0x80	; 128
    3ea2:	5f e3       	ldi	r21, 0x3F	; 63
    3ea4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ea8:	88 23       	and	r24, r24
    3eaa:	2c f4       	brge	.+10     	; 0x3eb6 <main+0x1ea>
		__ticks = 1;
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	9a a3       	std	Y+34, r25	; 0x22
    3eb2:	89 a3       	std	Y+33, r24	; 0x21
    3eb4:	3f c0       	rjmp	.+126    	; 0x3f34 <main+0x268>
	else if (__tmp > 65535)
    3eb6:	6b a1       	ldd	r22, Y+35	; 0x23
    3eb8:	7c a1       	ldd	r23, Y+36	; 0x24
    3eba:	8d a1       	ldd	r24, Y+37	; 0x25
    3ebc:	9e a1       	ldd	r25, Y+38	; 0x26
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	3f ef       	ldi	r19, 0xFF	; 255
    3ec2:	4f e7       	ldi	r20, 0x7F	; 127
    3ec4:	57 e4       	ldi	r21, 0x47	; 71
    3ec6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eca:	18 16       	cp	r1, r24
    3ecc:	4c f5       	brge	.+82     	; 0x3f20 <main+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ece:	6f a1       	ldd	r22, Y+39	; 0x27
    3ed0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ed2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ed4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 e2       	ldi	r20, 0x20	; 32
    3edc:	51 e4       	ldi	r21, 0x41	; 65
    3ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	bc 01       	movw	r22, r24
    3ee8:	cd 01       	movw	r24, r26
    3eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	9a a3       	std	Y+34, r25	; 0x22
    3ef4:	89 a3       	std	Y+33, r24	; 0x21
    3ef6:	0f c0       	rjmp	.+30     	; 0x3f16 <main+0x24a>
    3ef8:	88 ec       	ldi	r24, 0xC8	; 200
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	98 a3       	std	Y+32, r25	; 0x20
    3efe:	8f 8f       	std	Y+31, r24	; 0x1f
    3f00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f02:	98 a1       	ldd	r25, Y+32	; 0x20
    3f04:	01 97       	sbiw	r24, 0x01	; 1
    3f06:	f1 f7       	brne	.-4      	; 0x3f04 <main+0x238>
    3f08:	98 a3       	std	Y+32, r25	; 0x20
    3f0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0c:	89 a1       	ldd	r24, Y+33	; 0x21
    3f0e:	9a a1       	ldd	r25, Y+34	; 0x22
    3f10:	01 97       	sbiw	r24, 0x01	; 1
    3f12:	9a a3       	std	Y+34, r25	; 0x22
    3f14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f16:	89 a1       	ldd	r24, Y+33	; 0x21
    3f18:	9a a1       	ldd	r25, Y+34	; 0x22
    3f1a:	00 97       	sbiw	r24, 0x00	; 0
    3f1c:	69 f7       	brne	.-38     	; 0x3ef8 <main+0x22c>
    3f1e:	14 c0       	rjmp	.+40     	; 0x3f48 <main+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f20:	6b a1       	ldd	r22, Y+35	; 0x23
    3f22:	7c a1       	ldd	r23, Y+36	; 0x24
    3f24:	8d a1       	ldd	r24, Y+37	; 0x25
    3f26:	9e a1       	ldd	r25, Y+38	; 0x26
    3f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	9a a3       	std	Y+34, r25	; 0x22
    3f32:	89 a3       	std	Y+33, r24	; 0x21
    3f34:	89 a1       	ldd	r24, Y+33	; 0x21
    3f36:	9a a1       	ldd	r25, Y+34	; 0x22
    3f38:	9e 8f       	std	Y+30, r25	; 0x1e
    3f3a:	8d 8f       	std	Y+29, r24	; 0x1d
    3f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	f1 f7       	brne	.-4      	; 0x3f40 <main+0x274>
    3f44:	9e 8f       	std	Y+30, r25	; 0x1e
    3f46:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(50);

    // init TWI for EEPROM
    TWI_ConfigType twiConfig = {0x01, 400000};
    3f48:	ce 01       	movw	r24, r28
    3f4a:	8d 5b       	subi	r24, 0xBD	; 189
    3f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f4e:	61 96       	adiw	r28, 0x11	; 17
    3f50:	9f af       	std	Y+63, r25	; 0x3f
    3f52:	8e af       	std	Y+62, r24	; 0x3e
    3f54:	61 97       	sbiw	r28, 0x11	; 17
    3f56:	e8 e6       	ldi	r30, 0x68	; 104
    3f58:	f1 e0       	ldi	r31, 0x01	; 1
    3f5a:	63 96       	adiw	r28, 0x13	; 19
    3f5c:	ff af       	std	Y+63, r31	; 0x3f
    3f5e:	ee af       	std	Y+62, r30	; 0x3e
    3f60:	63 97       	sbiw	r28, 0x13	; 19
    3f62:	f5 e0       	ldi	r31, 0x05	; 5
    3f64:	64 96       	adiw	r28, 0x14	; 20
    3f66:	ff af       	std	Y+63, r31	; 0x3f
    3f68:	64 97       	sbiw	r28, 0x14	; 20
    3f6a:	63 96       	adiw	r28, 0x13	; 19
    3f6c:	ee ad       	ldd	r30, Y+62	; 0x3e
    3f6e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3f70:	63 97       	sbiw	r28, 0x13	; 19
    3f72:	00 80       	ld	r0, Z
    3f74:	63 96       	adiw	r28, 0x13	; 19
    3f76:	2e ad       	ldd	r18, Y+62	; 0x3e
    3f78:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f7a:	63 97       	sbiw	r28, 0x13	; 19
    3f7c:	2f 5f       	subi	r18, 0xFF	; 255
    3f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f80:	63 96       	adiw	r28, 0x13	; 19
    3f82:	3f af       	std	Y+63, r19	; 0x3f
    3f84:	2e af       	std	Y+62, r18	; 0x3e
    3f86:	63 97       	sbiw	r28, 0x13	; 19
    3f88:	61 96       	adiw	r28, 0x11	; 17
    3f8a:	ee ad       	ldd	r30, Y+62	; 0x3e
    3f8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    3f8e:	61 97       	sbiw	r28, 0x11	; 17
    3f90:	00 82       	st	Z, r0
    3f92:	61 96       	adiw	r28, 0x11	; 17
    3f94:	2e ad       	ldd	r18, Y+62	; 0x3e
    3f96:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f98:	61 97       	sbiw	r28, 0x11	; 17
    3f9a:	2f 5f       	subi	r18, 0xFF	; 255
    3f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f9e:	61 96       	adiw	r28, 0x11	; 17
    3fa0:	3f af       	std	Y+63, r19	; 0x3f
    3fa2:	2e af       	std	Y+62, r18	; 0x3e
    3fa4:	61 97       	sbiw	r28, 0x11	; 17
    3fa6:	64 96       	adiw	r28, 0x14	; 20
    3fa8:	3f ad       	ldd	r19, Y+63	; 0x3f
    3faa:	64 97       	sbiw	r28, 0x14	; 20
    3fac:	31 50       	subi	r19, 0x01	; 1
    3fae:	64 96       	adiw	r28, 0x14	; 20
    3fb0:	3f af       	std	Y+63, r19	; 0x3f
    3fb2:	64 97       	sbiw	r28, 0x14	; 20
    3fb4:	64 96       	adiw	r28, 0x14	; 20
    3fb6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fb8:	64 97       	sbiw	r28, 0x14	; 20
    3fba:	88 23       	and	r24, r24
    3fbc:	b1 f6       	brne	.-84     	; 0x3f6a <main+0x29e>
    TWI_init(&twiConfig);
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	8d 5b       	subi	r24, 0xBD	; 189
    3fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <TWI_init>
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	a8 e4       	ldi	r26, 0x48	; 72
    3fce:	b2 e4       	ldi	r27, 0x42	; 66
    3fd0:	89 8f       	std	Y+25, r24	; 0x19
    3fd2:	9a 8f       	std	Y+26, r25	; 0x1a
    3fd4:	ab 8f       	std	Y+27, r26	; 0x1b
    3fd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fd8:	69 8d       	ldd	r22, Y+25	; 0x19
    3fda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	4a ef       	ldi	r20, 0xFA	; 250
    3fe6:	54 e4       	ldi	r21, 0x44	; 68
    3fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	8d 8b       	std	Y+21, r24	; 0x15
    3ff2:	9e 8b       	std	Y+22, r25	; 0x16
    3ff4:	af 8b       	std	Y+23, r26	; 0x17
    3ff6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ff8:	6d 89       	ldd	r22, Y+21	; 0x15
    3ffa:	7e 89       	ldd	r23, Y+22	; 0x16
    3ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	40 e8       	ldi	r20, 0x80	; 128
    4006:	5f e3       	ldi	r21, 0x3F	; 63
    4008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    400c:	88 23       	and	r24, r24
    400e:	2c f4       	brge	.+10     	; 0x401a <main+0x34e>
		__ticks = 1;
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	9c 8b       	std	Y+20, r25	; 0x14
    4016:	8b 8b       	std	Y+19, r24	; 0x13
    4018:	3f c0       	rjmp	.+126    	; 0x4098 <main+0x3cc>
	else if (__tmp > 65535)
    401a:	6d 89       	ldd	r22, Y+21	; 0x15
    401c:	7e 89       	ldd	r23, Y+22	; 0x16
    401e:	8f 89       	ldd	r24, Y+23	; 0x17
    4020:	98 8d       	ldd	r25, Y+24	; 0x18
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	3f ef       	ldi	r19, 0xFF	; 255
    4026:	4f e7       	ldi	r20, 0x7F	; 127
    4028:	57 e4       	ldi	r21, 0x47	; 71
    402a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    402e:	18 16       	cp	r1, r24
    4030:	4c f5       	brge	.+82     	; 0x4084 <main+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4032:	69 8d       	ldd	r22, Y+25	; 0x19
    4034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	40 e2       	ldi	r20, 0x20	; 32
    4040:	51 e4       	ldi	r21, 0x41	; 65
    4042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	bc 01       	movw	r22, r24
    404c:	cd 01       	movw	r24, r26
    404e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	9c 8b       	std	Y+20, r25	; 0x14
    4058:	8b 8b       	std	Y+19, r24	; 0x13
    405a:	0f c0       	rjmp	.+30     	; 0x407a <main+0x3ae>
    405c:	88 ec       	ldi	r24, 0xC8	; 200
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	9a 8b       	std	Y+18, r25	; 0x12
    4062:	89 8b       	std	Y+17, r24	; 0x11
    4064:	89 89       	ldd	r24, Y+17	; 0x11
    4066:	9a 89       	ldd	r25, Y+18	; 0x12
    4068:	01 97       	sbiw	r24, 0x01	; 1
    406a:	f1 f7       	brne	.-4      	; 0x4068 <main+0x39c>
    406c:	9a 8b       	std	Y+18, r25	; 0x12
    406e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4070:	8b 89       	ldd	r24, Y+19	; 0x13
    4072:	9c 89       	ldd	r25, Y+20	; 0x14
    4074:	01 97       	sbiw	r24, 0x01	; 1
    4076:	9c 8b       	std	Y+20, r25	; 0x14
    4078:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    407a:	8b 89       	ldd	r24, Y+19	; 0x13
    407c:	9c 89       	ldd	r25, Y+20	; 0x14
    407e:	00 97       	sbiw	r24, 0x00	; 0
    4080:	69 f7       	brne	.-38     	; 0x405c <main+0x390>
    4082:	14 c0       	rjmp	.+40     	; 0x40ac <main+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4084:	6d 89       	ldd	r22, Y+21	; 0x15
    4086:	7e 89       	ldd	r23, Y+22	; 0x16
    4088:	8f 89       	ldd	r24, Y+23	; 0x17
    408a:	98 8d       	ldd	r25, Y+24	; 0x18
    408c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	9c 8b       	std	Y+20, r25	; 0x14
    4096:	8b 8b       	std	Y+19, r24	; 0x13
    4098:	8b 89       	ldd	r24, Y+19	; 0x13
    409a:	9c 89       	ldd	r25, Y+20	; 0x14
    409c:	98 8b       	std	Y+16, r25	; 0x10
    409e:	8f 87       	std	Y+15, r24	; 0x0f
    40a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    40a2:	98 89       	ldd	r25, Y+16	; 0x10
    40a4:	01 97       	sbiw	r24, 0x01	; 1
    40a6:	f1 f7       	brne	.-4      	; 0x40a4 <main+0x3d8>
    40a8:	98 8b       	std	Y+16, r25	; 0x10
    40aa:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(50);

    // setup all sensors and motors
    Ultrasonic_init();
    40ac:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Ultrasonic_init>
    DcMotor_Init();
    40b0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DcMotor_Init>
    DcMotor_Init2();
    40b4:	0e 94 10 11 	call	0x2220	; 0x2220 <DcMotor_Init2>
    PWM_Timer0_Start(100);
    40b8:	84 e6       	ldi	r24, 0x64	; 100
    40ba:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_Timer0_Start>

    // configure buttons as inputs with pull-ups
    GPIO_setupPinDirection(WINDOW_PORT, WIN1_OPEN_PIN, PIN_INPUT);
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	62 e0       	ldi	r22, 0x02	; 2
    40c2:	40 e0       	ldi	r20, 0x00	; 0
    40c4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>
    GPIO_writePin(WINDOW_PORT, WIN1_OPEN_PIN, LOGIC_HIGH);
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	62 e0       	ldi	r22, 0x02	; 2
    40cc:	41 e0       	ldi	r20, 0x01	; 1
    40ce:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

    GPIO_setupPinDirection(WINDOW_PORT, WIN1_CLOSE_PIN, PIN_INPUT);
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	63 e0       	ldi	r22, 0x03	; 3
    40d6:	40 e0       	ldi	r20, 0x00	; 0
    40d8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>
    GPIO_writePin(WINDOW_PORT, WIN1_CLOSE_PIN, LOGIC_HIGH);
    40dc:	80 e0       	ldi	r24, 0x00	; 0
    40de:	63 e0       	ldi	r22, 0x03	; 3
    40e0:	41 e0       	ldi	r20, 0x01	; 1
    40e2:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

    GPIO_setupPinDirection(WINDOW_PORT, WIN2_OPEN_PIN, PIN_INPUT);
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	64 e0       	ldi	r22, 0x04	; 4
    40ea:	40 e0       	ldi	r20, 0x00	; 0
    40ec:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>
    GPIO_writePin(WINDOW_PORT, WIN2_OPEN_PIN, LOGIC_HIGH);
    40f0:	80 e0       	ldi	r24, 0x00	; 0
    40f2:	64 e0       	ldi	r22, 0x04	; 4
    40f4:	41 e0       	ldi	r20, 0x01	; 1
    40f6:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

    GPIO_setupPinDirection(WINDOW_PORT, WIN2_CLOSE_PIN, PIN_INPUT);
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	65 e0       	ldi	r22, 0x05	; 5
    40fe:	40 e0       	ldi	r20, 0x00	; 0
    4100:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <GPIO_setupPinDirection>
    GPIO_writePin(WINDOW_PORT, WIN2_CLOSE_PIN, LOGIC_HIGH);
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	65 e0       	ldi	r22, 0x05	; 5
    4108:	41 e0       	ldi	r20, 0x01	; 1
    410a:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

    // enable global interrupts for ultrasonic timing
    SREG |= (1 << 7);
    410e:	af e5       	ldi	r26, 0x5F	; 95
    4110:	b0 e0       	ldi	r27, 0x00	; 0
    4112:	ef e5       	ldi	r30, 0x5F	; 95
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	80 81       	ld	r24, Z
    4118:	80 68       	ori	r24, 0x80	; 128
    411a:	8c 93       	st	X, r24

    while(1)
    {
        // get command from HMI ECU
        command = UART_recieveByte();
    411c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <UART_recieveByte>
    4120:	89 af       	std	Y+57, r24	; 0x39

        switch(command)
    4122:	89 ad       	ldd	r24, Y+57	; 0x39
    4124:	e8 2f       	mov	r30, r24
    4126:	f0 e0       	ldi	r31, 0x00	; 0
    4128:	2a 96       	adiw	r28, 0x0a	; 10
    412a:	ff af       	std	Y+63, r31	; 0x3f
    412c:	ee af       	std	Y+62, r30	; 0x3e
    412e:	2a 97       	sbiw	r28, 0x0a	; 10
    4130:	2a 96       	adiw	r28, 0x0a	; 10
    4132:	2e ad       	ldd	r18, Y+62	; 0x3e
    4134:	3f ad       	ldd	r19, Y+63	; 0x3f
    4136:	2a 97       	sbiw	r28, 0x0a	; 10
    4138:	22 30       	cpi	r18, 0x02	; 2
    413a:	31 05       	cpc	r19, r1
    413c:	09 f1       	breq	.+66     	; 0x4180 <main+0x4b4>
    413e:	2a 96       	adiw	r28, 0x0a	; 10
    4140:	8e ad       	ldd	r24, Y+62	; 0x3e
    4142:	9f ad       	ldd	r25, Y+63	; 0x3f
    4144:	2a 97       	sbiw	r28, 0x0a	; 10
    4146:	83 30       	cpi	r24, 0x03	; 3
    4148:	91 05       	cpc	r25, r1
    414a:	44 f4       	brge	.+16     	; 0x415c <main+0x490>
    414c:	2a 96       	adiw	r28, 0x0a	; 10
    414e:	ee ad       	ldd	r30, Y+62	; 0x3e
    4150:	ff ad       	ldd	r31, Y+63	; 0x3f
    4152:	2a 97       	sbiw	r28, 0x0a	; 10
    4154:	e1 30       	cpi	r30, 0x01	; 1
    4156:	f1 05       	cpc	r31, r1
    4158:	81 f0       	breq	.+32     	; 0x417a <main+0x4ae>
    415a:	1a c0       	rjmp	.+52     	; 0x4190 <main+0x4c4>
    415c:	2a 96       	adiw	r28, 0x0a	; 10
    415e:	2e ad       	ldd	r18, Y+62	; 0x3e
    4160:	3f ad       	ldd	r19, Y+63	; 0x3f
    4162:	2a 97       	sbiw	r28, 0x0a	; 10
    4164:	23 30       	cpi	r18, 0x03	; 3
    4166:	31 05       	cpc	r19, r1
    4168:	71 f0       	breq	.+28     	; 0x4186 <main+0x4ba>
    416a:	2a 96       	adiw	r28, 0x0a	; 10
    416c:	8e ad       	ldd	r24, Y+62	; 0x3e
    416e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4170:	2a 97       	sbiw	r28, 0x0a	; 10
    4172:	84 30       	cpi	r24, 0x04	; 4
    4174:	91 05       	cpc	r25, r1
    4176:	51 f0       	breq	.+20     	; 0x418c <main+0x4c0>
    4178:	0b c0       	rjmp	.+22     	; 0x4190 <main+0x4c4>
        {
            case START_OPERATION:
                start_monitor();
    417a:	0e 94 76 14 	call	0x28ec	; 0x28ec <start_monitor>
    417e:	08 c0       	rjmp	.+16     	; 0x4190 <main+0x4c4>
                break;

            case DISPLAY_VALUES:
                display_val();
    4180:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <display_val>
    4184:	05 c0       	rjmp	.+10     	; 0x4190 <main+0x4c4>
                break;

            case RETRIEVE_FAULTS:
                retrieveFaults();
    4186:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <retrieveFaults>
    418a:	02 c0       	rjmp	.+4      	; 0x4190 <main+0x4c4>
                break;

            case STOP_MONITORING:
                stopMonitoring();
    418c:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <stopMonitoring>
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	a0 e2       	ldi	r26, 0x20	; 32
    4196:	b1 e4       	ldi	r27, 0x41	; 65
    4198:	8b 87       	std	Y+11, r24	; 0x0b
    419a:	9c 87       	std	Y+12, r25	; 0x0c
    419c:	ad 87       	std	Y+13, r26	; 0x0d
    419e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    41a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	4a ef       	ldi	r20, 0xFA	; 250
    41ae:	54 e4       	ldi	r21, 0x44	; 68
    41b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b4:	dc 01       	movw	r26, r24
    41b6:	cb 01       	movw	r24, r22
    41b8:	8f 83       	std	Y+7, r24	; 0x07
    41ba:	98 87       	std	Y+8, r25	; 0x08
    41bc:	a9 87       	std	Y+9, r26	; 0x09
    41be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41c0:	6f 81       	ldd	r22, Y+7	; 0x07
    41c2:	78 85       	ldd	r23, Y+8	; 0x08
    41c4:	89 85       	ldd	r24, Y+9	; 0x09
    41c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	40 e8       	ldi	r20, 0x80	; 128
    41ce:	5f e3       	ldi	r21, 0x3F	; 63
    41d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41d4:	88 23       	and	r24, r24
    41d6:	2c f4       	brge	.+10     	; 0x41e2 <main+0x516>
		__ticks = 1;
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	9e 83       	std	Y+6, r25	; 0x06
    41de:	8d 83       	std	Y+5, r24	; 0x05
    41e0:	3f c0       	rjmp	.+126    	; 0x4260 <main+0x594>
	else if (__tmp > 65535)
    41e2:	6f 81       	ldd	r22, Y+7	; 0x07
    41e4:	78 85       	ldd	r23, Y+8	; 0x08
    41e6:	89 85       	ldd	r24, Y+9	; 0x09
    41e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	3f ef       	ldi	r19, 0xFF	; 255
    41ee:	4f e7       	ldi	r20, 0x7F	; 127
    41f0:	57 e4       	ldi	r21, 0x47	; 71
    41f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41f6:	18 16       	cp	r1, r24
    41f8:	4c f5       	brge	.+82     	; 0x424c <main+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    41fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4200:	9e 85       	ldd	r25, Y+14	; 0x0e
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e2       	ldi	r20, 0x20	; 32
    4208:	51 e4       	ldi	r21, 0x41	; 65
    420a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	bc 01       	movw	r22, r24
    4214:	cd 01       	movw	r24, r26
    4216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	9e 83       	std	Y+6, r25	; 0x06
    4220:	8d 83       	std	Y+5, r24	; 0x05
    4222:	0f c0       	rjmp	.+30     	; 0x4242 <main+0x576>
    4224:	88 ec       	ldi	r24, 0xC8	; 200
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	9c 83       	std	Y+4, r25	; 0x04
    422a:	8b 83       	std	Y+3, r24	; 0x03
    422c:	8b 81       	ldd	r24, Y+3	; 0x03
    422e:	9c 81       	ldd	r25, Y+4	; 0x04
    4230:	01 97       	sbiw	r24, 0x01	; 1
    4232:	f1 f7       	brne	.-4      	; 0x4230 <main+0x564>
    4234:	9c 83       	std	Y+4, r25	; 0x04
    4236:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4238:	8d 81       	ldd	r24, Y+5	; 0x05
    423a:	9e 81       	ldd	r25, Y+6	; 0x06
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	9e 83       	std	Y+6, r25	; 0x06
    4240:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4242:	8d 81       	ldd	r24, Y+5	; 0x05
    4244:	9e 81       	ldd	r25, Y+6	; 0x06
    4246:	00 97       	sbiw	r24, 0x00	; 0
    4248:	69 f7       	brne	.-38     	; 0x4224 <main+0x558>
    424a:	68 cf       	rjmp	.-304    	; 0x411c <main+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424c:	6f 81       	ldd	r22, Y+7	; 0x07
    424e:	78 85       	ldd	r23, Y+8	; 0x08
    4250:	89 85       	ldd	r24, Y+9	; 0x09
    4252:	9a 85       	ldd	r25, Y+10	; 0x0a
    4254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	9e 83       	std	Y+6, r25	; 0x06
    425e:	8d 83       	std	Y+5, r24	; 0x05
    4260:	8d 81       	ldd	r24, Y+5	; 0x05
    4262:	9e 81       	ldd	r25, Y+6	; 0x06
    4264:	9a 83       	std	Y+2, r25	; 0x02
    4266:	89 83       	std	Y+1, r24	; 0x01
    4268:	89 81       	ldd	r24, Y+1	; 0x01
    426a:	9a 81       	ldd	r25, Y+2	; 0x02
    426c:	01 97       	sbiw	r24, 0x01	; 1
    426e:	f1 f7       	brne	.-4      	; 0x426c <main+0x5a0>
    4270:	9a 83       	std	Y+2, r25	; 0x02
    4272:	89 83       	std	Y+1, r24	; 0x01
    4274:	53 cf       	rjmp	.-346    	; 0x411c <main+0x450>

00004276 <__mulsi3>:
    4276:	62 9f       	mul	r22, r18
    4278:	d0 01       	movw	r26, r0
    427a:	73 9f       	mul	r23, r19
    427c:	f0 01       	movw	r30, r0
    427e:	82 9f       	mul	r24, r18
    4280:	e0 0d       	add	r30, r0
    4282:	f1 1d       	adc	r31, r1
    4284:	64 9f       	mul	r22, r20
    4286:	e0 0d       	add	r30, r0
    4288:	f1 1d       	adc	r31, r1
    428a:	92 9f       	mul	r25, r18
    428c:	f0 0d       	add	r31, r0
    428e:	83 9f       	mul	r24, r19
    4290:	f0 0d       	add	r31, r0
    4292:	74 9f       	mul	r23, r20
    4294:	f0 0d       	add	r31, r0
    4296:	65 9f       	mul	r22, r21
    4298:	f0 0d       	add	r31, r0
    429a:	99 27       	eor	r25, r25
    429c:	72 9f       	mul	r23, r18
    429e:	b0 0d       	add	r27, r0
    42a0:	e1 1d       	adc	r30, r1
    42a2:	f9 1f       	adc	r31, r25
    42a4:	63 9f       	mul	r22, r19
    42a6:	b0 0d       	add	r27, r0
    42a8:	e1 1d       	adc	r30, r1
    42aa:	f9 1f       	adc	r31, r25
    42ac:	bd 01       	movw	r22, r26
    42ae:	cf 01       	movw	r24, r30
    42b0:	11 24       	eor	r1, r1
    42b2:	08 95       	ret

000042b4 <__udivmodhi4>:
    42b4:	aa 1b       	sub	r26, r26
    42b6:	bb 1b       	sub	r27, r27
    42b8:	51 e1       	ldi	r21, 0x11	; 17
    42ba:	07 c0       	rjmp	.+14     	; 0x42ca <__udivmodhi4_ep>

000042bc <__udivmodhi4_loop>:
    42bc:	aa 1f       	adc	r26, r26
    42be:	bb 1f       	adc	r27, r27
    42c0:	a6 17       	cp	r26, r22
    42c2:	b7 07       	cpc	r27, r23
    42c4:	10 f0       	brcs	.+4      	; 0x42ca <__udivmodhi4_ep>
    42c6:	a6 1b       	sub	r26, r22
    42c8:	b7 0b       	sbc	r27, r23

000042ca <__udivmodhi4_ep>:
    42ca:	88 1f       	adc	r24, r24
    42cc:	99 1f       	adc	r25, r25
    42ce:	5a 95       	dec	r21
    42d0:	a9 f7       	brne	.-22     	; 0x42bc <__udivmodhi4_loop>
    42d2:	80 95       	com	r24
    42d4:	90 95       	com	r25
    42d6:	bc 01       	movw	r22, r24
    42d8:	cd 01       	movw	r24, r26
    42da:	08 95       	ret

000042dc <__divmodhi4>:
    42dc:	97 fb       	bst	r25, 7
    42de:	09 2e       	mov	r0, r25
    42e0:	07 26       	eor	r0, r23
    42e2:	0a d0       	rcall	.+20     	; 0x42f8 <__divmodhi4_neg1>
    42e4:	77 fd       	sbrc	r23, 7
    42e6:	04 d0       	rcall	.+8      	; 0x42f0 <__divmodhi4_neg2>
    42e8:	e5 df       	rcall	.-54     	; 0x42b4 <__udivmodhi4>
    42ea:	06 d0       	rcall	.+12     	; 0x42f8 <__divmodhi4_neg1>
    42ec:	00 20       	and	r0, r0
    42ee:	1a f4       	brpl	.+6      	; 0x42f6 <__divmodhi4_exit>

000042f0 <__divmodhi4_neg2>:
    42f0:	70 95       	com	r23
    42f2:	61 95       	neg	r22
    42f4:	7f 4f       	sbci	r23, 0xFF	; 255

000042f6 <__divmodhi4_exit>:
    42f6:	08 95       	ret

000042f8 <__divmodhi4_neg1>:
    42f8:	f6 f7       	brtc	.-4      	; 0x42f6 <__divmodhi4_exit>
    42fa:	90 95       	com	r25
    42fc:	81 95       	neg	r24
    42fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4300:	08 95       	ret

00004302 <__udivmodsi4>:
    4302:	a1 e2       	ldi	r26, 0x21	; 33
    4304:	1a 2e       	mov	r1, r26
    4306:	aa 1b       	sub	r26, r26
    4308:	bb 1b       	sub	r27, r27
    430a:	fd 01       	movw	r30, r26
    430c:	0d c0       	rjmp	.+26     	; 0x4328 <__udivmodsi4_ep>

0000430e <__udivmodsi4_loop>:
    430e:	aa 1f       	adc	r26, r26
    4310:	bb 1f       	adc	r27, r27
    4312:	ee 1f       	adc	r30, r30
    4314:	ff 1f       	adc	r31, r31
    4316:	a2 17       	cp	r26, r18
    4318:	b3 07       	cpc	r27, r19
    431a:	e4 07       	cpc	r30, r20
    431c:	f5 07       	cpc	r31, r21
    431e:	20 f0       	brcs	.+8      	; 0x4328 <__udivmodsi4_ep>
    4320:	a2 1b       	sub	r26, r18
    4322:	b3 0b       	sbc	r27, r19
    4324:	e4 0b       	sbc	r30, r20
    4326:	f5 0b       	sbc	r31, r21

00004328 <__udivmodsi4_ep>:
    4328:	66 1f       	adc	r22, r22
    432a:	77 1f       	adc	r23, r23
    432c:	88 1f       	adc	r24, r24
    432e:	99 1f       	adc	r25, r25
    4330:	1a 94       	dec	r1
    4332:	69 f7       	brne	.-38     	; 0x430e <__udivmodsi4_loop>
    4334:	60 95       	com	r22
    4336:	70 95       	com	r23
    4338:	80 95       	com	r24
    433a:	90 95       	com	r25
    433c:	9b 01       	movw	r18, r22
    433e:	ac 01       	movw	r20, r24
    4340:	bd 01       	movw	r22, r26
    4342:	cf 01       	movw	r24, r30
    4344:	08 95       	ret

00004346 <__prologue_saves__>:
    4346:	2f 92       	push	r2
    4348:	3f 92       	push	r3
    434a:	4f 92       	push	r4
    434c:	5f 92       	push	r5
    434e:	6f 92       	push	r6
    4350:	7f 92       	push	r7
    4352:	8f 92       	push	r8
    4354:	9f 92       	push	r9
    4356:	af 92       	push	r10
    4358:	bf 92       	push	r11
    435a:	cf 92       	push	r12
    435c:	df 92       	push	r13
    435e:	ef 92       	push	r14
    4360:	ff 92       	push	r15
    4362:	0f 93       	push	r16
    4364:	1f 93       	push	r17
    4366:	cf 93       	push	r28
    4368:	df 93       	push	r29
    436a:	cd b7       	in	r28, 0x3d	; 61
    436c:	de b7       	in	r29, 0x3e	; 62
    436e:	ca 1b       	sub	r28, r26
    4370:	db 0b       	sbc	r29, r27
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	f8 94       	cli
    4376:	de bf       	out	0x3e, r29	; 62
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	cd bf       	out	0x3d, r28	; 61
    437c:	09 94       	ijmp

0000437e <__epilogue_restores__>:
    437e:	2a 88       	ldd	r2, Y+18	; 0x12
    4380:	39 88       	ldd	r3, Y+17	; 0x11
    4382:	48 88       	ldd	r4, Y+16	; 0x10
    4384:	5f 84       	ldd	r5, Y+15	; 0x0f
    4386:	6e 84       	ldd	r6, Y+14	; 0x0e
    4388:	7d 84       	ldd	r7, Y+13	; 0x0d
    438a:	8c 84       	ldd	r8, Y+12	; 0x0c
    438c:	9b 84       	ldd	r9, Y+11	; 0x0b
    438e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4390:	b9 84       	ldd	r11, Y+9	; 0x09
    4392:	c8 84       	ldd	r12, Y+8	; 0x08
    4394:	df 80       	ldd	r13, Y+7	; 0x07
    4396:	ee 80       	ldd	r14, Y+6	; 0x06
    4398:	fd 80       	ldd	r15, Y+5	; 0x05
    439a:	0c 81       	ldd	r16, Y+4	; 0x04
    439c:	1b 81       	ldd	r17, Y+3	; 0x03
    439e:	aa 81       	ldd	r26, Y+2	; 0x02
    43a0:	b9 81       	ldd	r27, Y+1	; 0x01
    43a2:	ce 0f       	add	r28, r30
    43a4:	d1 1d       	adc	r29, r1
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	f8 94       	cli
    43aa:	de bf       	out	0x3e, r29	; 62
    43ac:	0f be       	out	0x3f, r0	; 63
    43ae:	cd bf       	out	0x3d, r28	; 61
    43b0:	ed 01       	movw	r28, r26
    43b2:	08 95       	ret

000043b4 <_exit>:
    43b4:	f8 94       	cli

000043b6 <__stop_program>:
    43b6:	ff cf       	rjmp	.-2      	; 0x43b6 <__stop_program>
